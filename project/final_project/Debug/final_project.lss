
final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  00002e6e  00002f02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000fa  008000fa  00002f9c  2**0
                  ALLOC
  3 .stab         00003360  00000000  00000000  00002f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014a5  00000000  00000000  000062fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000077a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000078e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000969a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a585  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b334  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b494  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b721  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000beef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 16 0c 	jmp	0x182c	; 0x182c <__vector_5>
      18:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__vector_6>
      1c:	0c 94 ba 15 	jmp	0x2b74	; 0x2b74 <__vector_7>
      20:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3f       	cpi	r26, 0xFA	; 250
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ef       	ldi	r26, 0xFA	; 250
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 30       	cpi	r26, 0x07	; 7
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <main>
      8a:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af ee       	ldi	r26, 0xEF	; 239
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f ee       	ldi	r24, 0xEF	; 239
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_14>:
#include "ADC.h"

volatile uint16 g_adcResult = 0;

ISR (ADC_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	8f 93       	push	r24
     b52:	9f 93       	push	r25
     b54:	ef 93       	push	r30
     b56:	ff 93       	push	r31
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
	g_adcResult = ADC ;
     b60:	e4 e2       	ldi	r30, 0x24	; 36
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	91 81       	ldd	r25, Z+1	; 0x01
     b68:	90 93 fb 00 	sts	0x00FB, r25
     b6c:	80 93 fa 00 	sts	0x00FA, r24
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	ff 91       	pop	r31
     b76:	ef 91       	pop	r30
     b78:	9f 91       	pop	r25
     b7a:	8f 91       	pop	r24
     b7c:	0f 90       	pop	r0
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	0f 90       	pop	r0
     b82:	1f 90       	pop	r1
     b84:	18 95       	reti

00000b86 <ADC_init>:


void ADC_init(const ADC_configType *config_ptr)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <ADC_init+0x6>
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	9a 83       	std	Y+2, r25	; 0x02
     b92:	89 83       	std	Y+1, r24	; 0x01
	/*Adjust Vref*/
	ADMUX =((config_ptr -> vref)<<6);
     b94:	a7 e2       	ldi	r26, 0x27	; 39
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e9 81       	ldd	r30, Y+1	; 0x01
     b9a:	fa 81       	ldd	r31, Y+2	; 0x02
     b9c:	80 81       	ld	r24, Z
     b9e:	82 95       	swap	r24
     ba0:	88 0f       	add	r24, r24
     ba2:	88 0f       	add	r24, r24
     ba4:	80 7c       	andi	r24, 0xC0	; 192
     ba6:	8c 93       	st	X, r24
	/*enable ADC
	 * choose ADC Clock
	 * Enable or disable interrupt if conversion complete
	 */
	ADCSRA = (1<<ADEN) | ((config_ptr -> interrupt)<<ADIE) | (config_ptr ->clk);
     ba8:	a6 e2       	ldi	r26, 0x26	; 38
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	e9 81       	ldd	r30, Y+1	; 0x01
     bae:	fa 81       	ldd	r31, Y+2	; 0x02
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
     bb2:	88 2f       	mov	r24, r24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	98 2f       	mov	r25, r24
     bc4:	90 68       	ori	r25, 0x80	; 128
     bc6:	e9 81       	ldd	r30, Y+1	; 0x01
     bc8:	fa 81       	ldd	r31, Y+2	; 0x02
     bca:	82 81       	ldd	r24, Z+2	; 0x02
     bcc:	89 2b       	or	r24, r25
     bce:	8c 93       	st	X, r24

}
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <ADC_readChannel>:

void ADC_readChannel(uint8 channel_num)
{
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	0f 92       	push	r0
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX =(ADMUX & 0xE0) | (channel_num & 0x07);
     be6:	a7 e2       	ldi	r26, 0x27	; 39
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e7 e2       	ldi	r30, 0x27	; 39
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	98 2f       	mov	r25, r24
     bf2:	90 7e       	andi	r25, 0xE0	; 224
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	87 70       	andi	r24, 0x07	; 7
     bf8:	89 2b       	or	r24, r25
     bfa:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADSC);
     bfc:	a6 e2       	ldi	r26, 0x26	; 38
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e6 e2       	ldi	r30, 0x26	; 38
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	80 64       	ori	r24, 0x40	; 64
     c08:	8c 93       	st	X, r24

	/* polling if interrupt Disabled */
	if(BIT_IS_CLEAR(ADCSRA ,ADIE))
     c0a:	e6 e2       	ldi	r30, 0x26	; 38
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	88 70       	andi	r24, 0x08	; 8
     c16:	90 70       	andi	r25, 0x00	; 0
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	c1 f4       	brne	.+48     	; 0xc4c <ADC_readChannel+0x72>
	{

		while(BIT_IS_CLEAR(ADCSRA,ADIF));
     c1c:	e6 e2       	ldi	r30, 0x26	; 38
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	88 2f       	mov	r24, r24
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	80 71       	andi	r24, 0x10	; 16
     c28:	90 70       	andi	r25, 0x00	; 0
     c2a:	00 97       	sbiw	r24, 0x00	; 0
     c2c:	b9 f3       	breq	.-18     	; 0xc1c <ADC_readChannel+0x42>
		SET_BIT(ADCSRA ,ADIF);
     c2e:	a6 e2       	ldi	r26, 0x26	; 38
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e6 e2       	ldi	r30, 0x26	; 38
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	80 61       	ori	r24, 0x10	; 16
     c3a:	8c 93       	st	X, r24
		g_adcResult = ADC ;
     c3c:	e4 e2       	ldi	r30, 0x24	; 36
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	91 81       	ldd	r25, Z+1	; 0x01
     c44:	90 93 fb 00 	sts	0x00FB, r25
     c48:	80 93 fa 00 	sts	0x00FA, r24
	}

}
     c4c:	0f 90       	pop	r0
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <modules_init>:
 * Description : initialize Modules needed to interface with user
 * enable global interrupt bit
 */

void modules_init (void)
{
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
     c5c:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_init>
	UART_init();
     c60:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <UART_init>
	SREG |= (1<<7);
     c64:	af e5       	ldi	r26, 0x5F	; 95
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	ef e5       	ldi	r30, 0x5F	; 95
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	80 68       	ori	r24, 0x80	; 128
     c70:	8c 93       	st	X, r24

}
     c72:	cf 91       	pop	r28
     c74:	df 91       	pop	r29
     c76:	08 95       	ret

00000c78 <Timer1_setup>:
/*
 * Description : initialize Timer1 CTC + set call back to required function
 */
void Timer1_setup (timer_config * config_ptr)
{
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	00 d0       	rcall	.+0      	; 0xc7e <Timer1_setup+0x6>
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	9a 83       	std	Y+2, r25	; 0x02
     c84:	89 83       	std	Y+1, r24	; 0x01
	timer1_ctc_chAB_init(config_ptr , 9770, 19532);
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	9a 81       	ldd	r25, Y+2	; 0x02
     c8a:	6a e2       	ldi	r22, 0x2A	; 42
     c8c:	76 e2       	ldi	r23, 0x26	; 38
     c8e:	4c e4       	ldi	r20, 0x4C	; 76
     c90:	5c e4       	ldi	r21, 0x4C	; 76
     c92:	0e 94 9a 14 	call	0x2934	; 0x2934 <timer1_ctc_chAB_init>
	Timer1_setCallBackChB(openFlag);
     c96:	88 e5       	ldi	r24, 0x58	; 88
     c98:	96 e0       	ldi	r25, 0x06	; 6
     c9a:	0e 94 42 15 	call	0x2a84	; 0x2a84 <Timer1_setCallBackChB>
	Timer1_setCallBackChA(closeFlag);
     c9e:	82 e6       	ldi	r24, 0x62	; 98
     ca0:	96 e0       	ldi	r25, 0x06	; 6
     ca2:	0e 94 30 15 	call	0x2a60	; 0x2a60 <Timer1_setCallBackChA>

}
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <openFlag>:

/*
 * Description : these two functions changes the value of polling flags
 */
void openFlag (void)
{
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62
	open_flag = 1;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	80 93 fc 00 	sts	0x00FC, r24
}
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <closeFlag>:



void closeFlag (void)
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
	close_flag = 1;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	80 93 fd 00 	sts	0x00FD, r24
}
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <user_setPW>:
 * and send it to the 2nd MCU
 *
 */

void user_setPW (void)
{
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	a4 97       	sbiw	r28, 0x24	; 36
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61

	uint8 password_1[pass_length+2];

	uint8 i;

	if(visits == 0)
     cf0:	80 91 fe 00 	lds	r24, 0x00FE
     cf4:	88 23       	and	r24, r24
     cf6:	09 f0       	breq	.+2      	; 0xcfa <user_setPW+0x22>
     cf8:	81 c0       	rjmp	.+258    	; 0xdfc <user_setPW+0x124>
	{
		visits ++;
     cfa:	80 91 fe 00 	lds	r24, 0x00FE
     cfe:	8f 5f       	subi	r24, 0xFF	; 255
     d00:	80 93 fe 00 	sts	0x00FE, r24
		LCD_clearScreen();
     d04:	0e 94 34 14 	call	0x2868	; 0x2868 <LCD_clearScreen>
		LCD_goToRowColumn(0,0);
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	0e 94 b6 13 	call	0x276c	; 0x276c <LCD_goToRowColumn>
		LCD_displayString(" **WELCOME** ");
     d10:	80 e6       	ldi	r24, 0x60	; 96
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_displayString>
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	aa ef       	ldi	r26, 0xFA	; 250
     d1e:	b4 e4       	ldi	r27, 0x44	; 68
     d20:	89 8f       	std	Y+25, r24	; 0x19
     d22:	9a 8f       	std	Y+26, r25	; 0x1a
     d24:	ab 8f       	std	Y+27, r26	; 0x1b
     d26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d28:	69 8d       	ldd	r22, Y+25	; 0x19
     d2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	4a e7       	ldi	r20, 0x7A	; 122
     d36:	53 e4       	ldi	r21, 0x43	; 67
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	8d 8b       	std	Y+21, r24	; 0x15
     d42:	9e 8b       	std	Y+22, r25	; 0x16
     d44:	af 8b       	std	Y+23, r26	; 0x17
     d46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d48:	6d 89       	ldd	r22, Y+21	; 0x15
     d4a:	7e 89       	ldd	r23, Y+22	; 0x16
     d4c:	8f 89       	ldd	r24, Y+23	; 0x17
     d4e:	98 8d       	ldd	r25, Y+24	; 0x18
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e8       	ldi	r20, 0x80	; 128
     d56:	5f e3       	ldi	r21, 0x3F	; 63
     d58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d5c:	88 23       	and	r24, r24
     d5e:	2c f4       	brge	.+10     	; 0xd6a <user_setPW+0x92>
		__ticks = 1;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	9c 8b       	std	Y+20, r25	; 0x14
     d66:	8b 8b       	std	Y+19, r24	; 0x13
     d68:	3f c0       	rjmp	.+126    	; 0xde8 <user_setPW+0x110>
	else if (__tmp > 65535)
     d6a:	6d 89       	ldd	r22, Y+21	; 0x15
     d6c:	7e 89       	ldd	r23, Y+22	; 0x16
     d6e:	8f 89       	ldd	r24, Y+23	; 0x17
     d70:	98 8d       	ldd	r25, Y+24	; 0x18
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	3f ef       	ldi	r19, 0xFF	; 255
     d76:	4f e7       	ldi	r20, 0x7F	; 127
     d78:	57 e4       	ldi	r21, 0x47	; 71
     d7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d7e:	18 16       	cp	r1, r24
     d80:	4c f5       	brge	.+82     	; 0xdd4 <user_setPW+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d82:	69 8d       	ldd	r22, Y+25	; 0x19
     d84:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d86:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d88:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	40 e2       	ldi	r20, 0x20	; 32
     d90:	51 e4       	ldi	r21, 0x41	; 65
     d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	bc 01       	movw	r22, r24
     d9c:	cd 01       	movw	r24, r26
     d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	9c 8b       	std	Y+20, r25	; 0x14
     da8:	8b 8b       	std	Y+19, r24	; 0x13
     daa:	0f c0       	rjmp	.+30     	; 0xdca <user_setPW+0xf2>
     dac:	89 e1       	ldi	r24, 0x19	; 25
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	9a 8b       	std	Y+18, r25	; 0x12
     db2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     db4:	89 89       	ldd	r24, Y+17	; 0x11
     db6:	9a 89       	ldd	r25, Y+18	; 0x12
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <user_setPW+0xe0>
     dbc:	9a 8b       	std	Y+18, r25	; 0x12
     dbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc0:	8b 89       	ldd	r24, Y+19	; 0x13
     dc2:	9c 89       	ldd	r25, Y+20	; 0x14
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	9c 8b       	std	Y+20, r25	; 0x14
     dc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dca:	8b 89       	ldd	r24, Y+19	; 0x13
     dcc:	9c 89       	ldd	r25, Y+20	; 0x14
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	69 f7       	brne	.-38     	; 0xdac <user_setPW+0xd4>
     dd2:	14 c0       	rjmp	.+40     	; 0xdfc <user_setPW+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd4:	6d 89       	ldd	r22, Y+21	; 0x15
     dd6:	7e 89       	ldd	r23, Y+22	; 0x16
     dd8:	8f 89       	ldd	r24, Y+23	; 0x17
     dda:	98 8d       	ldd	r25, Y+24	; 0x18
     ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	9c 8b       	std	Y+20, r25	; 0x14
     de6:	8b 8b       	std	Y+19, r24	; 0x13
     de8:	8b 89       	ldd	r24, Y+19	; 0x13
     dea:	9c 89       	ldd	r25, Y+20	; 0x14
     dec:	98 8b       	std	Y+16, r25	; 0x10
     dee:	8f 87       	std	Y+15, r24	; 0x0f
     df0:	8f 85       	ldd	r24, Y+15	; 0x0f
     df2:	98 89       	ldd	r25, Y+16	; 0x10
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <user_setPW+0x11c>
     df8:	98 8b       	std	Y+16, r25	; 0x10
     dfa:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);
	}


	LCD_clearScreen();
     dfc:	0e 94 34 14 	call	0x2868	; 0x2868 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Enter Password:  ");
     e00:	2e e6       	ldi	r18, 0x6E	; 110
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	a9 01       	movw	r20, r18
     e0a:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	0e 94 b6 13 	call	0x276c	; 0x276c <LCD_goToRowColumn>

	for(i = 0; i< pass_length ;i++)
     e16:	1d 8e       	std	Y+29, r1	; 0x1d
     e18:	95 c0       	rjmp	.+298    	; 0xf44 <user_setPW+0x26c>
	{
		password_1[i] = KeyPad_getPressedKey();
     e1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e1c:	08 2f       	mov	r16, r24
     e1e:	10 e0       	ldi	r17, 0x00	; 0
     e20:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <KeyPad_getPressedKey>
     e24:	28 2f       	mov	r18, r24
     e26:	ce 01       	movw	r24, r28
     e28:	4e 96       	adiw	r24, 0x1e	; 30
     e2a:	fc 01       	movw	r30, r24
     e2c:	e0 0f       	add	r30, r16
     e2e:	f1 1f       	adc	r31, r17
     e30:	20 83       	st	Z, r18

		LCD_intgerToString(password_1[i]);
     e32:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	ce 01       	movw	r24, r28
     e3a:	4e 96       	adiw	r24, 0x1e	; 30
     e3c:	fc 01       	movw	r30, r24
     e3e:	e2 0f       	add	r30, r18
     e40:	f3 1f       	adc	r31, r19
     e42:	80 81       	ld	r24, Z
     e44:	88 2f       	mov	r24, r24
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_intgerToString>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	a8 ec       	ldi	r26, 0xC8	; 200
     e52:	b2 e4       	ldi	r27, 0x42	; 66
     e54:	8b 87       	std	Y+11, r24	; 0x0b
     e56:	9c 87       	std	Y+12, r25	; 0x0c
     e58:	ad 87       	std	Y+13, r26	; 0x0d
     e5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e5e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e60:	8d 85       	ldd	r24, Y+13	; 0x0d
     e62:	9e 85       	ldd	r25, Y+14	; 0x0e
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	4a e7       	ldi	r20, 0x7A	; 122
     e6a:	53 e4       	ldi	r21, 0x43	; 67
     e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	8f 83       	std	Y+7, r24	; 0x07
     e76:	98 87       	std	Y+8, r25	; 0x08
     e78:	a9 87       	std	Y+9, r26	; 0x09
     e7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e7c:	6f 81       	ldd	r22, Y+7	; 0x07
     e7e:	78 85       	ldd	r23, Y+8	; 0x08
     e80:	89 85       	ldd	r24, Y+9	; 0x09
     e82:	9a 85       	ldd	r25, Y+10	; 0x0a
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e8       	ldi	r20, 0x80	; 128
     e8a:	5f e3       	ldi	r21, 0x3F	; 63
     e8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e90:	88 23       	and	r24, r24
     e92:	2c f4       	brge	.+10     	; 0xe9e <user_setPW+0x1c6>
		__ticks = 1;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	9e 83       	std	Y+6, r25	; 0x06
     e9a:	8d 83       	std	Y+5, r24	; 0x05
     e9c:	3f c0       	rjmp	.+126    	; 0xf1c <user_setPW+0x244>
	else if (__tmp > 65535)
     e9e:	6f 81       	ldd	r22, Y+7	; 0x07
     ea0:	78 85       	ldd	r23, Y+8	; 0x08
     ea2:	89 85       	ldd	r24, Y+9	; 0x09
     ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	3f ef       	ldi	r19, 0xFF	; 255
     eaa:	4f e7       	ldi	r20, 0x7F	; 127
     eac:	57 e4       	ldi	r21, 0x47	; 71
     eae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eb2:	18 16       	cp	r1, r24
     eb4:	4c f5       	brge	.+82     	; 0xf08 <user_setPW+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eba:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e2       	ldi	r20, 0x20	; 32
     ec4:	51 e4       	ldi	r21, 0x41	; 65
     ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	bc 01       	movw	r22, r24
     ed0:	cd 01       	movw	r24, r26
     ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed6:	dc 01       	movw	r26, r24
     ed8:	cb 01       	movw	r24, r22
     eda:	9e 83       	std	Y+6, r25	; 0x06
     edc:	8d 83       	std	Y+5, r24	; 0x05
     ede:	0f c0       	rjmp	.+30     	; 0xefe <user_setPW+0x226>
     ee0:	89 e1       	ldi	r24, 0x19	; 25
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	9c 83       	std	Y+4, r25	; 0x04
     ee6:	8b 83       	std	Y+3, r24	; 0x03
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	9c 81       	ldd	r25, Y+4	; 0x04
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <user_setPW+0x214>
     ef0:	9c 83       	std	Y+4, r25	; 0x04
     ef2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	9e 81       	ldd	r25, Y+6	; 0x06
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	9e 83       	std	Y+6, r25	; 0x06
     efc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     efe:	8d 81       	ldd	r24, Y+5	; 0x05
     f00:	9e 81       	ldd	r25, Y+6	; 0x06
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	69 f7       	brne	.-38     	; 0xee0 <user_setPW+0x208>
     f06:	14 c0       	rjmp	.+40     	; 0xf30 <user_setPW+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f08:	6f 81       	ldd	r22, Y+7	; 0x07
     f0a:	78 85       	ldd	r23, Y+8	; 0x08
     f0c:	89 85       	ldd	r24, Y+9	; 0x09
     f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f14:	dc 01       	movw	r26, r24
     f16:	cb 01       	movw	r24, r22
     f18:	9e 83       	std	Y+6, r25	; 0x06
     f1a:	8d 83       	std	Y+5, r24	; 0x05
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	9a 83       	std	Y+2, r25	; 0x02
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <user_setPW+0x250>
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		LCD_goToRowColumn(1,i);
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	6d 8d       	ldd	r22, Y+29	; 0x1d
     f34:	0e 94 b6 13 	call	0x276c	; 0x276c <LCD_goToRowColumn>
		LCD_displayCharacter('*');
     f38:	8a e2       	ldi	r24, 0x2A	; 42
     f3a:	0e 94 91 11 	call	0x2322	; 0x2322 <LCD_displayCharacter>

	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "Enter Password:  ");
	LCD_goToRowColumn(1,0);

	for(i = 0; i< pass_length ;i++)
     f3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f40:	8f 5f       	subi	r24, 0xFF	; 255
     f42:	8d 8f       	std	Y+29, r24	; 0x1d
     f44:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f46:	85 30       	cpi	r24, 0x05	; 5
     f48:	08 f4       	brcc	.+2      	; 0xf4c <user_setPW+0x274>
     f4a:	67 cf       	rjmp	.-306    	; 0xe1a <user_setPW+0x142>
		LCD_goToRowColumn(1,i);
		LCD_displayCharacter('*');

	}

	password_1[i] = '#';
     f4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	ce 01       	movw	r24, r28
     f54:	4e 96       	adiw	r24, 0x1e	; 30
     f56:	fc 01       	movw	r30, r24
     f58:	e2 0f       	add	r30, r18
     f5a:	f3 1f       	adc	r31, r19
     f5c:	83 e2       	ldi	r24, 0x23	; 35
     f5e:	80 83       	st	Z, r24
	i++;
     f60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f62:	8f 5f       	subi	r24, 0xFF	; 255
     f64:	8d 8f       	std	Y+29, r24	; 0x1d

	password_1[i] ='\0';
     f66:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	ce 01       	movw	r24, r28
     f6e:	4e 96       	adiw	r24, 0x1e	; 30
     f70:	fc 01       	movw	r30, r24
     f72:	e2 0f       	add	r30, r18
     f74:	f3 1f       	adc	r31, r19
     f76:	10 82       	st	Z, r1


	UART_sendByte(READY);
     f78:	8a e0       	ldi	r24, 0x0A	; 10
     f7a:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <UART_sendByte>
//	while( UART_receiveByte() != READY);

	UART_sendString(password_1);
     f7e:	ce 01       	movw	r24, r28
     f80:	4e 96       	adiw	r24, 0x1e	; 30
     f82:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <UART_sendString>

	LCD_clearScreen();
     f86:	0e 94 34 14 	call	0x2868	; 0x2868 <LCD_clearScreen>

}
     f8a:	a4 96       	adiw	r28, 0x24	; 36
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	08 95       	ret

00000fa0 <user_confirmPW>:
 * and send it to the 2nd MCU
 *
 */

void user_confirmPW (void)
{
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	66 97       	sbiw	r28, 0x16	; 22
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
	uint8 password_2[pass_length+2];
	uint8 i ;
	LCD_clearScreen();
     fb8:	0e 94 34 14 	call	0x2868	; 0x2868 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "confirm Password:  ");
     fbc:	20 e8       	ldi	r18, 0x80	; 128
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	a9 01       	movw	r20, r18
     fc6:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	0e 94 b6 13 	call	0x276c	; 0x276c <LCD_goToRowColumn>

	for(i=0 ; i<pass_length ; i++)
     fd2:	1f 86       	std	Y+15, r1	; 0x0f
     fd4:	95 c0       	rjmp	.+298    	; 0x1100 <user_confirmPW+0x160>
	{
		password_2[i] = KeyPad_getPressedKey();
     fd6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd8:	08 2f       	mov	r16, r24
     fda:	10 e0       	ldi	r17, 0x00	; 0
     fdc:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <KeyPad_getPressedKey>
     fe0:	28 2f       	mov	r18, r24
     fe2:	ce 01       	movw	r24, r28
     fe4:	40 96       	adiw	r24, 0x10	; 16
     fe6:	fc 01       	movw	r30, r24
     fe8:	e0 0f       	add	r30, r16
     fea:	f1 1f       	adc	r31, r17
     fec:	20 83       	st	Z, r18

		LCD_intgerToString(password_2[i]);
     fee:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	ce 01       	movw	r24, r28
     ff6:	40 96       	adiw	r24, 0x10	; 16
     ff8:	fc 01       	movw	r30, r24
     ffa:	e2 0f       	add	r30, r18
     ffc:	f3 1f       	adc	r31, r19
     ffe:	80 81       	ld	r24, Z
    1000:	88 2f       	mov	r24, r24
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 11 14 	call	0x2822	; 0x2822 <LCD_intgerToString>
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a8 ec       	ldi	r26, 0xC8	; 200
    100e:	b2 e4       	ldi	r27, 0x42	; 66
    1010:	8b 87       	std	Y+11, r24	; 0x0b
    1012:	9c 87       	std	Y+12, r25	; 0x0c
    1014:	ad 87       	std	Y+13, r26	; 0x0d
    1016:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1018:	6b 85       	ldd	r22, Y+11	; 0x0b
    101a:	7c 85       	ldd	r23, Y+12	; 0x0c
    101c:	8d 85       	ldd	r24, Y+13	; 0x0d
    101e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	4a e7       	ldi	r20, 0x7A	; 122
    1026:	53 e4       	ldi	r21, 0x43	; 67
    1028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	8f 83       	std	Y+7, r24	; 0x07
    1032:	98 87       	std	Y+8, r25	; 0x08
    1034:	a9 87       	std	Y+9, r26	; 0x09
    1036:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1038:	6f 81       	ldd	r22, Y+7	; 0x07
    103a:	78 85       	ldd	r23, Y+8	; 0x08
    103c:	89 85       	ldd	r24, Y+9	; 0x09
    103e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e8       	ldi	r20, 0x80	; 128
    1046:	5f e3       	ldi	r21, 0x3F	; 63
    1048:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    104c:	88 23       	and	r24, r24
    104e:	2c f4       	brge	.+10     	; 0x105a <user_confirmPW+0xba>
		__ticks = 1;
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	9e 83       	std	Y+6, r25	; 0x06
    1056:	8d 83       	std	Y+5, r24	; 0x05
    1058:	3f c0       	rjmp	.+126    	; 0x10d8 <user_confirmPW+0x138>
	else if (__tmp > 65535)
    105a:	6f 81       	ldd	r22, Y+7	; 0x07
    105c:	78 85       	ldd	r23, Y+8	; 0x08
    105e:	89 85       	ldd	r24, Y+9	; 0x09
    1060:	9a 85       	ldd	r25, Y+10	; 0x0a
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	3f ef       	ldi	r19, 0xFF	; 255
    1066:	4f e7       	ldi	r20, 0x7F	; 127
    1068:	57 e4       	ldi	r21, 0x47	; 71
    106a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    106e:	18 16       	cp	r1, r24
    1070:	4c f5       	brge	.+82     	; 0x10c4 <user_confirmPW+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1072:	6b 85       	ldd	r22, Y+11	; 0x0b
    1074:	7c 85       	ldd	r23, Y+12	; 0x0c
    1076:	8d 85       	ldd	r24, Y+13	; 0x0d
    1078:	9e 85       	ldd	r25, Y+14	; 0x0e
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e2       	ldi	r20, 0x20	; 32
    1080:	51 e4       	ldi	r21, 0x41	; 65
    1082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	bc 01       	movw	r22, r24
    108c:	cd 01       	movw	r24, r26
    108e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	9e 83       	std	Y+6, r25	; 0x06
    1098:	8d 83       	std	Y+5, r24	; 0x05
    109a:	0f c0       	rjmp	.+30     	; 0x10ba <user_confirmPW+0x11a>
    109c:	89 e1       	ldi	r24, 0x19	; 25
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	9c 83       	std	Y+4, r25	; 0x04
    10a2:	8b 83       	std	Y+3, r24	; 0x03
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	9c 81       	ldd	r25, Y+4	; 0x04
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	f1 f7       	brne	.-4      	; 0x10a8 <user_confirmPW+0x108>
    10ac:	9c 83       	std	Y+4, r25	; 0x04
    10ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	9e 81       	ldd	r25, Y+6	; 0x06
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	9e 83       	std	Y+6, r25	; 0x06
    10b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ba:	8d 81       	ldd	r24, Y+5	; 0x05
    10bc:	9e 81       	ldd	r25, Y+6	; 0x06
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	69 f7       	brne	.-38     	; 0x109c <user_confirmPW+0xfc>
    10c2:	14 c0       	rjmp	.+40     	; 0x10ec <user_confirmPW+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c4:	6f 81       	ldd	r22, Y+7	; 0x07
    10c6:	78 85       	ldd	r23, Y+8	; 0x08
    10c8:	89 85       	ldd	r24, Y+9	; 0x09
    10ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    10cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	9e 83       	std	Y+6, r25	; 0x06
    10d6:	8d 83       	std	Y+5, r24	; 0x05
    10d8:	8d 81       	ldd	r24, Y+5	; 0x05
    10da:	9e 81       	ldd	r25, Y+6	; 0x06
    10dc:	9a 83       	std	Y+2, r25	; 0x02
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <user_confirmPW+0x144>
    10e8:	9a 83       	std	Y+2, r25	; 0x02
    10ea:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		LCD_goToRowColumn(1,i);
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	6f 85       	ldd	r22, Y+15	; 0x0f
    10f0:	0e 94 b6 13 	call	0x276c	; 0x276c <LCD_goToRowColumn>
		LCD_displayCharacter('*');
    10f4:	8a e2       	ldi	r24, 0x2A	; 42
    10f6:	0e 94 91 11 	call	0x2322	; 0x2322 <LCD_displayCharacter>
	uint8 i ;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "confirm Password:  ");
	LCD_goToRowColumn(1,0);

	for(i=0 ; i<pass_length ; i++)
    10fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    10fc:	8f 5f       	subi	r24, 0xFF	; 255
    10fe:	8f 87       	std	Y+15, r24	; 0x0f
    1100:	8f 85       	ldd	r24, Y+15	; 0x0f
    1102:	85 30       	cpi	r24, 0x05	; 5
    1104:	08 f4       	brcc	.+2      	; 0x1108 <user_confirmPW+0x168>
    1106:	67 cf       	rjmp	.-306    	; 0xfd6 <user_confirmPW+0x36>
		_delay_ms(100);
		LCD_goToRowColumn(1,i);
		LCD_displayCharacter('*');
	}

	password_2[i] = '#';
    1108:	8f 85       	ldd	r24, Y+15	; 0x0f
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	ce 01       	movw	r24, r28
    1110:	40 96       	adiw	r24, 0x10	; 16
    1112:	fc 01       	movw	r30, r24
    1114:	e2 0f       	add	r30, r18
    1116:	f3 1f       	adc	r31, r19
    1118:	83 e2       	ldi	r24, 0x23	; 35
    111a:	80 83       	st	Z, r24
	i++;
    111c:	8f 85       	ldd	r24, Y+15	; 0x0f
    111e:	8f 5f       	subi	r24, 0xFF	; 255
    1120:	8f 87       	std	Y+15, r24	; 0x0f

	password_2[i] ='\0';
    1122:	8f 85       	ldd	r24, Y+15	; 0x0f
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	ce 01       	movw	r24, r28
    112a:	40 96       	adiw	r24, 0x10	; 16
    112c:	fc 01       	movw	r30, r24
    112e:	e2 0f       	add	r30, r18
    1130:	f3 1f       	adc	r31, r19
    1132:	10 82       	st	Z, r1


	UART_sendByte(READY);
    1134:	8a e0       	ldi	r24, 0x0A	; 10
    1136:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <UART_sendByte>


	UART_sendString(password_2);
    113a:	ce 01       	movw	r24, r28
    113c:	40 96       	adiw	r24, 0x10	; 16
    113e:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <UART_sendString>

	LCD_clearScreen();
    1142:	0e 94 34 14 	call	0x2868	; 0x2868 <LCD_clearScreen>

}
    1146:	66 96       	adiw	r28, 0x16	; 22
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	08 95       	ret

0000115c <system_mainMenu>:
 * Input: void
 * Output: void
 *
 *****************************************************************************/
void system_mainMenu (void)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1164:	0e 94 34 14 	call	0x2868	; 0x2868 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+:Change PW");
    1168:	24 e9       	ldi	r18, 0x94	; 148
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	a9 01       	movw	r20, r18
    1172:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"-:Open Door");
    1176:	20 ea       	ldi	r18, 0xA0	; 160
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	a9 01       	movw	r20, r18
    1180:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_displayStringRowColumn>
}
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <System_checkMatching>:
/*
 * Description: send to second MCU ask for confirm the password if the two input passwords
 * are the same
 */
CHECK System_checkMatching (void)
{
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	00 d0       	rcall	.+0      	; 0x1190 <System_checkMatching+0x6>
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
	CHECK receive = UNMATCHED;
    1194:	19 82       	std	Y+1, r1	; 0x01

	while((UART_receiveByte ()) != READY);
    1196:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <UART_receiveByte>
    119a:	8a 30       	cpi	r24, 0x0A	; 10
    119c:	e1 f7       	brne	.-8      	; 0x1196 <System_checkMatching+0xc>


//	UART_sendByte(IF_PW_MATCHED);

	receive = UART_receiveByte();
    119e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <UART_receiveByte>
    11a2:	89 83       	std	Y+1, r24	; 0x01

	if(receive != MATCHED)
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	29 f0       	breq	.+10     	; 0x11b4 <System_checkMatching+0x2a>
	{
		system_errorMessage();
    11aa:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <system_errorMessage>
		return receive;
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	8a 83       	std	Y+2, r24	; 0x02
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <System_checkMatching+0x2e>
	}
	return receive;
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	8a 83       	std	Y+2, r24	; 0x02
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <system_errorMessage>:
/*
 * Description: function display error message to user
 * when the input password isn't right
 */
void system_errorMessage (void)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	e8 97       	sbiw	r28, 0x38	; 56
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    11d8:	0e 94 34 14 	call	0x2868	; 0x2868 <LCD_clearScreen>
	LCD_displayString(" **INVALID** ");
    11dc:	8c ea       	ldi	r24, 0xAC	; 172
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_displayString>
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	aa ef       	ldi	r26, 0xFA	; 250
    11ea:	b3 e4       	ldi	r27, 0x43	; 67
    11ec:	8d ab       	std	Y+53, r24	; 0x35
    11ee:	9e ab       	std	Y+54, r25	; 0x36
    11f0:	af ab       	std	Y+55, r26	; 0x37
    11f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f4:	6d a9       	ldd	r22, Y+53	; 0x35
    11f6:	7e a9       	ldd	r23, Y+54	; 0x36
    11f8:	8f a9       	ldd	r24, Y+55	; 0x37
    11fa:	98 ad       	ldd	r25, Y+56	; 0x38
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	4a e7       	ldi	r20, 0x7A	; 122
    1202:	53 e4       	ldi	r21, 0x43	; 67
    1204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	89 ab       	std	Y+49, r24	; 0x31
    120e:	9a ab       	std	Y+50, r25	; 0x32
    1210:	ab ab       	std	Y+51, r26	; 0x33
    1212:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1214:	69 a9       	ldd	r22, Y+49	; 0x31
    1216:	7a a9       	ldd	r23, Y+50	; 0x32
    1218:	8b a9       	ldd	r24, Y+51	; 0x33
    121a:	9c a9       	ldd	r25, Y+52	; 0x34
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e8       	ldi	r20, 0x80	; 128
    1222:	5f e3       	ldi	r21, 0x3F	; 63
    1224:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1228:	88 23       	and	r24, r24
    122a:	2c f4       	brge	.+10     	; 0x1236 <system_errorMessage+0x72>
		__ticks = 1;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	98 ab       	std	Y+48, r25	; 0x30
    1232:	8f a7       	std	Y+47, r24	; 0x2f
    1234:	3f c0       	rjmp	.+126    	; 0x12b4 <system_errorMessage+0xf0>
	else if (__tmp > 65535)
    1236:	69 a9       	ldd	r22, Y+49	; 0x31
    1238:	7a a9       	ldd	r23, Y+50	; 0x32
    123a:	8b a9       	ldd	r24, Y+51	; 0x33
    123c:	9c a9       	ldd	r25, Y+52	; 0x34
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	3f ef       	ldi	r19, 0xFF	; 255
    1242:	4f e7       	ldi	r20, 0x7F	; 127
    1244:	57 e4       	ldi	r21, 0x47	; 71
    1246:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    124a:	18 16       	cp	r1, r24
    124c:	4c f5       	brge	.+82     	; 0x12a0 <system_errorMessage+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    124e:	6d a9       	ldd	r22, Y+53	; 0x35
    1250:	7e a9       	ldd	r23, Y+54	; 0x36
    1252:	8f a9       	ldd	r24, Y+55	; 0x37
    1254:	98 ad       	ldd	r25, Y+56	; 0x38
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e2       	ldi	r20, 0x20	; 32
    125c:	51 e4       	ldi	r21, 0x41	; 65
    125e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	bc 01       	movw	r22, r24
    1268:	cd 01       	movw	r24, r26
    126a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	98 ab       	std	Y+48, r25	; 0x30
    1274:	8f a7       	std	Y+47, r24	; 0x2f
    1276:	0f c0       	rjmp	.+30     	; 0x1296 <system_errorMessage+0xd2>
    1278:	89 e1       	ldi	r24, 0x19	; 25
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	9e a7       	std	Y+46, r25	; 0x2e
    127e:	8d a7       	std	Y+45, r24	; 0x2d
    1280:	8d a5       	ldd	r24, Y+45	; 0x2d
    1282:	9e a5       	ldd	r25, Y+46	; 0x2e
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <system_errorMessage+0xc0>
    1288:	9e a7       	std	Y+46, r25	; 0x2e
    128a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128c:	8f a5       	ldd	r24, Y+47	; 0x2f
    128e:	98 a9       	ldd	r25, Y+48	; 0x30
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	98 ab       	std	Y+48, r25	; 0x30
    1294:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1296:	8f a5       	ldd	r24, Y+47	; 0x2f
    1298:	98 a9       	ldd	r25, Y+48	; 0x30
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	69 f7       	brne	.-38     	; 0x1278 <system_errorMessage+0xb4>
    129e:	14 c0       	rjmp	.+40     	; 0x12c8 <system_errorMessage+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a0:	69 a9       	ldd	r22, Y+49	; 0x31
    12a2:	7a a9       	ldd	r23, Y+50	; 0x32
    12a4:	8b a9       	ldd	r24, Y+51	; 0x33
    12a6:	9c a9       	ldd	r25, Y+52	; 0x34
    12a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	98 ab       	std	Y+48, r25	; 0x30
    12b2:	8f a7       	std	Y+47, r24	; 0x2f
    12b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    12b6:	98 a9       	ldd	r25, Y+48	; 0x30
    12b8:	9c a7       	std	Y+44, r25	; 0x2c
    12ba:	8b a7       	std	Y+43, r24	; 0x2b
    12bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    12be:	9c a5       	ldd	r25, Y+44	; 0x2c
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <system_errorMessage+0xfc>
    12c4:	9c a7       	std	Y+44, r25	; 0x2c
    12c6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500);

	LCD_sendCommand(0x08);
    12c8:	88 e0       	ldi	r24, 0x08	; 8
    12ca:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_sendCommand>
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	aa ef       	ldi	r26, 0xFA	; 250
    12d4:	b3 e4       	ldi	r27, 0x43	; 67
    12d6:	8f a3       	std	Y+39, r24	; 0x27
    12d8:	98 a7       	std	Y+40, r25	; 0x28
    12da:	a9 a7       	std	Y+41, r26	; 0x29
    12dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12de:	6f a1       	ldd	r22, Y+39	; 0x27
    12e0:	78 a5       	ldd	r23, Y+40	; 0x28
    12e2:	89 a5       	ldd	r24, Y+41	; 0x29
    12e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	4a e7       	ldi	r20, 0x7A	; 122
    12ec:	53 e4       	ldi	r21, 0x43	; 67
    12ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	8b a3       	std	Y+35, r24	; 0x23
    12f8:	9c a3       	std	Y+36, r25	; 0x24
    12fa:	ad a3       	std	Y+37, r26	; 0x25
    12fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1300:	7c a1       	ldd	r23, Y+36	; 0x24
    1302:	8d a1       	ldd	r24, Y+37	; 0x25
    1304:	9e a1       	ldd	r25, Y+38	; 0x26
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e8       	ldi	r20, 0x80	; 128
    130c:	5f e3       	ldi	r21, 0x3F	; 63
    130e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1312:	88 23       	and	r24, r24
    1314:	2c f4       	brge	.+10     	; 0x1320 <system_errorMessage+0x15c>
		__ticks = 1;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	9a a3       	std	Y+34, r25	; 0x22
    131c:	89 a3       	std	Y+33, r24	; 0x21
    131e:	3f c0       	rjmp	.+126    	; 0x139e <system_errorMessage+0x1da>
	else if (__tmp > 65535)
    1320:	6b a1       	ldd	r22, Y+35	; 0x23
    1322:	7c a1       	ldd	r23, Y+36	; 0x24
    1324:	8d a1       	ldd	r24, Y+37	; 0x25
    1326:	9e a1       	ldd	r25, Y+38	; 0x26
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	3f ef       	ldi	r19, 0xFF	; 255
    132c:	4f e7       	ldi	r20, 0x7F	; 127
    132e:	57 e4       	ldi	r21, 0x47	; 71
    1330:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1334:	18 16       	cp	r1, r24
    1336:	4c f5       	brge	.+82     	; 0x138a <system_errorMessage+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1338:	6f a1       	ldd	r22, Y+39	; 0x27
    133a:	78 a5       	ldd	r23, Y+40	; 0x28
    133c:	89 a5       	ldd	r24, Y+41	; 0x29
    133e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e2       	ldi	r20, 0x20	; 32
    1346:	51 e4       	ldi	r21, 0x41	; 65
    1348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	9a a3       	std	Y+34, r25	; 0x22
    135e:	89 a3       	std	Y+33, r24	; 0x21
    1360:	0f c0       	rjmp	.+30     	; 0x1380 <system_errorMessage+0x1bc>
    1362:	89 e1       	ldi	r24, 0x19	; 25
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	98 a3       	std	Y+32, r25	; 0x20
    1368:	8f 8f       	std	Y+31, r24	; 0x1f
    136a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    136c:	98 a1       	ldd	r25, Y+32	; 0x20
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <system_errorMessage+0x1aa>
    1372:	98 a3       	std	Y+32, r25	; 0x20
    1374:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1376:	89 a1       	ldd	r24, Y+33	; 0x21
    1378:	9a a1       	ldd	r25, Y+34	; 0x22
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	9a a3       	std	Y+34, r25	; 0x22
    137e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1380:	89 a1       	ldd	r24, Y+33	; 0x21
    1382:	9a a1       	ldd	r25, Y+34	; 0x22
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	69 f7       	brne	.-38     	; 0x1362 <system_errorMessage+0x19e>
    1388:	14 c0       	rjmp	.+40     	; 0x13b2 <system_errorMessage+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138a:	6b a1       	ldd	r22, Y+35	; 0x23
    138c:	7c a1       	ldd	r23, Y+36	; 0x24
    138e:	8d a1       	ldd	r24, Y+37	; 0x25
    1390:	9e a1       	ldd	r25, Y+38	; 0x26
    1392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	9a a3       	std	Y+34, r25	; 0x22
    139c:	89 a3       	std	Y+33, r24	; 0x21
    139e:	89 a1       	ldd	r24, Y+33	; 0x21
    13a0:	9a a1       	ldd	r25, Y+34	; 0x22
    13a2:	9e 8f       	std	Y+30, r25	; 0x1e
    13a4:	8d 8f       	std	Y+29, r24	; 0x1d
    13a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <system_errorMessage+0x1e6>
    13ae:	9e 8f       	std	Y+30, r25	; 0x1e
    13b0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	LCD_sendCommand(0x0C);
    13b2:	8c e0       	ldi	r24, 0x0C	; 12
    13b4:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_sendCommand>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	aa ef       	ldi	r26, 0xFA	; 250
    13be:	b3 e4       	ldi	r27, 0x43	; 67
    13c0:	89 8f       	std	Y+25, r24	; 0x19
    13c2:	9a 8f       	std	Y+26, r25	; 0x1a
    13c4:	ab 8f       	std	Y+27, r26	; 0x1b
    13c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c8:	69 8d       	ldd	r22, Y+25	; 0x19
    13ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	4a e7       	ldi	r20, 0x7A	; 122
    13d6:	53 e4       	ldi	r21, 0x43	; 67
    13d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	8d 8b       	std	Y+21, r24	; 0x15
    13e2:	9e 8b       	std	Y+22, r25	; 0x16
    13e4:	af 8b       	std	Y+23, r26	; 0x17
    13e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13e8:	6d 89       	ldd	r22, Y+21	; 0x15
    13ea:	7e 89       	ldd	r23, Y+22	; 0x16
    13ec:	8f 89       	ldd	r24, Y+23	; 0x17
    13ee:	98 8d       	ldd	r25, Y+24	; 0x18
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e8       	ldi	r20, 0x80	; 128
    13f6:	5f e3       	ldi	r21, 0x3F	; 63
    13f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13fc:	88 23       	and	r24, r24
    13fe:	2c f4       	brge	.+10     	; 0x140a <system_errorMessage+0x246>
		__ticks = 1;
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	9c 8b       	std	Y+20, r25	; 0x14
    1406:	8b 8b       	std	Y+19, r24	; 0x13
    1408:	3f c0       	rjmp	.+126    	; 0x1488 <system_errorMessage+0x2c4>
	else if (__tmp > 65535)
    140a:	6d 89       	ldd	r22, Y+21	; 0x15
    140c:	7e 89       	ldd	r23, Y+22	; 0x16
    140e:	8f 89       	ldd	r24, Y+23	; 0x17
    1410:	98 8d       	ldd	r25, Y+24	; 0x18
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	3f ef       	ldi	r19, 0xFF	; 255
    1416:	4f e7       	ldi	r20, 0x7F	; 127
    1418:	57 e4       	ldi	r21, 0x47	; 71
    141a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    141e:	18 16       	cp	r1, r24
    1420:	4c f5       	brge	.+82     	; 0x1474 <system_errorMessage+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1422:	69 8d       	ldd	r22, Y+25	; 0x19
    1424:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1426:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1428:	9c 8d       	ldd	r25, Y+28	; 0x1c
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e2       	ldi	r20, 0x20	; 32
    1430:	51 e4       	ldi	r21, 0x41	; 65
    1432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	9c 8b       	std	Y+20, r25	; 0x14
    1448:	8b 8b       	std	Y+19, r24	; 0x13
    144a:	0f c0       	rjmp	.+30     	; 0x146a <system_errorMessage+0x2a6>
    144c:	89 e1       	ldi	r24, 0x19	; 25
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	9a 8b       	std	Y+18, r25	; 0x12
    1452:	89 8b       	std	Y+17, r24	; 0x11
    1454:	89 89       	ldd	r24, Y+17	; 0x11
    1456:	9a 89       	ldd	r25, Y+18	; 0x12
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <system_errorMessage+0x294>
    145c:	9a 8b       	std	Y+18, r25	; 0x12
    145e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1460:	8b 89       	ldd	r24, Y+19	; 0x13
    1462:	9c 89       	ldd	r25, Y+20	; 0x14
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	9c 8b       	std	Y+20, r25	; 0x14
    1468:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146a:	8b 89       	ldd	r24, Y+19	; 0x13
    146c:	9c 89       	ldd	r25, Y+20	; 0x14
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	69 f7       	brne	.-38     	; 0x144c <system_errorMessage+0x288>
    1472:	14 c0       	rjmp	.+40     	; 0x149c <system_errorMessage+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1474:	6d 89       	ldd	r22, Y+21	; 0x15
    1476:	7e 89       	ldd	r23, Y+22	; 0x16
    1478:	8f 89       	ldd	r24, Y+23	; 0x17
    147a:	98 8d       	ldd	r25, Y+24	; 0x18
    147c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	9c 8b       	std	Y+20, r25	; 0x14
    1486:	8b 8b       	std	Y+19, r24	; 0x13
    1488:	8b 89       	ldd	r24, Y+19	; 0x13
    148a:	9c 89       	ldd	r25, Y+20	; 0x14
    148c:	98 8b       	std	Y+16, r25	; 0x10
    148e:	8f 87       	std	Y+15, r24	; 0x0f
    1490:	8f 85       	ldd	r24, Y+15	; 0x0f
    1492:	98 89       	ldd	r25, Y+16	; 0x10
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <system_errorMessage+0x2d0>
    1498:	98 8b       	std	Y+16, r25	; 0x10
    149a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	LCD_sendCommand(0x08);
    149c:	88 e0       	ldi	r24, 0x08	; 8
    149e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_sendCommand>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	aa ef       	ldi	r26, 0xFA	; 250
    14a8:	b3 e4       	ldi	r27, 0x43	; 67
    14aa:	8b 87       	std	Y+11, r24	; 0x0b
    14ac:	9c 87       	std	Y+12, r25	; 0x0c
    14ae:	ad 87       	std	Y+13, r26	; 0x0d
    14b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	4a e7       	ldi	r20, 0x7A	; 122
    14c0:	53 e4       	ldi	r21, 0x43	; 67
    14c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	8f 83       	std	Y+7, r24	; 0x07
    14cc:	98 87       	std	Y+8, r25	; 0x08
    14ce:	a9 87       	std	Y+9, r26	; 0x09
    14d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14d2:	6f 81       	ldd	r22, Y+7	; 0x07
    14d4:	78 85       	ldd	r23, Y+8	; 0x08
    14d6:	89 85       	ldd	r24, Y+9	; 0x09
    14d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e8       	ldi	r20, 0x80	; 128
    14e0:	5f e3       	ldi	r21, 0x3F	; 63
    14e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e6:	88 23       	and	r24, r24
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <system_errorMessage+0x330>
		__ticks = 1;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	9e 83       	std	Y+6, r25	; 0x06
    14f0:	8d 83       	std	Y+5, r24	; 0x05
    14f2:	3f c0       	rjmp	.+126    	; 0x1572 <system_errorMessage+0x3ae>
	else if (__tmp > 65535)
    14f4:	6f 81       	ldd	r22, Y+7	; 0x07
    14f6:	78 85       	ldd	r23, Y+8	; 0x08
    14f8:	89 85       	ldd	r24, Y+9	; 0x09
    14fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	3f ef       	ldi	r19, 0xFF	; 255
    1500:	4f e7       	ldi	r20, 0x7F	; 127
    1502:	57 e4       	ldi	r21, 0x47	; 71
    1504:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1508:	18 16       	cp	r1, r24
    150a:	4c f5       	brge	.+82     	; 0x155e <system_errorMessage+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150c:	6b 85       	ldd	r22, Y+11	; 0x0b
    150e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1510:	8d 85       	ldd	r24, Y+13	; 0x0d
    1512:	9e 85       	ldd	r25, Y+14	; 0x0e
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e2       	ldi	r20, 0x20	; 32
    151a:	51 e4       	ldi	r21, 0x41	; 65
    151c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	9e 83       	std	Y+6, r25	; 0x06
    1532:	8d 83       	std	Y+5, r24	; 0x05
    1534:	0f c0       	rjmp	.+30     	; 0x1554 <system_errorMessage+0x390>
    1536:	89 e1       	ldi	r24, 0x19	; 25
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	9c 83       	std	Y+4, r25	; 0x04
    153c:	8b 83       	std	Y+3, r24	; 0x03
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	9c 81       	ldd	r25, Y+4	; 0x04
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <system_errorMessage+0x37e>
    1546:	9c 83       	std	Y+4, r25	; 0x04
    1548:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154a:	8d 81       	ldd	r24, Y+5	; 0x05
    154c:	9e 81       	ldd	r25, Y+6	; 0x06
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	9e 83       	std	Y+6, r25	; 0x06
    1552:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1554:	8d 81       	ldd	r24, Y+5	; 0x05
    1556:	9e 81       	ldd	r25, Y+6	; 0x06
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	69 f7       	brne	.-38     	; 0x1536 <system_errorMessage+0x372>
    155c:	14 c0       	rjmp	.+40     	; 0x1586 <system_errorMessage+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155e:	6f 81       	ldd	r22, Y+7	; 0x07
    1560:	78 85       	ldd	r23, Y+8	; 0x08
    1562:	89 85       	ldd	r24, Y+9	; 0x09
    1564:	9a 85       	ldd	r25, Y+10	; 0x0a
    1566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	9e 83       	std	Y+6, r25	; 0x06
    1570:	8d 83       	std	Y+5, r24	; 0x05
    1572:	8d 81       	ldd	r24, Y+5	; 0x05
    1574:	9e 81       	ldd	r25, Y+6	; 0x06
    1576:	9a 83       	std	Y+2, r25	; 0x02
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	9a 81       	ldd	r25, Y+2	; 0x02
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <system_errorMessage+0x3ba>
    1582:	9a 83       	std	Y+2, r25	; 0x02
    1584:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_sendCommand(0x0C);
    1586:	8c e0       	ldi	r24, 0x0C	; 12
    1588:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_sendCommand>

	LCD_clearScreen();
    158c:	0e 94 34 14 	call	0x2868	; 0x2868 <LCD_clearScreen>
}
    1590:	e8 96       	adiw	r28, 0x38	; 56
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <system_confirmSavePW>:

void system_confirmSavePW (void)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	2e 97       	sbiw	r28, 0x0e	; 14
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    15b6:	0e 94 34 14 	call	0x2868	; 0x2868 <LCD_clearScreen>
	LCD_displayString("Your Password is");
    15ba:	8a eb       	ldi	r24, 0xBA	; 186
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"Saved");
    15c2:	2b ec       	ldi	r18, 0xCB	; 203
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	a9 01       	movw	r20, r18
    15cc:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <LCD_displayStringRowColumn>
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	aa e7       	ldi	r26, 0x7A	; 122
    15d6:	b4 e4       	ldi	r27, 0x44	; 68
    15d8:	8b 87       	std	Y+11, r24	; 0x0b
    15da:	9c 87       	std	Y+12, r25	; 0x0c
    15dc:	ad 87       	std	Y+13, r26	; 0x0d
    15de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	4a e7       	ldi	r20, 0x7A	; 122
    15ee:	53 e4       	ldi	r21, 0x43	; 67
    15f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	8f 83       	std	Y+7, r24	; 0x07
    15fa:	98 87       	std	Y+8, r25	; 0x08
    15fc:	a9 87       	std	Y+9, r26	; 0x09
    15fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1600:	6f 81       	ldd	r22, Y+7	; 0x07
    1602:	78 85       	ldd	r23, Y+8	; 0x08
    1604:	89 85       	ldd	r24, Y+9	; 0x09
    1606:	9a 85       	ldd	r25, Y+10	; 0x0a
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e8       	ldi	r20, 0x80	; 128
    160e:	5f e3       	ldi	r21, 0x3F	; 63
    1610:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1614:	88 23       	and	r24, r24
    1616:	2c f4       	brge	.+10     	; 0x1622 <system_confirmSavePW+0x80>
		__ticks = 1;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	9e 83       	std	Y+6, r25	; 0x06
    161e:	8d 83       	std	Y+5, r24	; 0x05
    1620:	3f c0       	rjmp	.+126    	; 0x16a0 <system_confirmSavePW+0xfe>
	else if (__tmp > 65535)
    1622:	6f 81       	ldd	r22, Y+7	; 0x07
    1624:	78 85       	ldd	r23, Y+8	; 0x08
    1626:	89 85       	ldd	r24, Y+9	; 0x09
    1628:	9a 85       	ldd	r25, Y+10	; 0x0a
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	3f ef       	ldi	r19, 0xFF	; 255
    162e:	4f e7       	ldi	r20, 0x7F	; 127
    1630:	57 e4       	ldi	r21, 0x47	; 71
    1632:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1636:	18 16       	cp	r1, r24
    1638:	4c f5       	brge	.+82     	; 0x168c <system_confirmSavePW+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163a:	6b 85       	ldd	r22, Y+11	; 0x0b
    163c:	7c 85       	ldd	r23, Y+12	; 0x0c
    163e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1640:	9e 85       	ldd	r25, Y+14	; 0x0e
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	40 e2       	ldi	r20, 0x20	; 32
    1648:	51 e4       	ldi	r21, 0x41	; 65
    164a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	bc 01       	movw	r22, r24
    1654:	cd 01       	movw	r24, r26
    1656:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	9e 83       	std	Y+6, r25	; 0x06
    1660:	8d 83       	std	Y+5, r24	; 0x05
    1662:	0f c0       	rjmp	.+30     	; 0x1682 <system_confirmSavePW+0xe0>
    1664:	89 e1       	ldi	r24, 0x19	; 25
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	9c 83       	std	Y+4, r25	; 0x04
    166a:	8b 83       	std	Y+3, r24	; 0x03
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	9c 81       	ldd	r25, Y+4	; 0x04
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	f1 f7       	brne	.-4      	; 0x1670 <system_confirmSavePW+0xce>
    1674:	9c 83       	std	Y+4, r25	; 0x04
    1676:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1678:	8d 81       	ldd	r24, Y+5	; 0x05
    167a:	9e 81       	ldd	r25, Y+6	; 0x06
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	9e 83       	std	Y+6, r25	; 0x06
    1680:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1682:	8d 81       	ldd	r24, Y+5	; 0x05
    1684:	9e 81       	ldd	r25, Y+6	; 0x06
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	69 f7       	brne	.-38     	; 0x1664 <system_confirmSavePW+0xc2>
    168a:	14 c0       	rjmp	.+40     	; 0x16b4 <system_confirmSavePW+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168c:	6f 81       	ldd	r22, Y+7	; 0x07
    168e:	78 85       	ldd	r23, Y+8	; 0x08
    1690:	89 85       	ldd	r24, Y+9	; 0x09
    1692:	9a 85       	ldd	r25, Y+10	; 0x0a
    1694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	9e 83       	std	Y+6, r25	; 0x06
    169e:	8d 83       	std	Y+5, r24	; 0x05
    16a0:	8d 81       	ldd	r24, Y+5	; 0x05
    16a2:	9e 81       	ldd	r25, Y+6	; 0x06
    16a4:	9a 83       	std	Y+2, r25	; 0x02
    16a6:	89 83       	std	Y+1, r24	; 0x01
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	9a 81       	ldd	r25, Y+2	; 0x02
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	f1 f7       	brne	.-4      	; 0x16ac <system_confirmSavePW+0x10a>
    16b0:	9a 83       	std	Y+2, r25	; 0x02
    16b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

	LCD_clearScreen();
    16b4:	0e 94 34 14 	call	0x2868	; 0x2868 <LCD_clearScreen>
}
    16b8:	2e 96       	adiw	r28, 0x0e	; 14
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <userChooseOption>:
 /*
  * Description: get the user option and return it to the calling function also send it
  * to the second microcontroller.
  */
STATE userChooseOption (void)
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <userChooseOption+0x6>
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
	uint8 userInput ;

	userInput =  KeyPad_getPressedKey();
    16d4:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <KeyPad_getPressedKey>
    16d8:	89 83       	std	Y+1, r24	; 0x01

	if(userInput == '+')
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	8b 32       	cpi	r24, 0x2B	; 43
    16de:	49 f4       	brne	.+18     	; 0x16f2 <userChooseOption+0x28>
	{
		UART_sendByte(READY);
    16e0:	8a e0       	ldi	r24, 0x0A	; 10
    16e2:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <UART_sendByte>
		UART_sendByte(CHG_PW);
    16e6:	83 e0       	ldi	r24, 0x03	; 3
    16e8:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <UART_sendByte>
		return CHG_PW ;
    16ec:	83 e0       	ldi	r24, 0x03	; 3
    16ee:	8a 83       	std	Y+2, r24	; 0x02
    16f0:	0e c0       	rjmp	.+28     	; 0x170e <userChooseOption+0x44>
	}
	else if(userInput == '-')
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	8d 32       	cpi	r24, 0x2D	; 45
    16f6:	49 f4       	brne	.+18     	; 0x170a <userChooseOption+0x40>
	{
		UART_sendByte(READY);
    16f8:	8a e0       	ldi	r24, 0x0A	; 10
    16fa:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <UART_sendByte>
		UART_sendByte(O_DOOR);
    16fe:	84 e0       	ldi	r24, 0x04	; 4
    1700:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <UART_sendByte>
		return  O_DOOR ;
    1704:	84 e0       	ldi	r24, 0x04	; 4
    1706:	8a 83       	std	Y+2, r24	; 0x02
    1708:	02 c0       	rjmp	.+4      	; 0x170e <userChooseOption+0x44>
	}

	return ERROR;
    170a:	85 e0       	ldi	r24, 0x05	; 5
    170c:	8a 83       	std	Y+2, r24	; 0x02
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <systemConfirmOpenClose>:

void systemConfirmOpenClose(void)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1722:	0e 94 34 14 	call	0x2868	; 0x2868 <LCD_clearScreen>
	LCD_displayString("DOOR is OPEN");
    1726:	81 ed       	ldi	r24, 0xD1	; 209
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_displayString>
	while(open_flag == 0);
    172e:	80 91 fc 00 	lds	r24, 0x00FC
    1732:	88 23       	and	r24, r24
    1734:	e1 f3       	breq	.-8      	; 0x172e <systemConfirmOpenClose+0x14>
	systemClose();
    1736:	0e 94 a0 0b 	call	0x1740	; 0x1740 <systemClose>
}
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <systemClose>:

void systemClose (void)
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1748:	0e 94 34 14 	call	0x2868	; 0x2868 <LCD_clearScreen>
	LCD_displayString("DOOR is OPEN");
    174c:	81 ed       	ldi	r24, 0xD1	; 209
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_displayString>
	while(close_flag == 0);
    1754:	80 91 fd 00 	lds	r24, 0x00FD
    1758:	88 23       	and	r24, r24
    175a:	e1 f3       	breq	.-8      	; 0x1754 <systemClose+0x14>
	timer1_deinit();
    175c:	0e 94 ed 15 	call	0x2bda	; 0x2bda <timer1_deinit>
}
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <userEnterPW>:

CHECK userEnterPW(void)
{
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	28 97       	sbiw	r28, 0x08	; 8
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    177e:	0e 94 34 14 	call	0x2868	; 0x2868 <LCD_clearScreen>
	LCD_displayString("Enter Password: ");
    1782:	8e ed       	ldi	r24, 0xDE	; 222
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_displayString>
	LCD_goToRowColumn(1,0);
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	0e 94 b6 13 	call	0x276c	; 0x276c <LCD_goToRowColumn>

	uint8 i;
	uint8 password[pass_length +2];
	for(i=0 ; i<pass_length ; i++)
    1792:	19 82       	std	Y+1, r1	; 0x01
    1794:	16 c0       	rjmp	.+44     	; 0x17c2 <userEnterPW+0x5c>
	{
		password[i] = KeyPad_getPressedKey();
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	08 2f       	mov	r16, r24
    179a:	10 e0       	ldi	r17, 0x00	; 0
    179c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <KeyPad_getPressedKey>
    17a0:	28 2f       	mov	r18, r24
    17a2:	ce 01       	movw	r24, r28
    17a4:	02 96       	adiw	r24, 0x02	; 2
    17a6:	fc 01       	movw	r30, r24
    17a8:	e0 0f       	add	r30, r16
    17aa:	f1 1f       	adc	r31, r17
    17ac:	20 83       	st	Z, r18
		LCD_goToRowColumn(1,i);
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	69 81       	ldd	r22, Y+1	; 0x01
    17b2:	0e 94 b6 13 	call	0x276c	; 0x276c <LCD_goToRowColumn>
		LCD_displayCharacter('*');
    17b6:	8a e2       	ldi	r24, 0x2A	; 42
    17b8:	0e 94 91 11 	call	0x2322	; 0x2322 <LCD_displayCharacter>
	LCD_displayString("Enter Password: ");
	LCD_goToRowColumn(1,0);

	uint8 i;
	uint8 password[pass_length +2];
	for(i=0 ; i<pass_length ; i++)
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	8f 5f       	subi	r24, 0xFF	; 255
    17c0:	89 83       	std	Y+1, r24	; 0x01
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	85 30       	cpi	r24, 0x05	; 5
    17c6:	38 f3       	brcs	.-50     	; 0x1796 <userEnterPW+0x30>
		password[i] = KeyPad_getPressedKey();
		LCD_goToRowColumn(1,i);
		LCD_displayCharacter('*');
	}

	password[i] = '#';
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	ce 01       	movw	r24, r28
    17d0:	02 96       	adiw	r24, 0x02	; 2
    17d2:	fc 01       	movw	r30, r24
    17d4:	e2 0f       	add	r30, r18
    17d6:	f3 1f       	adc	r31, r19
    17d8:	83 e2       	ldi	r24, 0x23	; 35
    17da:	80 83       	st	Z, r24
	i++;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	8f 5f       	subi	r24, 0xFF	; 255
    17e0:	89 83       	std	Y+1, r24	; 0x01

	password[i] ='\0';
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	ce 01       	movw	r24, r28
    17ea:	02 96       	adiw	r24, 0x02	; 2
    17ec:	fc 01       	movw	r30, r24
    17ee:	e2 0f       	add	r30, r18
    17f0:	f3 1f       	adc	r31, r19
    17f2:	10 82       	st	Z, r1

	do{
		UART_sendByte(READY);
    17f4:	8a e0       	ldi	r24, 0x0A	; 10
    17f6:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <UART_sendByte>
	}while( UART_receiveByte() != READY);
    17fa:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <UART_receiveByte>
    17fe:	8a 30       	cpi	r24, 0x0A	; 10
    1800:	c9 f7       	brne	.-14     	; 0x17f4 <userEnterPW+0x8e>

	UART_sendString(password);
    1802:	ce 01       	movw	r24, r28
    1804:	02 96       	adiw	r24, 0x02	; 2
    1806:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <UART_sendString>

	while(UART_receiveByte() != READY);
    180a:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <UART_receiveByte>
    180e:	8a 30       	cpi	r24, 0x0A	; 10
    1810:	e1 f7       	brne	.-8      	; 0x180a <userEnterPW+0xa4>

	return (UART_receiveByte());
    1812:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <UART_receiveByte>
}
    1816:	28 96       	adiw	r28, 0x08	; 8
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	08 95       	ret

0000182c <__vector_5>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    182c:	1f 92       	push	r1
    182e:	0f 92       	push	r0
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	0f 92       	push	r0
    1834:	11 24       	eor	r1, r1
    1836:	2f 93       	push	r18
    1838:	3f 93       	push	r19
    183a:	4f 93       	push	r20
    183c:	5f 93       	push	r21
    183e:	6f 93       	push	r22
    1840:	7f 93       	push	r23
    1842:	8f 93       	push	r24
    1844:	9f 93       	push	r25
    1846:	af 93       	push	r26
    1848:	bf 93       	push	r27
    184a:	ef 93       	push	r30
    184c:	ff 93       	push	r31
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1856:	80 91 ff 00 	lds	r24, 0x00FF
    185a:	90 91 00 01 	lds	r25, 0x0100
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	29 f0       	breq	.+10     	; 0x186c <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1862:	e0 91 ff 00 	lds	r30, 0x00FF
    1866:	f0 91 00 01 	lds	r31, 0x0100
    186a:	09 95       	icall
	}
}
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	ff 91       	pop	r31
    1872:	ef 91       	pop	r30
    1874:	bf 91       	pop	r27
    1876:	af 91       	pop	r26
    1878:	9f 91       	pop	r25
    187a:	8f 91       	pop	r24
    187c:	7f 91       	pop	r23
    187e:	6f 91       	pop	r22
    1880:	5f 91       	pop	r21
    1882:	4f 91       	pop	r20
    1884:	3f 91       	pop	r19
    1886:	2f 91       	pop	r18
    1888:	0f 90       	pop	r0
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	0f 90       	pop	r0
    188e:	1f 90       	pop	r1
    1890:	18 95       	reti

00001892 <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	00 d0       	rcall	.+0      	; 0x1898 <Icu_init+0x6>
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	9a 83       	std	Y+2, r25	; 0x02
    189e:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    18a0:	a1 e3       	ldi	r26, 0x31	; 49
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e1 e3       	ldi	r30, 0x31	; 49
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	8f 7b       	andi	r24, 0xBF	; 191
    18ac:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    18ae:	ef e4       	ldi	r30, 0x4F	; 79
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	8c e0       	ldi	r24, 0x0C	; 12
    18b4:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    18b6:	ae e4       	ldi	r26, 0x4E	; 78
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	ee e4       	ldi	r30, 0x4E	; 78
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	98 2f       	mov	r25, r24
    18c2:	98 7f       	andi	r25, 0xF8	; 248
    18c4:	e9 81       	ldd	r30, Y+1	; 0x01
    18c6:	fa 81       	ldd	r31, Y+2	; 0x02
    18c8:	80 81       	ld	r24, Z
    18ca:	89 2b       	or	r24, r25
    18cc:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    18ce:	ae e4       	ldi	r26, 0x4E	; 78
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	ee e4       	ldi	r30, 0x4E	; 78
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	28 2f       	mov	r18, r24
    18da:	2f 7b       	andi	r18, 0xBF	; 191
    18dc:	e9 81       	ldd	r30, Y+1	; 0x01
    18de:	fa 81       	ldd	r31, Y+2	; 0x02
    18e0:	81 81       	ldd	r24, Z+1	; 0x01
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	00 24       	eor	r0, r0
    18e8:	96 95       	lsr	r25
    18ea:	87 95       	ror	r24
    18ec:	07 94       	ror	r0
    18ee:	96 95       	lsr	r25
    18f0:	87 95       	ror	r24
    18f2:	07 94       	ror	r0
    18f4:	98 2f       	mov	r25, r24
    18f6:	80 2d       	mov	r24, r0
    18f8:	82 2b       	or	r24, r18
    18fa:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    18fc:	ec e4       	ldi	r30, 0x4C	; 76
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	11 82       	std	Z+1, r1	; 0x01
    1902:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    1904:	e6 e4       	ldi	r30, 0x46	; 70
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	11 82       	std	Z+1, r1	; 0x01
    190a:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    190c:	a9 e5       	ldi	r26, 0x59	; 89
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e9 e5       	ldi	r30, 0x59	; 89
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	80 62       	ori	r24, 0x20	; 32
    1918:	8c 93       	st	X, r24
}
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	00 d0       	rcall	.+0      	; 0x192a <Icu_setCallBack+0x6>
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	9a 83       	std	Y+2, r25	; 0x02
    1930:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	9a 81       	ldd	r25, Y+2	; 0x02
    1936:	90 93 00 01 	sts	0x0100, r25
    193a:	80 93 ff 00 	sts	0x00FF, r24
}
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <Icu_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	0f 92       	push	r0
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1954:	ae e4       	ldi	r26, 0x4E	; 78
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	ee e4       	ldi	r30, 0x4E	; 78
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	28 2f       	mov	r18, r24
    1960:	2f 7b       	andi	r18, 0xBF	; 191
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	00 24       	eor	r0, r0
    196a:	96 95       	lsr	r25
    196c:	87 95       	ror	r24
    196e:	07 94       	ror	r0
    1970:	96 95       	lsr	r25
    1972:	87 95       	ror	r24
    1974:	07 94       	ror	r0
    1976:	98 2f       	mov	r25, r24
    1978:	80 2d       	mov	r24, r0
    197a:	82 2b       	or	r24, r18
    197c:	8c 93       	st	X, r24
}
    197e:	0f 90       	pop	r0
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <Icu_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 Icu_getInputCaptureValue(void)
{
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    198e:	e6 e4       	ldi	r30, 0x46	; 70
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	91 81       	ldd	r25, Z+1	; 0x01
}
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <Icu_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_clearTimerValue(void)
{
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    19a4:	ec e4       	ldi	r30, 0x4C	; 76
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	11 82       	std	Z+1, r1	; 0x01
    19aa:	10 82       	st	Z, r1
}
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <Icu_DeInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void Icu_DeInit(void)
{
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    19ba:	ef e4       	ldi	r30, 0x4F	; 79
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	10 82       	st	Z, r1
	TCCR1B = 0;
    19c0:	ee e4       	ldi	r30, 0x4E	; 78
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	10 82       	st	Z, r1
	TCNT1 = 0;
    19c6:	ec e4       	ldi	r30, 0x4C	; 76
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	11 82       	std	Z+1, r1	; 0x01
    19cc:	10 82       	st	Z, r1
	ICR1 = 0;
    19ce:	e6 e4       	ldi	r30, 0x46	; 70
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	11 82       	std	Z+1, r1	; 0x01
    19d4:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    19d6:	a9 e5       	ldi	r26, 0x59	; 89
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e9 e5       	ldi	r30, 0x59	; 89
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	8f 7d       	andi	r24, 0xDF	; 223
    19e2:	8c 93       	st	X, r24
}
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <main>:

#include "applicationMCU1.h"


int main(void)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	a7 97       	sbiw	r28, 0x27	; 39
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	de bf       	out	0x3e, r29	; 62
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	cd bf       	out	0x3d, r28	; 61
	STATE state = INITIAL;
    19fe:	82 e0       	ldi	r24, 0x02	; 2
    1a00:	8f 8f       	std	Y+31, r24	; 0x1f
	CHECK check = UNMATCHED;
    1a02:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 NumOfTry = 0;
    1a04:	1d 8e       	std	Y+29, r1	; 0x1d

	timer_config timer1_config = {0,F_CPU_CLOCK_1024}; // overflow after 67s
    1a06:	ce 01       	movw	r24, r28
    1a08:	80 96       	adiw	r24, 0x20	; 32
    1a0a:	9c a3       	std	Y+36, r25	; 0x24
    1a0c:	8b a3       	std	Y+35, r24	; 0x23
    1a0e:	e7 ef       	ldi	r30, 0xF7	; 247
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	fe a3       	std	Y+38, r31	; 0x26
    1a14:	ed a3       	std	Y+37, r30	; 0x25
    1a16:	f3 e0       	ldi	r31, 0x03	; 3
    1a18:	ff a3       	std	Y+39, r31	; 0x27
    1a1a:	ed a1       	ldd	r30, Y+37	; 0x25
    1a1c:	fe a1       	ldd	r31, Y+38	; 0x26
    1a1e:	00 80       	ld	r0, Z
    1a20:	8d a1       	ldd	r24, Y+37	; 0x25
    1a22:	9e a1       	ldd	r25, Y+38	; 0x26
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	9e a3       	std	Y+38, r25	; 0x26
    1a28:	8d a3       	std	Y+37, r24	; 0x25
    1a2a:	eb a1       	ldd	r30, Y+35	; 0x23
    1a2c:	fc a1       	ldd	r31, Y+36	; 0x24
    1a2e:	00 82       	st	Z, r0
    1a30:	8b a1       	ldd	r24, Y+35	; 0x23
    1a32:	9c a1       	ldd	r25, Y+36	; 0x24
    1a34:	01 96       	adiw	r24, 0x01	; 1
    1a36:	9c a3       	std	Y+36, r25	; 0x24
    1a38:	8b a3       	std	Y+35, r24	; 0x23
    1a3a:	9f a1       	ldd	r25, Y+39	; 0x27
    1a3c:	91 50       	subi	r25, 0x01	; 1
    1a3e:	9f a3       	std	Y+39, r25	; 0x27
    1a40:	ef a1       	ldd	r30, Y+39	; 0x27
    1a42:	ee 23       	and	r30, r30
    1a44:	51 f7       	brne	.-44     	; 0x1a1a <main+0x30>

	modules_init();
    1a46:	0e 94 2a 06 	call	0xc54	; 0xc54 <modules_init>
    1a4a:	0c c0       	rjmp	.+24     	; 0x1a64 <main+0x7a>

	while(1)
	{
		while(check == UNMATCHED && state == INITIAL)
		{
			user_setPW();
    1a4c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <user_setPW>
			user_confirmPW();
    1a50:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <user_confirmPW>
			check = System_checkMatching();
    1a54:	0e 94 c5 08 	call	0x118a	; 0x118a <System_checkMatching>
    1a58:	8e 8f       	std	Y+30, r24	; 0x1e
			if(check == MATCHED)
    1a5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a5c:	81 30       	cpi	r24, 0x01	; 1
    1a5e:	11 f4       	brne	.+4      	; 0x1a64 <main+0x7a>
			{
				system_confirmSavePW();
    1a60:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <system_confirmSavePW>



	while(1)
	{
		while(check == UNMATCHED && state == INITIAL)
    1a64:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a66:	88 23       	and	r24, r24
    1a68:	19 f4       	brne	.+6      	; 0x1a70 <main+0x86>
    1a6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a6c:	82 30       	cpi	r24, 0x02	; 2
    1a6e:	71 f3       	breq	.-36     	; 0x1a4c <main+0x62>
			{
				system_confirmSavePW();
			}
		}

		system_mainMenu();
    1a70:	0e 94 ae 08 	call	0x115c	; 0x115c <system_mainMenu>

		state = userChooseOption(); // get the option from user and send it to the MCU
    1a74:	0e 94 65 0b 	call	0x16ca	; 0x16ca <userChooseOption>
    1a78:	8f 8f       	std	Y+31, r24	; 0x1f

		if(state == CHG_PW)
    1a7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a7c:	83 30       	cpi	r24, 0x03	; 3
    1a7e:	09 f0       	breq	.+2      	; 0x1a82 <main+0x98>
    1a80:	9f c0       	rjmp	.+318    	; 0x1bc0 <main+0x1d6>
		{
			check = UNMATCHED;
    1a82:	1e 8e       	std	Y+30, r1	; 0x1e
    1a84:	09 c0       	rjmp	.+18     	; 0x1a98 <main+0xae>

			while(check == UNMATCHED && NumOfTry == MAX_TRY)
			{
				check = userEnterPW();
    1a86:	0e 94 b3 0b 	call	0x1766	; 0x1766 <userEnterPW>
    1a8a:	8e 8f       	std	Y+30, r24	; 0x1e
				if( check == UNMATCHED)
    1a8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a8e:	88 23       	and	r24, r24
    1a90:	19 f4       	brne	.+6      	; 0x1a98 <main+0xae>
				{
					NumOfTry ++;
    1a92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a94:	8f 5f       	subi	r24, 0xFF	; 255
    1a96:	8d 8f       	std	Y+29, r24	; 0x1d

		if(state == CHG_PW)
		{
			check = UNMATCHED;

			while(check == UNMATCHED && NumOfTry == MAX_TRY)
    1a98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a9a:	88 23       	and	r24, r24
    1a9c:	19 f4       	brne	.+6      	; 0x1aa4 <main+0xba>
    1a9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aa0:	83 30       	cpi	r24, 0x03	; 3
    1aa2:	89 f3       	breq	.-30     	; 0x1a86 <main+0x9c>
				{
					NumOfTry ++;
				}
			}

			if(NumOfTry != MAX_TRY)
    1aa4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aa6:	83 30       	cpi	r24, 0x03	; 3
    1aa8:	99 f0       	breq	.+38     	; 0x1ad0 <main+0xe6>
			{
				NumOfTry = 0;
    1aaa:	1d 8e       	std	Y+29, r1	; 0x1d
				check = UNMATCHED ;
    1aac:	1e 8e       	std	Y+30, r1	; 0x1e
    1aae:	0c c0       	rjmp	.+24     	; 0x1ac8 <main+0xde>

				while( check == UNMATCHED )
				{

					user_setPW();
    1ab0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <user_setPW>
					user_confirmPW();
    1ab4:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <user_confirmPW>
					check = System_checkMatching();
    1ab8:	0e 94 c5 08 	call	0x118a	; 0x118a <System_checkMatching>
    1abc:	8e 8f       	std	Y+30, r24	; 0x1e
					if(check == MATCHED)
    1abe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ac0:	81 30       	cpi	r24, 0x01	; 1
    1ac2:	11 f4       	brne	.+4      	; 0x1ac8 <main+0xde>
					{
						system_confirmSavePW();
    1ac4:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <system_confirmSavePW>
			if(NumOfTry != MAX_TRY)
			{
				NumOfTry = 0;
				check = UNMATCHED ;

				while( check == UNMATCHED )
    1ac8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1aca:	88 23       	and	r24, r24
    1acc:	89 f3       	breq	.-30     	; 0x1ab0 <main+0xc6>
    1ace:	ca cf       	rjmp	.-108    	; 0x1a64 <main+0x7a>
					{
						system_confirmSavePW();
					}
				}
			}
			else if(NumOfTry == MAX_TRY)
    1ad0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ad2:	83 30       	cpi	r24, 0x03	; 3
    1ad4:	39 f6       	brne	.-114    	; 0x1a64 <main+0x7a>
			{
				system_errorMessage ();
    1ad6:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <system_errorMessage>
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	90 e4       	ldi	r25, 0x40	; 64
    1ade:	ac e9       	ldi	r26, 0x9C	; 156
    1ae0:	b5 e4       	ldi	r27, 0x45	; 69
    1ae2:	89 8f       	std	Y+25, r24	; 0x19
    1ae4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ae6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ae8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aea:	69 8d       	ldd	r22, Y+25	; 0x19
    1aec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	4a e7       	ldi	r20, 0x7A	; 122
    1af8:	53 e4       	ldi	r21, 0x43	; 67
    1afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	8d 8b       	std	Y+21, r24	; 0x15
    1b04:	9e 8b       	std	Y+22, r25	; 0x16
    1b06:	af 8b       	std	Y+23, r26	; 0x17
    1b08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b10:	98 8d       	ldd	r25, Y+24	; 0x18
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e8       	ldi	r20, 0x80	; 128
    1b18:	5f e3       	ldi	r21, 0x3F	; 63
    1b1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b1e:	88 23       	and	r24, r24
    1b20:	2c f4       	brge	.+10     	; 0x1b2c <main+0x142>
		__ticks = 1;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	9c 8b       	std	Y+20, r25	; 0x14
    1b28:	8b 8b       	std	Y+19, r24	; 0x13
    1b2a:	3f c0       	rjmp	.+126    	; 0x1baa <main+0x1c0>
	else if (__tmp > 65535)
    1b2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b30:	8f 89       	ldd	r24, Y+23	; 0x17
    1b32:	98 8d       	ldd	r25, Y+24	; 0x18
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	3f ef       	ldi	r19, 0xFF	; 255
    1b38:	4f e7       	ldi	r20, 0x7F	; 127
    1b3a:	57 e4       	ldi	r21, 0x47	; 71
    1b3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b40:	18 16       	cp	r1, r24
    1b42:	4c f5       	brge	.+82     	; 0x1b96 <main+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b44:	69 8d       	ldd	r22, Y+25	; 0x19
    1b46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e2       	ldi	r20, 0x20	; 32
    1b52:	51 e4       	ldi	r21, 0x41	; 65
    1b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	bc 01       	movw	r22, r24
    1b5e:	cd 01       	movw	r24, r26
    1b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	9c 8b       	std	Y+20, r25	; 0x14
    1b6a:	8b 8b       	std	Y+19, r24	; 0x13
    1b6c:	0f c0       	rjmp	.+30     	; 0x1b8c <main+0x1a2>
    1b6e:	89 e1       	ldi	r24, 0x19	; 25
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	9a 8b       	std	Y+18, r25	; 0x12
    1b74:	89 8b       	std	Y+17, r24	; 0x11
    1b76:	89 89       	ldd	r24, Y+17	; 0x11
    1b78:	9a 89       	ldd	r25, Y+18	; 0x12
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <main+0x190>
    1b7e:	9a 8b       	std	Y+18, r25	; 0x12
    1b80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b82:	8b 89       	ldd	r24, Y+19	; 0x13
    1b84:	9c 89       	ldd	r25, Y+20	; 0x14
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	9c 8b       	std	Y+20, r25	; 0x14
    1b8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b90:	00 97       	sbiw	r24, 0x00	; 0
    1b92:	69 f7       	brne	.-38     	; 0x1b6e <main+0x184>
    1b94:	67 cf       	rjmp	.-306    	; 0x1a64 <main+0x7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b96:	6d 89       	ldd	r22, Y+21	; 0x15
    1b98:	7e 89       	ldd	r23, Y+22	; 0x16
    1b9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	9c 8b       	std	Y+20, r25	; 0x14
    1ba8:	8b 8b       	std	Y+19, r24	; 0x13
    1baa:	8b 89       	ldd	r24, Y+19	; 0x13
    1bac:	9c 89       	ldd	r25, Y+20	; 0x14
    1bae:	98 8b       	std	Y+16, r25	; 0x10
    1bb0:	8f 87       	std	Y+15, r24	; 0x0f
    1bb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb4:	98 89       	ldd	r25, Y+16	; 0x10
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <main+0x1cc>
    1bba:	98 8b       	std	Y+16, r25	; 0x10
    1bbc:	8f 87       	std	Y+15, r24	; 0x0f
    1bbe:	52 cf       	rjmp	.-348    	; 0x1a64 <main+0x7a>
				_delay_ms(5000);
			}
		}
		else if(state == O_DOOR)
    1bc0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bc2:	84 30       	cpi	r24, 0x04	; 4
    1bc4:	09 f0       	breq	.+2      	; 0x1bc8 <main+0x1de>
    1bc6:	95 c0       	rjmp	.+298    	; 0x1cf2 <main+0x308>
		{
			check = UNMATCHED ;
    1bc8:	1e 8e       	std	Y+30, r1	; 0x1e
    1bca:	09 c0       	rjmp	.+18     	; 0x1bde <main+0x1f4>

			while(check == UNMATCHED && NumOfTry == MAX_TRY)
			{
				check = userEnterPW();
    1bcc:	0e 94 b3 0b 	call	0x1766	; 0x1766 <userEnterPW>
    1bd0:	8e 8f       	std	Y+30, r24	; 0x1e
				if( check == UNMATCHED)
    1bd2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bd4:	88 23       	and	r24, r24
    1bd6:	19 f4       	brne	.+6      	; 0x1bde <main+0x1f4>
				{
					NumOfTry ++;
    1bd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bda:	8f 5f       	subi	r24, 0xFF	; 255
    1bdc:	8d 8f       	std	Y+29, r24	; 0x1d
		}
		else if(state == O_DOOR)
		{
			check = UNMATCHED ;

			while(check == UNMATCHED && NumOfTry == MAX_TRY)
    1bde:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1be0:	88 23       	and	r24, r24
    1be2:	19 f4       	brne	.+6      	; 0x1bea <main+0x200>
    1be4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1be6:	83 30       	cpi	r24, 0x03	; 3
    1be8:	89 f3       	breq	.-30     	; 0x1bcc <main+0x1e2>
				{
					NumOfTry ++;
				}
			}

			if (NumOfTry != MAX_TRY)
    1bea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bec:	83 30       	cpi	r24, 0x03	; 3
    1bee:	41 f0       	breq	.+16     	; 0x1c00 <main+0x216>
			{
				NumOfTry = 0;
    1bf0:	1d 8e       	std	Y+29, r1	; 0x1d
				Timer1_setup (&timer1_config);
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	80 96       	adiw	r24, 0x20	; 32
    1bf6:	0e 94 3c 06 	call	0xc78	; 0xc78 <Timer1_setup>
				systemConfirmOpenClose();
    1bfa:	0e 94 8d 0b 	call	0x171a	; 0x171a <systemConfirmOpenClose>
    1bfe:	32 cf       	rjmp	.-412    	; 0x1a64 <main+0x7a>

			}
			else if (NumOfTry == MAX_TRY)
    1c00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c02:	83 30       	cpi	r24, 0x03	; 3
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <main+0x21e>
    1c06:	2e cf       	rjmp	.-420    	; 0x1a64 <main+0x7a>
			{
				system_errorMessage();
    1c08:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <system_errorMessage>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e4       	ldi	r25, 0x40	; 64
    1c10:	ac e9       	ldi	r26, 0x9C	; 156
    1c12:	b5 e4       	ldi	r27, 0x45	; 69
    1c14:	8b 87       	std	Y+11, r24	; 0x0b
    1c16:	9c 87       	std	Y+12, r25	; 0x0c
    1c18:	ad 87       	std	Y+13, r26	; 0x0d
    1c1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	4a e7       	ldi	r20, 0x7A	; 122
    1c2a:	53 e4       	ldi	r21, 0x43	; 67
    1c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	8f 83       	std	Y+7, r24	; 0x07
    1c36:	98 87       	std	Y+8, r25	; 0x08
    1c38:	a9 87       	std	Y+9, r26	; 0x09
    1c3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3e:	78 85       	ldd	r23, Y+8	; 0x08
    1c40:	89 85       	ldd	r24, Y+9	; 0x09
    1c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e8       	ldi	r20, 0x80	; 128
    1c4a:	5f e3       	ldi	r21, 0x3F	; 63
    1c4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c50:	88 23       	and	r24, r24
    1c52:	2c f4       	brge	.+10     	; 0x1c5e <main+0x274>
		__ticks = 1;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	9e 83       	std	Y+6, r25	; 0x06
    1c5a:	8d 83       	std	Y+5, r24	; 0x05
    1c5c:	3f c0       	rjmp	.+126    	; 0x1cdc <main+0x2f2>
	else if (__tmp > 65535)
    1c5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c60:	78 85       	ldd	r23, Y+8	; 0x08
    1c62:	89 85       	ldd	r24, Y+9	; 0x09
    1c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	3f ef       	ldi	r19, 0xFF	; 255
    1c6a:	4f e7       	ldi	r20, 0x7F	; 127
    1c6c:	57 e4       	ldi	r21, 0x47	; 71
    1c6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c72:	18 16       	cp	r1, r24
    1c74:	4c f5       	brge	.+82     	; 0x1cc8 <main+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e2       	ldi	r20, 0x20	; 32
    1c84:	51 e4       	ldi	r21, 0x41	; 65
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	9e 83       	std	Y+6, r25	; 0x06
    1c9c:	8d 83       	std	Y+5, r24	; 0x05
    1c9e:	0f c0       	rjmp	.+30     	; 0x1cbe <main+0x2d4>
    1ca0:	89 e1       	ldi	r24, 0x19	; 25
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9c 83       	std	Y+4, r25	; 0x04
    1ca6:	8b 83       	std	Y+3, r24	; 0x03
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <main+0x2c2>
    1cb0:	9c 83       	std	Y+4, r25	; 0x04
    1cb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	69 f7       	brne	.-38     	; 0x1ca0 <main+0x2b6>
    1cc6:	ce ce       	rjmp	.-612    	; 0x1a64 <main+0x7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cca:	78 85       	ldd	r23, Y+8	; 0x08
    1ccc:	89 85       	ldd	r24, Y+9	; 0x09
    1cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	9e 83       	std	Y+6, r25	; 0x06
    1cda:	8d 83       	std	Y+5, r24	; 0x05
    1cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cde:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce0:	9a 83       	std	Y+2, r25	; 0x02
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <main+0x2fe>
    1cec:	9a 83       	std	Y+2, r25	; 0x02
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	b9 ce       	rjmp	.-654    	; 0x1a64 <main+0x7a>
		}

		else
		{

			system_errorMessage();
    1cf2:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <system_errorMessage>
    1cf6:	b6 ce       	rjmp	.-660    	; 0x1a64 <main+0x7a>

00001cf8 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <KeyPad_getPressedKey+0x6>
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1d02:	1a 82       	std	Y+2, r1	; 0x02
    1d04:	4c c0       	rjmp	.+152    	; 0x1d9e <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1d06:	e4 e3       	ldi	r30, 0x34	; 52
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	80 e1       	ldi	r24, 0x10	; 16
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <KeyPad_getPressedKey+0x22>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	2a 95       	dec	r18
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <KeyPad_getPressedKey+0x1e>
    1d1e:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    1d20:	e5 e3       	ldi	r30, 0x35	; 53
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	80 e1       	ldi	r24, 0x10	; 16
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	02 2e       	mov	r0, r18
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <KeyPad_getPressedKey+0x3e>
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	0a 94       	dec	r0
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <KeyPad_getPressedKey+0x3a>
    1d3a:	80 95       	com	r24
    1d3c:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    1d3e:	19 82       	std	Y+1, r1	; 0x01
    1d40:	28 c0       	rjmp	.+80     	; 0x1d92 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1d42:	e3 e3       	ldi	r30, 0x33	; 51
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	88 2f       	mov	r24, r24
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	a9 01       	movw	r20, r18
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <KeyPad_getPressedKey+0x62>
    1d56:	55 95       	asr	r21
    1d58:	47 95       	ror	r20
    1d5a:	8a 95       	dec	r24
    1d5c:	e2 f7       	brpl	.-8      	; 0x1d56 <KeyPad_getPressedKey+0x5e>
    1d5e:	ca 01       	movw	r24, r20
    1d60:	81 70       	andi	r24, 0x01	; 1
    1d62:	90 70       	andi	r25, 0x00	; 0
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	91 f4       	brne	.+36     	; 0x1d8c <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	88 2f       	mov	r24, r24
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	98 2f       	mov	r25, r24
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	89 0f       	add	r24, r25
    1d7c:	8f 5f       	subi	r24, 0xFF	; 255
    1d7e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	8f 5f       	subi	r24, 0xFF	; 255
    1d90:	89 83       	std	Y+1, r24	; 0x01
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	84 30       	cpi	r24, 0x04	; 4
    1d96:	a8 f2       	brcs	.-86     	; 0x1d42 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	8f 5f       	subi	r24, 0xFF	; 255
    1d9c:	8a 83       	std	Y+2, r24	; 0x02
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	84 30       	cpi	r24, 0x04	; 4
    1da2:	08 f4       	brcc	.+2      	; 0x1da6 <KeyPad_getPressedKey+0xae>
    1da4:	b0 cf       	rjmp	.-160    	; 0x1d06 <KeyPad_getPressedKey+0xe>
    1da6:	ad cf       	rjmp	.-166    	; 0x1d02 <KeyPad_getPressedKey+0xa>

00001da8 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	00 d0       	rcall	.+0      	; 0x1dae <KeyPad_4x4_adjustKeyNumber+0x6>
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <KeyPad_4x4_adjustKeyNumber+0x8>
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	3c 83       	std	Y+4, r19	; 0x04
    1dbe:	2b 83       	std	Y+3, r18	; 0x03
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc4:	88 30       	cpi	r24, 0x08	; 8
    1dc6:	91 05       	cpc	r25, r1
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <KeyPad_4x4_adjustKeyNumber+0x24>
    1dca:	70 c0       	rjmp	.+224    	; 0x1eac <KeyPad_4x4_adjustKeyNumber+0x104>
    1dcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dce:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd0:	29 30       	cpi	r18, 0x09	; 9
    1dd2:	31 05       	cpc	r19, r1
    1dd4:	5c f5       	brge	.+86     	; 0x1e2c <KeyPad_4x4_adjustKeyNumber+0x84>
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dda:	84 30       	cpi	r24, 0x04	; 4
    1ddc:	91 05       	cpc	r25, r1
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <KeyPad_4x4_adjustKeyNumber+0x3a>
    1de0:	59 c0       	rjmp	.+178    	; 0x1e94 <KeyPad_4x4_adjustKeyNumber+0xec>
    1de2:	2b 81       	ldd	r18, Y+3	; 0x03
    1de4:	3c 81       	ldd	r19, Y+4	; 0x04
    1de6:	25 30       	cpi	r18, 0x05	; 5
    1de8:	31 05       	cpc	r19, r1
    1dea:	9c f4       	brge	.+38     	; 0x1e12 <KeyPad_4x4_adjustKeyNumber+0x6a>
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	9c 81       	ldd	r25, Y+4	; 0x04
    1df0:	82 30       	cpi	r24, 0x02	; 2
    1df2:	91 05       	cpc	r25, r1
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <KeyPad_4x4_adjustKeyNumber+0x50>
    1df6:	48 c0       	rjmp	.+144    	; 0x1e88 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1df8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1dfc:	23 30       	cpi	r18, 0x03	; 3
    1dfe:	31 05       	cpc	r19, r1
    1e00:	0c f0       	brlt	.+2      	; 0x1e04 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1e02:	45 c0       	rjmp	.+138    	; 0x1e8e <KeyPad_4x4_adjustKeyNumber+0xe6>
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	81 30       	cpi	r24, 0x01	; 1
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <KeyPad_4x4_adjustKeyNumber+0x68>
    1e0e:	39 c0       	rjmp	.+114    	; 0x1e82 <KeyPad_4x4_adjustKeyNumber+0xda>
    1e10:	67 c0       	rjmp	.+206    	; 0x1ee0 <KeyPad_4x4_adjustKeyNumber+0x138>
    1e12:	2b 81       	ldd	r18, Y+3	; 0x03
    1e14:	3c 81       	ldd	r19, Y+4	; 0x04
    1e16:	26 30       	cpi	r18, 0x06	; 6
    1e18:	31 05       	cpc	r19, r1
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <KeyPad_4x4_adjustKeyNumber+0x76>
    1e1c:	41 c0       	rjmp	.+130    	; 0x1ea0 <KeyPad_4x4_adjustKeyNumber+0xf8>
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	87 30       	cpi	r24, 0x07	; 7
    1e24:	91 05       	cpc	r25, r1
    1e26:	0c f0       	brlt	.+2      	; 0x1e2a <KeyPad_4x4_adjustKeyNumber+0x82>
    1e28:	3e c0       	rjmp	.+124    	; 0x1ea6 <KeyPad_4x4_adjustKeyNumber+0xfe>
    1e2a:	37 c0       	rjmp	.+110    	; 0x1e9a <KeyPad_4x4_adjustKeyNumber+0xf2>
    1e2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e30:	2c 30       	cpi	r18, 0x0C	; 12
    1e32:	31 05       	cpc	r19, r1
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <KeyPad_4x4_adjustKeyNumber+0x90>
    1e36:	46 c0       	rjmp	.+140    	; 0x1ec4 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	8d 30       	cpi	r24, 0x0D	; 13
    1e3e:	91 05       	cpc	r25, r1
    1e40:	5c f4       	brge	.+22     	; 0x1e58 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1e42:	2b 81       	ldd	r18, Y+3	; 0x03
    1e44:	3c 81       	ldd	r19, Y+4	; 0x04
    1e46:	2a 30       	cpi	r18, 0x0A	; 10
    1e48:	31 05       	cpc	r19, r1
    1e4a:	b1 f1       	breq	.+108    	; 0x1eb8 <KeyPad_4x4_adjustKeyNumber+0x110>
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e50:	8b 30       	cpi	r24, 0x0B	; 11
    1e52:	91 05       	cpc	r25, r1
    1e54:	a4 f5       	brge	.+104    	; 0x1ebe <KeyPad_4x4_adjustKeyNumber+0x116>
    1e56:	2d c0       	rjmp	.+90     	; 0x1eb2 <KeyPad_4x4_adjustKeyNumber+0x10a>
    1e58:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5c:	2e 30       	cpi	r18, 0x0E	; 14
    1e5e:	31 05       	cpc	r19, r1
    1e60:	b9 f1       	breq	.+110    	; 0x1ed0 <KeyPad_4x4_adjustKeyNumber+0x128>
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	9c 81       	ldd	r25, Y+4	; 0x04
    1e66:	8e 30       	cpi	r24, 0x0E	; 14
    1e68:	91 05       	cpc	r25, r1
    1e6a:	7c f1       	brlt	.+94     	; 0x1eca <KeyPad_4x4_adjustKeyNumber+0x122>
    1e6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e70:	2f 30       	cpi	r18, 0x0F	; 15
    1e72:	31 05       	cpc	r19, r1
    1e74:	79 f1       	breq	.+94     	; 0x1ed4 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7a:	80 31       	cpi	r24, 0x10	; 16
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	69 f1       	breq	.+90     	; 0x1eda <KeyPad_4x4_adjustKeyNumber+0x132>
    1e80:	2f c0       	rjmp	.+94     	; 0x1ee0 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1e82:	97 e0       	ldi	r25, 0x07	; 7
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	2e c0       	rjmp	.+92     	; 0x1ee4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1e88:	28 e0       	ldi	r18, 0x08	; 8
    1e8a:	2a 83       	std	Y+2, r18	; 0x02
    1e8c:	2b c0       	rjmp	.+86     	; 0x1ee4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    1e8e:	39 e0       	ldi	r19, 0x09	; 9
    1e90:	3a 83       	std	Y+2, r19	; 0x02
    1e92:	28 c0       	rjmp	.+80     	; 0x1ee4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    1e94:	85 e2       	ldi	r24, 0x25	; 37
    1e96:	8a 83       	std	Y+2, r24	; 0x02
    1e98:	25 c0       	rjmp	.+74     	; 0x1ee4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    1e9a:	94 e0       	ldi	r25, 0x04	; 4
    1e9c:	9a 83       	std	Y+2, r25	; 0x02
    1e9e:	22 c0       	rjmp	.+68     	; 0x1ee4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    1ea0:	25 e0       	ldi	r18, 0x05	; 5
    1ea2:	2a 83       	std	Y+2, r18	; 0x02
    1ea4:	1f c0       	rjmp	.+62     	; 0x1ee4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    1ea6:	36 e0       	ldi	r19, 0x06	; 6
    1ea8:	3a 83       	std	Y+2, r19	; 0x02
    1eaa:	1c c0       	rjmp	.+56     	; 0x1ee4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    1eac:	8a e2       	ldi	r24, 0x2A	; 42
    1eae:	8a 83       	std	Y+2, r24	; 0x02
    1eb0:	19 c0       	rjmp	.+50     	; 0x1ee4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    1eb2:	91 e0       	ldi	r25, 0x01	; 1
    1eb4:	9a 83       	std	Y+2, r25	; 0x02
    1eb6:	16 c0       	rjmp	.+44     	; 0x1ee4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    1eb8:	22 e0       	ldi	r18, 0x02	; 2
    1eba:	2a 83       	std	Y+2, r18	; 0x02
    1ebc:	13 c0       	rjmp	.+38     	; 0x1ee4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    1ebe:	33 e0       	ldi	r19, 0x03	; 3
    1ec0:	3a 83       	std	Y+2, r19	; 0x02
    1ec2:	10 c0       	rjmp	.+32     	; 0x1ee4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    1ec4:	8d e2       	ldi	r24, 0x2D	; 45
    1ec6:	8a 83       	std	Y+2, r24	; 0x02
    1ec8:	0d c0       	rjmp	.+26     	; 0x1ee4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    1eca:	9d e0       	ldi	r25, 0x0D	; 13
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	0a c0       	rjmp	.+20     	; 0x1ee4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    1ed0:	1a 82       	std	Y+2, r1	; 0x02
    1ed2:	08 c0       	rjmp	.+16     	; 0x1ee4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    1ed4:	2d e3       	ldi	r18, 0x3D	; 61
    1ed6:	2a 83       	std	Y+2, r18	; 0x02
    1ed8:	05 c0       	rjmp	.+10     	; 0x1ee4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    1eda:	3b e2       	ldi	r19, 0x2B	; 43
    1edc:	3a 83       	std	Y+2, r19	; 0x02
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	8a 83       	std	Y+2, r24	; 0x02
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1efc:	aa e3       	ldi	r26, 0x3A	; 58
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	ea e3       	ldi	r30, 0x3A	; 58
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	87 60       	ori	r24, 0x07	; 7
    1f08:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    1f0a:	e7 e3       	ldi	r30, 0x37	; 55
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	8f ef       	ldi	r24, 0xFF	; 255
    1f10:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1f12:	88 e3       	ldi	r24, 0x38	; 56
    1f14:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1f18:	8c e0       	ldi	r24, 0x0C	; 12
    1f1a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_sendCommand>
}
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	e9 97       	sbiw	r28, 0x39	; 57
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	de bf       	out	0x3e, r29	; 62
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	cd bf       	out	0x3d, r28	; 61
    1f3e:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1f40:	ab e3       	ldi	r26, 0x3B	; 59
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	eb e3       	ldi	r30, 0x3B	; 59
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	8b 7f       	andi	r24, 0xFB	; 251
    1f4c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1f4e:	ab e3       	ldi	r26, 0x3B	; 59
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	eb e3       	ldi	r30, 0x3B	; 59
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	8d 7f       	andi	r24, 0xFD	; 253
    1f5a:	8c 93       	st	X, r24
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	a0 e8       	ldi	r26, 0x80	; 128
    1f62:	bf e3       	ldi	r27, 0x3F	; 63
    1f64:	8d ab       	std	Y+53, r24	; 0x35
    1f66:	9e ab       	std	Y+54, r25	; 0x36
    1f68:	af ab       	std	Y+55, r26	; 0x37
    1f6a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f6e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f70:	8f a9       	ldd	r24, Y+55	; 0x37
    1f72:	98 ad       	ldd	r25, Y+56	; 0x38
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	4a e7       	ldi	r20, 0x7A	; 122
    1f7a:	53 e4       	ldi	r21, 0x43	; 67
    1f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	89 ab       	std	Y+49, r24	; 0x31
    1f86:	9a ab       	std	Y+50, r25	; 0x32
    1f88:	ab ab       	std	Y+51, r26	; 0x33
    1f8a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f8c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f8e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f90:	8b a9       	ldd	r24, Y+51	; 0x33
    1f92:	9c a9       	ldd	r25, Y+52	; 0x34
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e8       	ldi	r20, 0x80	; 128
    1f9a:	5f e3       	ldi	r21, 0x3F	; 63
    1f9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa0:	88 23       	and	r24, r24
    1fa2:	2c f4       	brge	.+10     	; 0x1fae <LCD_sendCommand+0x84>
		__ticks = 1;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	98 ab       	std	Y+48, r25	; 0x30
    1faa:	8f a7       	std	Y+47, r24	; 0x2f
    1fac:	3f c0       	rjmp	.+126    	; 0x202c <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1fae:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	3f ef       	ldi	r19, 0xFF	; 255
    1fba:	4f e7       	ldi	r20, 0x7F	; 127
    1fbc:	57 e4       	ldi	r21, 0x47	; 71
    1fbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fc2:	18 16       	cp	r1, r24
    1fc4:	4c f5       	brge	.+82     	; 0x2018 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc6:	6d a9       	ldd	r22, Y+53	; 0x35
    1fc8:	7e a9       	ldd	r23, Y+54	; 0x36
    1fca:	8f a9       	ldd	r24, Y+55	; 0x37
    1fcc:	98 ad       	ldd	r25, Y+56	; 0x38
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e2       	ldi	r20, 0x20	; 32
    1fd4:	51 e4       	ldi	r21, 0x41	; 65
    1fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	98 ab       	std	Y+48, r25	; 0x30
    1fec:	8f a7       	std	Y+47, r24	; 0x2f
    1fee:	0f c0       	rjmp	.+30     	; 0x200e <LCD_sendCommand+0xe4>
    1ff0:	89 e1       	ldi	r24, 0x19	; 25
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	9e a7       	std	Y+46, r25	; 0x2e
    1ff6:	8d a7       	std	Y+45, r24	; 0x2d
    1ff8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ffa:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <LCD_sendCommand+0xd2>
    2000:	9e a7       	std	Y+46, r25	; 0x2e
    2002:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2004:	8f a5       	ldd	r24, Y+47	; 0x2f
    2006:	98 a9       	ldd	r25, Y+48	; 0x30
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	98 ab       	std	Y+48, r25	; 0x30
    200c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2010:	98 a9       	ldd	r25, Y+48	; 0x30
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	69 f7       	brne	.-38     	; 0x1ff0 <LCD_sendCommand+0xc6>
    2016:	14 c0       	rjmp	.+40     	; 0x2040 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2018:	69 a9       	ldd	r22, Y+49	; 0x31
    201a:	7a a9       	ldd	r23, Y+50	; 0x32
    201c:	8b a9       	ldd	r24, Y+51	; 0x33
    201e:	9c a9       	ldd	r25, Y+52	; 0x34
    2020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	98 ab       	std	Y+48, r25	; 0x30
    202a:	8f a7       	std	Y+47, r24	; 0x2f
    202c:	8f a5       	ldd	r24, Y+47	; 0x2f
    202e:	98 a9       	ldd	r25, Y+48	; 0x30
    2030:	9c a7       	std	Y+44, r25	; 0x2c
    2032:	8b a7       	std	Y+43, r24	; 0x2b
    2034:	8b a5       	ldd	r24, Y+43	; 0x2b
    2036:	9c a5       	ldd	r25, Y+44	; 0x2c
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	f1 f7       	brne	.-4      	; 0x2038 <LCD_sendCommand+0x10e>
    203c:	9c a7       	std	Y+44, r25	; 0x2c
    203e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2040:	ab e3       	ldi	r26, 0x3B	; 59
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	eb e3       	ldi	r30, 0x3B	; 59
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	81 60       	ori	r24, 0x01	; 1
    204c:	8c 93       	st	X, r24
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	a0 e8       	ldi	r26, 0x80	; 128
    2054:	bf e3       	ldi	r27, 0x3F	; 63
    2056:	8f a3       	std	Y+39, r24	; 0x27
    2058:	98 a7       	std	Y+40, r25	; 0x28
    205a:	a9 a7       	std	Y+41, r26	; 0x29
    205c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205e:	6f a1       	ldd	r22, Y+39	; 0x27
    2060:	78 a5       	ldd	r23, Y+40	; 0x28
    2062:	89 a5       	ldd	r24, Y+41	; 0x29
    2064:	9a a5       	ldd	r25, Y+42	; 0x2a
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	4a e7       	ldi	r20, 0x7A	; 122
    206c:	53 e4       	ldi	r21, 0x43	; 67
    206e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	8b a3       	std	Y+35, r24	; 0x23
    2078:	9c a3       	std	Y+36, r25	; 0x24
    207a:	ad a3       	std	Y+37, r26	; 0x25
    207c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    207e:	6b a1       	ldd	r22, Y+35	; 0x23
    2080:	7c a1       	ldd	r23, Y+36	; 0x24
    2082:	8d a1       	ldd	r24, Y+37	; 0x25
    2084:	9e a1       	ldd	r25, Y+38	; 0x26
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e8       	ldi	r20, 0x80	; 128
    208c:	5f e3       	ldi	r21, 0x3F	; 63
    208e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2092:	88 23       	and	r24, r24
    2094:	2c f4       	brge	.+10     	; 0x20a0 <LCD_sendCommand+0x176>
		__ticks = 1;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9a a3       	std	Y+34, r25	; 0x22
    209c:	89 a3       	std	Y+33, r24	; 0x21
    209e:	3f c0       	rjmp	.+126    	; 0x211e <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    20a0:	6b a1       	ldd	r22, Y+35	; 0x23
    20a2:	7c a1       	ldd	r23, Y+36	; 0x24
    20a4:	8d a1       	ldd	r24, Y+37	; 0x25
    20a6:	9e a1       	ldd	r25, Y+38	; 0x26
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	3f ef       	ldi	r19, 0xFF	; 255
    20ac:	4f e7       	ldi	r20, 0x7F	; 127
    20ae:	57 e4       	ldi	r21, 0x47	; 71
    20b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b4:	18 16       	cp	r1, r24
    20b6:	4c f5       	brge	.+82     	; 0x210a <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b8:	6f a1       	ldd	r22, Y+39	; 0x27
    20ba:	78 a5       	ldd	r23, Y+40	; 0x28
    20bc:	89 a5       	ldd	r24, Y+41	; 0x29
    20be:	9a a5       	ldd	r25, Y+42	; 0x2a
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e2       	ldi	r20, 0x20	; 32
    20c6:	51 e4       	ldi	r21, 0x41	; 65
    20c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9a a3       	std	Y+34, r25	; 0x22
    20de:	89 a3       	std	Y+33, r24	; 0x21
    20e0:	0f c0       	rjmp	.+30     	; 0x2100 <LCD_sendCommand+0x1d6>
    20e2:	89 e1       	ldi	r24, 0x19	; 25
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	98 a3       	std	Y+32, r25	; 0x20
    20e8:	8f 8f       	std	Y+31, r24	; 0x1f
    20ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20ec:	98 a1       	ldd	r25, Y+32	; 0x20
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <LCD_sendCommand+0x1c4>
    20f2:	98 a3       	std	Y+32, r25	; 0x20
    20f4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f6:	89 a1       	ldd	r24, Y+33	; 0x21
    20f8:	9a a1       	ldd	r25, Y+34	; 0x22
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	9a a3       	std	Y+34, r25	; 0x22
    20fe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2100:	89 a1       	ldd	r24, Y+33	; 0x21
    2102:	9a a1       	ldd	r25, Y+34	; 0x22
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	69 f7       	brne	.-38     	; 0x20e2 <LCD_sendCommand+0x1b8>
    2108:	14 c0       	rjmp	.+40     	; 0x2132 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210a:	6b a1       	ldd	r22, Y+35	; 0x23
    210c:	7c a1       	ldd	r23, Y+36	; 0x24
    210e:	8d a1       	ldd	r24, Y+37	; 0x25
    2110:	9e a1       	ldd	r25, Y+38	; 0x26
    2112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	9a a3       	std	Y+34, r25	; 0x22
    211c:	89 a3       	std	Y+33, r24	; 0x21
    211e:	89 a1       	ldd	r24, Y+33	; 0x21
    2120:	9a a1       	ldd	r25, Y+34	; 0x22
    2122:	9e 8f       	std	Y+30, r25	; 0x1e
    2124:	8d 8f       	std	Y+29, r24	; 0x1d
    2126:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2128:	9e 8d       	ldd	r25, Y+30	; 0x1e
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <LCD_sendCommand+0x200>
    212e:	9e 8f       	std	Y+30, r25	; 0x1e
    2130:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    2132:	e8 e3       	ldi	r30, 0x38	; 56
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	89 ad       	ldd	r24, Y+57	; 0x39
    2138:	80 83       	st	Z, r24
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	a0 e8       	ldi	r26, 0x80	; 128
    2140:	bf e3       	ldi	r27, 0x3F	; 63
    2142:	89 8f       	std	Y+25, r24	; 0x19
    2144:	9a 8f       	std	Y+26, r25	; 0x1a
    2146:	ab 8f       	std	Y+27, r26	; 0x1b
    2148:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214a:	69 8d       	ldd	r22, Y+25	; 0x19
    214c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    214e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2150:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	4a e7       	ldi	r20, 0x7A	; 122
    2158:	53 e4       	ldi	r21, 0x43	; 67
    215a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	8d 8b       	std	Y+21, r24	; 0x15
    2164:	9e 8b       	std	Y+22, r25	; 0x16
    2166:	af 8b       	std	Y+23, r26	; 0x17
    2168:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    216a:	6d 89       	ldd	r22, Y+21	; 0x15
    216c:	7e 89       	ldd	r23, Y+22	; 0x16
    216e:	8f 89       	ldd	r24, Y+23	; 0x17
    2170:	98 8d       	ldd	r25, Y+24	; 0x18
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e8       	ldi	r20, 0x80	; 128
    2178:	5f e3       	ldi	r21, 0x3F	; 63
    217a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    217e:	88 23       	and	r24, r24
    2180:	2c f4       	brge	.+10     	; 0x218c <LCD_sendCommand+0x262>
		__ticks = 1;
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	9c 8b       	std	Y+20, r25	; 0x14
    2188:	8b 8b       	std	Y+19, r24	; 0x13
    218a:	3f c0       	rjmp	.+126    	; 0x220a <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    218c:	6d 89       	ldd	r22, Y+21	; 0x15
    218e:	7e 89       	ldd	r23, Y+22	; 0x16
    2190:	8f 89       	ldd	r24, Y+23	; 0x17
    2192:	98 8d       	ldd	r25, Y+24	; 0x18
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	3f ef       	ldi	r19, 0xFF	; 255
    2198:	4f e7       	ldi	r20, 0x7F	; 127
    219a:	57 e4       	ldi	r21, 0x47	; 71
    219c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a0:	18 16       	cp	r1, r24
    21a2:	4c f5       	brge	.+82     	; 0x21f6 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a4:	69 8d       	ldd	r22, Y+25	; 0x19
    21a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e2       	ldi	r20, 0x20	; 32
    21b2:	51 e4       	ldi	r21, 0x41	; 65
    21b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	bc 01       	movw	r22, r24
    21be:	cd 01       	movw	r24, r26
    21c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	9c 8b       	std	Y+20, r25	; 0x14
    21ca:	8b 8b       	std	Y+19, r24	; 0x13
    21cc:	0f c0       	rjmp	.+30     	; 0x21ec <LCD_sendCommand+0x2c2>
    21ce:	89 e1       	ldi	r24, 0x19	; 25
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	9a 8b       	std	Y+18, r25	; 0x12
    21d4:	89 8b       	std	Y+17, r24	; 0x11
    21d6:	89 89       	ldd	r24, Y+17	; 0x11
    21d8:	9a 89       	ldd	r25, Y+18	; 0x12
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	f1 f7       	brne	.-4      	; 0x21da <LCD_sendCommand+0x2b0>
    21de:	9a 8b       	std	Y+18, r25	; 0x12
    21e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e2:	8b 89       	ldd	r24, Y+19	; 0x13
    21e4:	9c 89       	ldd	r25, Y+20	; 0x14
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	9c 8b       	std	Y+20, r25	; 0x14
    21ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ec:	8b 89       	ldd	r24, Y+19	; 0x13
    21ee:	9c 89       	ldd	r25, Y+20	; 0x14
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	69 f7       	brne	.-38     	; 0x21ce <LCD_sendCommand+0x2a4>
    21f4:	14 c0       	rjmp	.+40     	; 0x221e <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f6:	6d 89       	ldd	r22, Y+21	; 0x15
    21f8:	7e 89       	ldd	r23, Y+22	; 0x16
    21fa:	8f 89       	ldd	r24, Y+23	; 0x17
    21fc:	98 8d       	ldd	r25, Y+24	; 0x18
    21fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	9c 8b       	std	Y+20, r25	; 0x14
    2208:	8b 8b       	std	Y+19, r24	; 0x13
    220a:	8b 89       	ldd	r24, Y+19	; 0x13
    220c:	9c 89       	ldd	r25, Y+20	; 0x14
    220e:	98 8b       	std	Y+16, r25	; 0x10
    2210:	8f 87       	std	Y+15, r24	; 0x0f
    2212:	8f 85       	ldd	r24, Y+15	; 0x0f
    2214:	98 89       	ldd	r25, Y+16	; 0x10
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	f1 f7       	brne	.-4      	; 0x2216 <LCD_sendCommand+0x2ec>
    221a:	98 8b       	std	Y+16, r25	; 0x10
    221c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    221e:	ab e3       	ldi	r26, 0x3B	; 59
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	eb e3       	ldi	r30, 0x3B	; 59
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	8e 7f       	andi	r24, 0xFE	; 254
    222a:	8c 93       	st	X, r24
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	a0 e8       	ldi	r26, 0x80	; 128
    2232:	bf e3       	ldi	r27, 0x3F	; 63
    2234:	8b 87       	std	Y+11, r24	; 0x0b
    2236:	9c 87       	std	Y+12, r25	; 0x0c
    2238:	ad 87       	std	Y+13, r26	; 0x0d
    223a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223c:	6b 85       	ldd	r22, Y+11	; 0x0b
    223e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2240:	8d 85       	ldd	r24, Y+13	; 0x0d
    2242:	9e 85       	ldd	r25, Y+14	; 0x0e
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	4a e7       	ldi	r20, 0x7A	; 122
    224a:	53 e4       	ldi	r21, 0x43	; 67
    224c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	8f 83       	std	Y+7, r24	; 0x07
    2256:	98 87       	std	Y+8, r25	; 0x08
    2258:	a9 87       	std	Y+9, r26	; 0x09
    225a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    225c:	6f 81       	ldd	r22, Y+7	; 0x07
    225e:	78 85       	ldd	r23, Y+8	; 0x08
    2260:	89 85       	ldd	r24, Y+9	; 0x09
    2262:	9a 85       	ldd	r25, Y+10	; 0x0a
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e8       	ldi	r20, 0x80	; 128
    226a:	5f e3       	ldi	r21, 0x3F	; 63
    226c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2270:	88 23       	and	r24, r24
    2272:	2c f4       	brge	.+10     	; 0x227e <LCD_sendCommand+0x354>
		__ticks = 1;
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	9e 83       	std	Y+6, r25	; 0x06
    227a:	8d 83       	std	Y+5, r24	; 0x05
    227c:	3f c0       	rjmp	.+126    	; 0x22fc <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    227e:	6f 81       	ldd	r22, Y+7	; 0x07
    2280:	78 85       	ldd	r23, Y+8	; 0x08
    2282:	89 85       	ldd	r24, Y+9	; 0x09
    2284:	9a 85       	ldd	r25, Y+10	; 0x0a
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	3f ef       	ldi	r19, 0xFF	; 255
    228a:	4f e7       	ldi	r20, 0x7F	; 127
    228c:	57 e4       	ldi	r21, 0x47	; 71
    228e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2292:	18 16       	cp	r1, r24
    2294:	4c f5       	brge	.+82     	; 0x22e8 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2296:	6b 85       	ldd	r22, Y+11	; 0x0b
    2298:	7c 85       	ldd	r23, Y+12	; 0x0c
    229a:	8d 85       	ldd	r24, Y+13	; 0x0d
    229c:	9e 85       	ldd	r25, Y+14	; 0x0e
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e2       	ldi	r20, 0x20	; 32
    22a4:	51 e4       	ldi	r21, 0x41	; 65
    22a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	bc 01       	movw	r22, r24
    22b0:	cd 01       	movw	r24, r26
    22b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	9e 83       	std	Y+6, r25	; 0x06
    22bc:	8d 83       	std	Y+5, r24	; 0x05
    22be:	0f c0       	rjmp	.+30     	; 0x22de <LCD_sendCommand+0x3b4>
    22c0:	89 e1       	ldi	r24, 0x19	; 25
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	9c 83       	std	Y+4, r25	; 0x04
    22c6:	8b 83       	std	Y+3, r24	; 0x03
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <LCD_sendCommand+0x3a2>
    22d0:	9c 83       	std	Y+4, r25	; 0x04
    22d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d4:	8d 81       	ldd	r24, Y+5	; 0x05
    22d6:	9e 81       	ldd	r25, Y+6	; 0x06
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	9e 83       	std	Y+6, r25	; 0x06
    22dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22de:	8d 81       	ldd	r24, Y+5	; 0x05
    22e0:	9e 81       	ldd	r25, Y+6	; 0x06
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	69 f7       	brne	.-38     	; 0x22c0 <LCD_sendCommand+0x396>
    22e6:	14 c0       	rjmp	.+40     	; 0x2310 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ea:	78 85       	ldd	r23, Y+8	; 0x08
    22ec:	89 85       	ldd	r24, Y+9	; 0x09
    22ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	9e 83       	std	Y+6, r25	; 0x06
    22fa:	8d 83       	std	Y+5, r24	; 0x05
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2300:	9a 83       	std	Y+2, r25	; 0x02
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	9a 81       	ldd	r25, Y+2	; 0x02
    2308:	01 97       	sbiw	r24, 0x01	; 1
    230a:	f1 f7       	brne	.-4      	; 0x2308 <LCD_sendCommand+0x3de>
    230c:	9a 83       	std	Y+2, r25	; 0x02
    230e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2310:	e9 96       	adiw	r28, 0x39	; 57
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	de bf       	out	0x3e, r29	; 62
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	cd bf       	out	0x3d, r28	; 61
    231c:	cf 91       	pop	r28
    231e:	df 91       	pop	r29
    2320:	08 95       	ret

00002322 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    2322:	df 93       	push	r29
    2324:	cf 93       	push	r28
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	e9 97       	sbiw	r28, 0x39	; 57
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    2338:	ab e3       	ldi	r26, 0x3B	; 59
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	eb e3       	ldi	r30, 0x3B	; 59
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	84 60       	ori	r24, 0x04	; 4
    2344:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2346:	ab e3       	ldi	r26, 0x3B	; 59
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	eb e3       	ldi	r30, 0x3B	; 59
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	8d 7f       	andi	r24, 0xFD	; 253
    2352:	8c 93       	st	X, r24
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	a0 e8       	ldi	r26, 0x80	; 128
    235a:	bf e3       	ldi	r27, 0x3F	; 63
    235c:	8d ab       	std	Y+53, r24	; 0x35
    235e:	9e ab       	std	Y+54, r25	; 0x36
    2360:	af ab       	std	Y+55, r26	; 0x37
    2362:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2364:	6d a9       	ldd	r22, Y+53	; 0x35
    2366:	7e a9       	ldd	r23, Y+54	; 0x36
    2368:	8f a9       	ldd	r24, Y+55	; 0x37
    236a:	98 ad       	ldd	r25, Y+56	; 0x38
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	4a e7       	ldi	r20, 0x7A	; 122
    2372:	53 e4       	ldi	r21, 0x43	; 67
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	89 ab       	std	Y+49, r24	; 0x31
    237e:	9a ab       	std	Y+50, r25	; 0x32
    2380:	ab ab       	std	Y+51, r26	; 0x33
    2382:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2384:	69 a9       	ldd	r22, Y+49	; 0x31
    2386:	7a a9       	ldd	r23, Y+50	; 0x32
    2388:	8b a9       	ldd	r24, Y+51	; 0x33
    238a:	9c a9       	ldd	r25, Y+52	; 0x34
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e8       	ldi	r20, 0x80	; 128
    2392:	5f e3       	ldi	r21, 0x3F	; 63
    2394:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2398:	88 23       	and	r24, r24
    239a:	2c f4       	brge	.+10     	; 0x23a6 <LCD_displayCharacter+0x84>
		__ticks = 1;
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	98 ab       	std	Y+48, r25	; 0x30
    23a2:	8f a7       	std	Y+47, r24	; 0x2f
    23a4:	3f c0       	rjmp	.+126    	; 0x2424 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    23a6:	69 a9       	ldd	r22, Y+49	; 0x31
    23a8:	7a a9       	ldd	r23, Y+50	; 0x32
    23aa:	8b a9       	ldd	r24, Y+51	; 0x33
    23ac:	9c a9       	ldd	r25, Y+52	; 0x34
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	3f ef       	ldi	r19, 0xFF	; 255
    23b2:	4f e7       	ldi	r20, 0x7F	; 127
    23b4:	57 e4       	ldi	r21, 0x47	; 71
    23b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ba:	18 16       	cp	r1, r24
    23bc:	4c f5       	brge	.+82     	; 0x2410 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23be:	6d a9       	ldd	r22, Y+53	; 0x35
    23c0:	7e a9       	ldd	r23, Y+54	; 0x36
    23c2:	8f a9       	ldd	r24, Y+55	; 0x37
    23c4:	98 ad       	ldd	r25, Y+56	; 0x38
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e2       	ldi	r20, 0x20	; 32
    23cc:	51 e4       	ldi	r21, 0x41	; 65
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	bc 01       	movw	r22, r24
    23d8:	cd 01       	movw	r24, r26
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	98 ab       	std	Y+48, r25	; 0x30
    23e4:	8f a7       	std	Y+47, r24	; 0x2f
    23e6:	0f c0       	rjmp	.+30     	; 0x2406 <LCD_displayCharacter+0xe4>
    23e8:	89 e1       	ldi	r24, 0x19	; 25
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	9e a7       	std	Y+46, r25	; 0x2e
    23ee:	8d a7       	std	Y+45, r24	; 0x2d
    23f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    23f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <LCD_displayCharacter+0xd2>
    23f8:	9e a7       	std	Y+46, r25	; 0x2e
    23fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    23fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	98 ab       	std	Y+48, r25	; 0x30
    2404:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2406:	8f a5       	ldd	r24, Y+47	; 0x2f
    2408:	98 a9       	ldd	r25, Y+48	; 0x30
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	69 f7       	brne	.-38     	; 0x23e8 <LCD_displayCharacter+0xc6>
    240e:	14 c0       	rjmp	.+40     	; 0x2438 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2410:	69 a9       	ldd	r22, Y+49	; 0x31
    2412:	7a a9       	ldd	r23, Y+50	; 0x32
    2414:	8b a9       	ldd	r24, Y+51	; 0x33
    2416:	9c a9       	ldd	r25, Y+52	; 0x34
    2418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	98 ab       	std	Y+48, r25	; 0x30
    2422:	8f a7       	std	Y+47, r24	; 0x2f
    2424:	8f a5       	ldd	r24, Y+47	; 0x2f
    2426:	98 a9       	ldd	r25, Y+48	; 0x30
    2428:	9c a7       	std	Y+44, r25	; 0x2c
    242a:	8b a7       	std	Y+43, r24	; 0x2b
    242c:	8b a5       	ldd	r24, Y+43	; 0x2b
    242e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2430:	01 97       	sbiw	r24, 0x01	; 1
    2432:	f1 f7       	brne	.-4      	; 0x2430 <LCD_displayCharacter+0x10e>
    2434:	9c a7       	std	Y+44, r25	; 0x2c
    2436:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2438:	ab e3       	ldi	r26, 0x3B	; 59
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	eb e3       	ldi	r30, 0x3B	; 59
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	81 60       	ori	r24, 0x01	; 1
    2444:	8c 93       	st	X, r24
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	a0 e8       	ldi	r26, 0x80	; 128
    244c:	bf e3       	ldi	r27, 0x3F	; 63
    244e:	8f a3       	std	Y+39, r24	; 0x27
    2450:	98 a7       	std	Y+40, r25	; 0x28
    2452:	a9 a7       	std	Y+41, r26	; 0x29
    2454:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2456:	6f a1       	ldd	r22, Y+39	; 0x27
    2458:	78 a5       	ldd	r23, Y+40	; 0x28
    245a:	89 a5       	ldd	r24, Y+41	; 0x29
    245c:	9a a5       	ldd	r25, Y+42	; 0x2a
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	4a e7       	ldi	r20, 0x7A	; 122
    2464:	53 e4       	ldi	r21, 0x43	; 67
    2466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	8b a3       	std	Y+35, r24	; 0x23
    2470:	9c a3       	std	Y+36, r25	; 0x24
    2472:	ad a3       	std	Y+37, r26	; 0x25
    2474:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2476:	6b a1       	ldd	r22, Y+35	; 0x23
    2478:	7c a1       	ldd	r23, Y+36	; 0x24
    247a:	8d a1       	ldd	r24, Y+37	; 0x25
    247c:	9e a1       	ldd	r25, Y+38	; 0x26
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	40 e8       	ldi	r20, 0x80	; 128
    2484:	5f e3       	ldi	r21, 0x3F	; 63
    2486:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    248a:	88 23       	and	r24, r24
    248c:	2c f4       	brge	.+10     	; 0x2498 <LCD_displayCharacter+0x176>
		__ticks = 1;
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	9a a3       	std	Y+34, r25	; 0x22
    2494:	89 a3       	std	Y+33, r24	; 0x21
    2496:	3f c0       	rjmp	.+126    	; 0x2516 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    2498:	6b a1       	ldd	r22, Y+35	; 0x23
    249a:	7c a1       	ldd	r23, Y+36	; 0x24
    249c:	8d a1       	ldd	r24, Y+37	; 0x25
    249e:	9e a1       	ldd	r25, Y+38	; 0x26
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	3f ef       	ldi	r19, 0xFF	; 255
    24a4:	4f e7       	ldi	r20, 0x7F	; 127
    24a6:	57 e4       	ldi	r21, 0x47	; 71
    24a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ac:	18 16       	cp	r1, r24
    24ae:	4c f5       	brge	.+82     	; 0x2502 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b0:	6f a1       	ldd	r22, Y+39	; 0x27
    24b2:	78 a5       	ldd	r23, Y+40	; 0x28
    24b4:	89 a5       	ldd	r24, Y+41	; 0x29
    24b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	40 e2       	ldi	r20, 0x20	; 32
    24be:	51 e4       	ldi	r21, 0x41	; 65
    24c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	bc 01       	movw	r22, r24
    24ca:	cd 01       	movw	r24, r26
    24cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	9a a3       	std	Y+34, r25	; 0x22
    24d6:	89 a3       	std	Y+33, r24	; 0x21
    24d8:	0f c0       	rjmp	.+30     	; 0x24f8 <LCD_displayCharacter+0x1d6>
    24da:	89 e1       	ldi	r24, 0x19	; 25
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	98 a3       	std	Y+32, r25	; 0x20
    24e0:	8f 8f       	std	Y+31, r24	; 0x1f
    24e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24e4:	98 a1       	ldd	r25, Y+32	; 0x20
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	f1 f7       	brne	.-4      	; 0x24e6 <LCD_displayCharacter+0x1c4>
    24ea:	98 a3       	std	Y+32, r25	; 0x20
    24ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ee:	89 a1       	ldd	r24, Y+33	; 0x21
    24f0:	9a a1       	ldd	r25, Y+34	; 0x22
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	9a a3       	std	Y+34, r25	; 0x22
    24f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f8:	89 a1       	ldd	r24, Y+33	; 0x21
    24fa:	9a a1       	ldd	r25, Y+34	; 0x22
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	69 f7       	brne	.-38     	; 0x24da <LCD_displayCharacter+0x1b8>
    2500:	14 c0       	rjmp	.+40     	; 0x252a <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2502:	6b a1       	ldd	r22, Y+35	; 0x23
    2504:	7c a1       	ldd	r23, Y+36	; 0x24
    2506:	8d a1       	ldd	r24, Y+37	; 0x25
    2508:	9e a1       	ldd	r25, Y+38	; 0x26
    250a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	9a a3       	std	Y+34, r25	; 0x22
    2514:	89 a3       	std	Y+33, r24	; 0x21
    2516:	89 a1       	ldd	r24, Y+33	; 0x21
    2518:	9a a1       	ldd	r25, Y+34	; 0x22
    251a:	9e 8f       	std	Y+30, r25	; 0x1e
    251c:	8d 8f       	std	Y+29, r24	; 0x1d
    251e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2520:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	f1 f7       	brne	.-4      	; 0x2522 <LCD_displayCharacter+0x200>
    2526:	9e 8f       	std	Y+30, r25	; 0x1e
    2528:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    252a:	e8 e3       	ldi	r30, 0x38	; 56
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	89 ad       	ldd	r24, Y+57	; 0x39
    2530:	80 83       	st	Z, r24
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	a0 e8       	ldi	r26, 0x80	; 128
    2538:	bf e3       	ldi	r27, 0x3F	; 63
    253a:	89 8f       	std	Y+25, r24	; 0x19
    253c:	9a 8f       	std	Y+26, r25	; 0x1a
    253e:	ab 8f       	std	Y+27, r26	; 0x1b
    2540:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2542:	69 8d       	ldd	r22, Y+25	; 0x19
    2544:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2546:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2548:	9c 8d       	ldd	r25, Y+28	; 0x1c
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	4a e7       	ldi	r20, 0x7A	; 122
    2550:	53 e4       	ldi	r21, 0x43	; 67
    2552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	8d 8b       	std	Y+21, r24	; 0x15
    255c:	9e 8b       	std	Y+22, r25	; 0x16
    255e:	af 8b       	std	Y+23, r26	; 0x17
    2560:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2562:	6d 89       	ldd	r22, Y+21	; 0x15
    2564:	7e 89       	ldd	r23, Y+22	; 0x16
    2566:	8f 89       	ldd	r24, Y+23	; 0x17
    2568:	98 8d       	ldd	r25, Y+24	; 0x18
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e8       	ldi	r20, 0x80	; 128
    2570:	5f e3       	ldi	r21, 0x3F	; 63
    2572:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2576:	88 23       	and	r24, r24
    2578:	2c f4       	brge	.+10     	; 0x2584 <LCD_displayCharacter+0x262>
		__ticks = 1;
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	9c 8b       	std	Y+20, r25	; 0x14
    2580:	8b 8b       	std	Y+19, r24	; 0x13
    2582:	3f c0       	rjmp	.+126    	; 0x2602 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    2584:	6d 89       	ldd	r22, Y+21	; 0x15
    2586:	7e 89       	ldd	r23, Y+22	; 0x16
    2588:	8f 89       	ldd	r24, Y+23	; 0x17
    258a:	98 8d       	ldd	r25, Y+24	; 0x18
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	3f ef       	ldi	r19, 0xFF	; 255
    2590:	4f e7       	ldi	r20, 0x7F	; 127
    2592:	57 e4       	ldi	r21, 0x47	; 71
    2594:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2598:	18 16       	cp	r1, r24
    259a:	4c f5       	brge	.+82     	; 0x25ee <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259c:	69 8d       	ldd	r22, Y+25	; 0x19
    259e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e2       	ldi	r20, 0x20	; 32
    25aa:	51 e4       	ldi	r21, 0x41	; 65
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	bc 01       	movw	r22, r24
    25b6:	cd 01       	movw	r24, r26
    25b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	9c 8b       	std	Y+20, r25	; 0x14
    25c2:	8b 8b       	std	Y+19, r24	; 0x13
    25c4:	0f c0       	rjmp	.+30     	; 0x25e4 <LCD_displayCharacter+0x2c2>
    25c6:	89 e1       	ldi	r24, 0x19	; 25
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	9a 8b       	std	Y+18, r25	; 0x12
    25cc:	89 8b       	std	Y+17, r24	; 0x11
    25ce:	89 89       	ldd	r24, Y+17	; 0x11
    25d0:	9a 89       	ldd	r25, Y+18	; 0x12
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <LCD_displayCharacter+0x2b0>
    25d6:	9a 8b       	std	Y+18, r25	; 0x12
    25d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25da:	8b 89       	ldd	r24, Y+19	; 0x13
    25dc:	9c 89       	ldd	r25, Y+20	; 0x14
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	9c 8b       	std	Y+20, r25	; 0x14
    25e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e4:	8b 89       	ldd	r24, Y+19	; 0x13
    25e6:	9c 89       	ldd	r25, Y+20	; 0x14
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	69 f7       	brne	.-38     	; 0x25c6 <LCD_displayCharacter+0x2a4>
    25ec:	14 c0       	rjmp	.+40     	; 0x2616 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ee:	6d 89       	ldd	r22, Y+21	; 0x15
    25f0:	7e 89       	ldd	r23, Y+22	; 0x16
    25f2:	8f 89       	ldd	r24, Y+23	; 0x17
    25f4:	98 8d       	ldd	r25, Y+24	; 0x18
    25f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	9c 8b       	std	Y+20, r25	; 0x14
    2600:	8b 8b       	std	Y+19, r24	; 0x13
    2602:	8b 89       	ldd	r24, Y+19	; 0x13
    2604:	9c 89       	ldd	r25, Y+20	; 0x14
    2606:	98 8b       	std	Y+16, r25	; 0x10
    2608:	8f 87       	std	Y+15, r24	; 0x0f
    260a:	8f 85       	ldd	r24, Y+15	; 0x0f
    260c:	98 89       	ldd	r25, Y+16	; 0x10
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	f1 f7       	brne	.-4      	; 0x260e <LCD_displayCharacter+0x2ec>
    2612:	98 8b       	std	Y+16, r25	; 0x10
    2614:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2616:	ab e3       	ldi	r26, 0x3B	; 59
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	eb e3       	ldi	r30, 0x3B	; 59
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	8e 7f       	andi	r24, 0xFE	; 254
    2622:	8c 93       	st	X, r24
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	a0 e8       	ldi	r26, 0x80	; 128
    262a:	bf e3       	ldi	r27, 0x3F	; 63
    262c:	8b 87       	std	Y+11, r24	; 0x0b
    262e:	9c 87       	std	Y+12, r25	; 0x0c
    2630:	ad 87       	std	Y+13, r26	; 0x0d
    2632:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2634:	6b 85       	ldd	r22, Y+11	; 0x0b
    2636:	7c 85       	ldd	r23, Y+12	; 0x0c
    2638:	8d 85       	ldd	r24, Y+13	; 0x0d
    263a:	9e 85       	ldd	r25, Y+14	; 0x0e
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	4a e7       	ldi	r20, 0x7A	; 122
    2642:	53 e4       	ldi	r21, 0x43	; 67
    2644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	8f 83       	std	Y+7, r24	; 0x07
    264e:	98 87       	std	Y+8, r25	; 0x08
    2650:	a9 87       	std	Y+9, r26	; 0x09
    2652:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2654:	6f 81       	ldd	r22, Y+7	; 0x07
    2656:	78 85       	ldd	r23, Y+8	; 0x08
    2658:	89 85       	ldd	r24, Y+9	; 0x09
    265a:	9a 85       	ldd	r25, Y+10	; 0x0a
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e8       	ldi	r20, 0x80	; 128
    2662:	5f e3       	ldi	r21, 0x3F	; 63
    2664:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2668:	88 23       	and	r24, r24
    266a:	2c f4       	brge	.+10     	; 0x2676 <LCD_displayCharacter+0x354>
		__ticks = 1;
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	9e 83       	std	Y+6, r25	; 0x06
    2672:	8d 83       	std	Y+5, r24	; 0x05
    2674:	3f c0       	rjmp	.+126    	; 0x26f4 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2676:	6f 81       	ldd	r22, Y+7	; 0x07
    2678:	78 85       	ldd	r23, Y+8	; 0x08
    267a:	89 85       	ldd	r24, Y+9	; 0x09
    267c:	9a 85       	ldd	r25, Y+10	; 0x0a
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	3f ef       	ldi	r19, 0xFF	; 255
    2682:	4f e7       	ldi	r20, 0x7F	; 127
    2684:	57 e4       	ldi	r21, 0x47	; 71
    2686:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    268a:	18 16       	cp	r1, r24
    268c:	4c f5       	brge	.+82     	; 0x26e0 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2690:	7c 85       	ldd	r23, Y+12	; 0x0c
    2692:	8d 85       	ldd	r24, Y+13	; 0x0d
    2694:	9e 85       	ldd	r25, Y+14	; 0x0e
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e2       	ldi	r20, 0x20	; 32
    269c:	51 e4       	ldi	r21, 0x41	; 65
    269e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	bc 01       	movw	r22, r24
    26a8:	cd 01       	movw	r24, r26
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9e 83       	std	Y+6, r25	; 0x06
    26b4:	8d 83       	std	Y+5, r24	; 0x05
    26b6:	0f c0       	rjmp	.+30     	; 0x26d6 <LCD_displayCharacter+0x3b4>
    26b8:	89 e1       	ldi	r24, 0x19	; 25
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	9c 83       	std	Y+4, r25	; 0x04
    26be:	8b 83       	std	Y+3, r24	; 0x03
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	9c 81       	ldd	r25, Y+4	; 0x04
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <LCD_displayCharacter+0x3a2>
    26c8:	9c 83       	std	Y+4, r25	; 0x04
    26ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26cc:	8d 81       	ldd	r24, Y+5	; 0x05
    26ce:	9e 81       	ldd	r25, Y+6	; 0x06
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	9e 83       	std	Y+6, r25	; 0x06
    26d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d6:	8d 81       	ldd	r24, Y+5	; 0x05
    26d8:	9e 81       	ldd	r25, Y+6	; 0x06
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	69 f7       	brne	.-38     	; 0x26b8 <LCD_displayCharacter+0x396>
    26de:	14 c0       	rjmp	.+40     	; 0x2708 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e0:	6f 81       	ldd	r22, Y+7	; 0x07
    26e2:	78 85       	ldd	r23, Y+8	; 0x08
    26e4:	89 85       	ldd	r24, Y+9	; 0x09
    26e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	9e 83       	std	Y+6, r25	; 0x06
    26f2:	8d 83       	std	Y+5, r24	; 0x05
    26f4:	8d 81       	ldd	r24, Y+5	; 0x05
    26f6:	9e 81       	ldd	r25, Y+6	; 0x06
    26f8:	9a 83       	std	Y+2, r25	; 0x02
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <LCD_displayCharacter+0x3de>
    2704:	9a 83       	std	Y+2, r25	; 0x02
    2706:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2708:	e9 96       	adiw	r28, 0x39	; 57
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	de bf       	out	0x3e, r29	; 62
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	cd bf       	out	0x3d, r28	; 61
    2714:	cf 91       	pop	r28
    2716:	df 91       	pop	r29
    2718:	08 95       	ret

0000271a <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    271a:	df 93       	push	r29
    271c:	cf 93       	push	r28
    271e:	00 d0       	rcall	.+0      	; 0x2720 <LCD_displayString+0x6>
    2720:	0f 92       	push	r0
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
    2726:	9b 83       	std	Y+3, r25	; 0x03
    2728:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    272a:	19 82       	std	Y+1, r1	; 0x01
    272c:	0e c0       	rjmp	.+28     	; 0x274a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	28 2f       	mov	r18, r24
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	9b 81       	ldd	r25, Y+3	; 0x03
    2738:	fc 01       	movw	r30, r24
    273a:	e2 0f       	add	r30, r18
    273c:	f3 1f       	adc	r31, r19
    273e:	80 81       	ld	r24, Z
    2740:	0e 94 91 11 	call	0x2322	; 0x2322 <LCD_displayCharacter>
		i++;
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	8f 5f       	subi	r24, 0xFF	; 255
    2748:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	28 2f       	mov	r18, r24
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	8a 81       	ldd	r24, Y+2	; 0x02
    2752:	9b 81       	ldd	r25, Y+3	; 0x03
    2754:	fc 01       	movw	r30, r24
    2756:	e2 0f       	add	r30, r18
    2758:	f3 1f       	adc	r31, r19
    275a:	80 81       	ld	r24, Z
    275c:	88 23       	and	r24, r24
    275e:	39 f7       	brne	.-50     	; 0x272e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	08 95       	ret

0000276c <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	00 d0       	rcall	.+0      	; 0x2772 <LCD_goToRowColumn+0x6>
    2772:	00 d0       	rcall	.+0      	; 0x2774 <LCD_goToRowColumn+0x8>
    2774:	0f 92       	push	r0
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
    277a:	8a 83       	std	Y+2, r24	; 0x02
    277c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    277e:	8a 81       	ldd	r24, Y+2	; 0x02
    2780:	28 2f       	mov	r18, r24
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	3d 83       	std	Y+5, r19	; 0x05
    2786:	2c 83       	std	Y+4, r18	; 0x04
    2788:	8c 81       	ldd	r24, Y+4	; 0x04
    278a:	9d 81       	ldd	r25, Y+5	; 0x05
    278c:	81 30       	cpi	r24, 0x01	; 1
    278e:	91 05       	cpc	r25, r1
    2790:	c1 f0       	breq	.+48     	; 0x27c2 <LCD_goToRowColumn+0x56>
    2792:	2c 81       	ldd	r18, Y+4	; 0x04
    2794:	3d 81       	ldd	r19, Y+5	; 0x05
    2796:	22 30       	cpi	r18, 0x02	; 2
    2798:	31 05       	cpc	r19, r1
    279a:	2c f4       	brge	.+10     	; 0x27a6 <LCD_goToRowColumn+0x3a>
    279c:	8c 81       	ldd	r24, Y+4	; 0x04
    279e:	9d 81       	ldd	r25, Y+5	; 0x05
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	61 f0       	breq	.+24     	; 0x27bc <LCD_goToRowColumn+0x50>
    27a4:	19 c0       	rjmp	.+50     	; 0x27d8 <LCD_goToRowColumn+0x6c>
    27a6:	2c 81       	ldd	r18, Y+4	; 0x04
    27a8:	3d 81       	ldd	r19, Y+5	; 0x05
    27aa:	22 30       	cpi	r18, 0x02	; 2
    27ac:	31 05       	cpc	r19, r1
    27ae:	69 f0       	breq	.+26     	; 0x27ca <LCD_goToRowColumn+0x5e>
    27b0:	8c 81       	ldd	r24, Y+4	; 0x04
    27b2:	9d 81       	ldd	r25, Y+5	; 0x05
    27b4:	83 30       	cpi	r24, 0x03	; 3
    27b6:	91 05       	cpc	r25, r1
    27b8:	61 f0       	breq	.+24     	; 0x27d2 <LCD_goToRowColumn+0x66>
    27ba:	0e c0       	rjmp	.+28     	; 0x27d8 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	89 83       	std	Y+1, r24	; 0x01
    27c0:	0b c0       	rjmp	.+22     	; 0x27d8 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    27c2:	8b 81       	ldd	r24, Y+3	; 0x03
    27c4:	80 5c       	subi	r24, 0xC0	; 192
    27c6:	89 83       	std	Y+1, r24	; 0x01
    27c8:	07 c0       	rjmp	.+14     	; 0x27d8 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	80 5f       	subi	r24, 0xF0	; 240
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	03 c0       	rjmp	.+6      	; 0x27d8 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	80 5b       	subi	r24, 0xB0	; 176
    27d6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	80 68       	ori	r24, 0x80	; 128
    27dc:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_sendCommand>
}
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	cf 91       	pop	r28
    27ec:	df 91       	pop	r29
    27ee:	08 95       	ret

000027f0 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    27f0:	df 93       	push	r29
    27f2:	cf 93       	push	r28
    27f4:	00 d0       	rcall	.+0      	; 0x27f6 <LCD_displayStringRowColumn+0x6>
    27f6:	00 d0       	rcall	.+0      	; 0x27f8 <LCD_displayStringRowColumn+0x8>
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
    27fc:	89 83       	std	Y+1, r24	; 0x01
    27fe:	6a 83       	std	Y+2, r22	; 0x02
    2800:	5c 83       	std	Y+4, r21	; 0x04
    2802:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	6a 81       	ldd	r22, Y+2	; 0x02
    2808:	0e 94 b6 13 	call	0x276c	; 0x276c <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	9c 81       	ldd	r25, Y+4	; 0x04
    2810:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_displayString>
}
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	cf 91       	pop	r28
    281e:	df 91       	pop	r29
    2820:	08 95       	ret

00002822 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2822:	df 93       	push	r29
    2824:	cf 93       	push	r28
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	62 97       	sbiw	r28, 0x12	; 18
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	9a 8b       	std	Y+18, r25	; 0x12
    2838:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    283a:	89 89       	ldd	r24, Y+17	; 0x11
    283c:	9a 89       	ldd	r25, Y+18	; 0x12
    283e:	9e 01       	movw	r18, r28
    2840:	2f 5f       	subi	r18, 0xFF	; 255
    2842:	3f 4f       	sbci	r19, 0xFF	; 255
    2844:	b9 01       	movw	r22, r18
    2846:	4a e0       	ldi	r20, 0x0A	; 10
    2848:	50 e0       	ldi	r21, 0x00	; 0
    284a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <itoa>
   LCD_displayString(buff);
    284e:	ce 01       	movw	r24, r28
    2850:	01 96       	adiw	r24, 0x01	; 1
    2852:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_displayString>
}
    2856:	62 96       	adiw	r28, 0x12	; 18
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret

00002868 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_sendCommand>
}
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	08 95       	ret

0000287c <TIMER1_delay>:
#ifdef timer1
/* delay function using timer1 */
/* no. of cycles = 0xff - initiate_timer + 1 cycle roll over to raise TOV0 flag  */
/*total delay = no.of cycle * Time of one tick*/
void TIMER1_delay (timer_config * config_ptr)
{
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	00 d0       	rcall	.+0      	; 0x2882 <TIMER1_delay+0x6>
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	9a 83       	std	Y+2, r25	; 0x02
    2888:	89 83       	std	Y+1, r24	; 0x01
	TCNT1  = config_ptr -> init_timer ;
    288a:	ac e4       	ldi	r26, 0x4C	; 76
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	e9 81       	ldd	r30, Y+1	; 0x01
    2890:	fa 81       	ldd	r31, Y+2	; 0x02
    2892:	80 81       	ld	r24, Z
    2894:	91 81       	ldd	r25, Z+1	; 0x01
    2896:	11 96       	adiw	r26, 0x01	; 1
    2898:	9c 93       	st	X, r25
    289a:	8e 93       	st	-X, r24
	TCCR1A = (1 << FOC1A)|(1 << FOC1B);/* normal mode */
    289c:	ef e4       	ldi	r30, 0x4F	; 79
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	8c e0       	ldi	r24, 0x0C	; 12
    28a2:	80 83       	st	Z, r24
	TCCR1B = ((config_ptr -> timerClk)& 0x07); /*prescaler*/
    28a4:	ae e4       	ldi	r26, 0x4E	; 78
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e9 81       	ldd	r30, Y+1	; 0x01
    28aa:	fa 81       	ldd	r31, Y+2	; 0x02
    28ac:	82 81       	ldd	r24, Z+2	; 0x02
    28ae:	87 70       	andi	r24, 0x07	; 7
    28b0:	8c 93       	st	X, r24
	while (BIT_IS_CLEAR(TIFR,TOV1));/*waiting until overflow occurs  */
    28b2:	e8 e5       	ldi	r30, 0x58	; 88
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	88 2f       	mov	r24, r24
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	84 70       	andi	r24, 0x04	; 4
    28be:	90 70       	andi	r25, 0x00	; 0
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	b9 f3       	breq	.-18     	; 0x28b2 <TIMER1_delay+0x36>
	TCCR1B = 0; /*turn off timer1*/
    28c4:	ee e4       	ldi	r30, 0x4E	; 78
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	10 82       	st	Z, r1
	TIFR  = SET_BIT(TIFR, TOV1);/*clear flag by writing one on it*/
    28ca:	28 e5       	ldi	r18, 0x58	; 88
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	a8 e5       	ldi	r26, 0x58	; 88
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	e8 e5       	ldi	r30, 0x58	; 88
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	84 60       	ori	r24, 0x04	; 4
    28da:	8c 93       	st	X, r24
    28dc:	8c 91       	ld	r24, X
    28de:	f9 01       	movw	r30, r18
    28e0:	80 83       	st	Z, r24

}
    28e2:	0f 90       	pop	r0
    28e4:	0f 90       	pop	r0
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	08 95       	ret

000028ec <timer1_ovf_init>:
/*timer1 overflow interrupt handled by ISR */

void timer1_ovf_init(timer_config * config_ptr)
{
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <timer1_ovf_init+0x6>
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	9a 83       	std	Y+2, r25	; 0x02
    28f8:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = config_ptr -> init_timer ;
    28fa:	ac e4       	ldi	r26, 0x4C	; 76
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2900:	fa 81       	ldd	r31, Y+2	; 0x02
    2902:	80 81       	ld	r24, Z
    2904:	91 81       	ldd	r25, Z+1	; 0x01
    2906:	11 96       	adiw	r26, 0x01	; 1
    2908:	9c 93       	st	X, r25
    290a:	8e 93       	st	-X, r24
	TCCR1A = (1 << FOC1A)|(1 << FOC1B);/* normal mode */
    290c:	ef e4       	ldi	r30, 0x4F	; 79
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	8c e0       	ldi	r24, 0x0C	; 12
    2912:	80 83       	st	Z, r24
	TCCR1B = ((config_ptr -> timerClk)& 0x07); /*prescaler*/
    2914:	ae e4       	ldi	r26, 0x4E	; 78
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	e9 81       	ldd	r30, Y+1	; 0x01
    291a:	fa 81       	ldd	r31, Y+2	; 0x02
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	87 70       	andi	r24, 0x07	; 7
    2920:	8c 93       	st	X, r24
	TIMSK = (1<<TOIE1);/* ENABLE TIMER1 OVERFLOW INTERRUPT */
    2922:	e9 e5       	ldi	r30, 0x59	; 89
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	84 e0       	ldi	r24, 0x04	; 4
    2928:	80 83       	st	Z, r24

}
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <timer1_ctc_chAB_init>:

/*timer1 CTC mode + interrupt handled by ISR */
/*channel A*/

void timer1_ctc_chAB_init(timer_config * config_ptr , uint16 compare_matchA, uint16 compare_matchB)
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	00 d0       	rcall	.+0      	; 0x293a <timer1_ctc_chAB_init+0x6>
    293a:	00 d0       	rcall	.+0      	; 0x293c <timer1_ctc_chAB_init+0x8>
    293c:	00 d0       	rcall	.+0      	; 0x293e <timer1_ctc_chAB_init+0xa>
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
    2942:	9a 83       	std	Y+2, r25	; 0x02
    2944:	89 83       	std	Y+1, r24	; 0x01
    2946:	7c 83       	std	Y+4, r23	; 0x04
    2948:	6b 83       	std	Y+3, r22	; 0x03
    294a:	5e 83       	std	Y+6, r21	; 0x06
    294c:	4d 83       	std	Y+5, r20	; 0x05

	TCNT1 = config_ptr -> init_timer ;
    294e:	ac e4       	ldi	r26, 0x4C	; 76
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	e9 81       	ldd	r30, Y+1	; 0x01
    2954:	fa 81       	ldd	r31, Y+2	; 0x02
    2956:	80 81       	ld	r24, Z
    2958:	91 81       	ldd	r25, Z+1	; 0x01
    295a:	11 96       	adiw	r26, 0x01	; 1
    295c:	9c 93       	st	X, r25
    295e:	8e 93       	st	-X, r24
	TCCR1A = (1 << FOC1A)|(1 << FOC1B) | (1 << COM1A1);/*clear on compare match */
    2960:	ef e4       	ldi	r30, 0x4F	; 79
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	8c e8       	ldi	r24, 0x8C	; 140
    2966:	80 83       	st	Z, r24
	OCR1A  = compare_matchA;
    2968:	ea e4       	ldi	r30, 0x4A	; 74
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	8b 81       	ldd	r24, Y+3	; 0x03
    296e:	9c 81       	ldd	r25, Y+4	; 0x04
    2970:	91 83       	std	Z+1, r25	; 0x01
    2972:	80 83       	st	Z, r24
	OCR1B  = compare_matchB;
    2974:	e8 e4       	ldi	r30, 0x48	; 72
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	8d 81       	ldd	r24, Y+5	; 0x05
    297a:	9e 81       	ldd	r25, Y+6	; 0x06
    297c:	91 83       	std	Z+1, r25	; 0x01
    297e:	80 83       	st	Z, r24
	TIMSK = (1<< OCIE1A) |(1<<OCIE1B);/* ENABLE TIMER1 Compare match INTERRUPT */
    2980:	e9 e5       	ldi	r30, 0x59	; 89
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	88 e1       	ldi	r24, 0x18	; 24
    2986:	80 83       	st	Z, r24
	TCCR1B = ( 1 << WGM12) | ((config_ptr -> timerClk)& 0x07); /*ctc ,prescaler*/
    2988:	ae e4       	ldi	r26, 0x4E	; 78
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	e9 81       	ldd	r30, Y+1	; 0x01
    298e:	fa 81       	ldd	r31, Y+2	; 0x02
    2990:	82 81       	ldd	r24, Z+2	; 0x02
    2992:	87 70       	andi	r24, 0x07	; 7
    2994:	88 60       	ori	r24, 0x08	; 8
    2996:	8c 93       	st	X, r24
}
    2998:	26 96       	adiw	r28, 0x06	; 6
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	08 95       	ret

000029aa <TIMER1_PWM_init>:


/* timer1 generating fast pwm non_inverting mode*/

void TIMER1_PWM_init(timer_config * config_ptr)
{
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	00 d0       	rcall	.+0      	; 0x29b0 <TIMER1_PWM_init+0x6>
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	9a 83       	std	Y+2, r25	; 0x02
    29b6:	89 83       	std	Y+1, r24	; 0x01
	TCNT1  = config_ptr -> init_timer ;
    29b8:	ac e4       	ldi	r26, 0x4C	; 76
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	e9 81       	ldd	r30, Y+1	; 0x01
    29be:	fa 81       	ldd	r31, Y+2	; 0x02
    29c0:	80 81       	ld	r24, Z
    29c2:	91 81       	ldd	r25, Z+1	; 0x01
    29c4:	11 96       	adiw	r26, 0x01	; 1
    29c6:	9c 93       	st	X, r25
    29c8:	8e 93       	st	-X, r24
	TCCR1A = (1 << WGM10) | (1 << WGM11) | (1 << COM1A1);/*clear on compare match non inverting mode */
    29ca:	ef e4       	ldi	r30, 0x4F	; 79
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	83 e8       	ldi	r24, 0x83	; 131
    29d0:	80 83       	st	Z, r24
	TCCR1B = ( 1 << WGM12) | ( 1 << WGM13) | ((config_ptr -> timerClk)& 0x07); /*fast pwm, prescaler*/
    29d2:	ae e4       	ldi	r26, 0x4E	; 78
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	e9 81       	ldd	r30, Y+1	; 0x01
    29d8:	fa 81       	ldd	r31, Y+2	; 0x02
    29da:	82 81       	ldd	r24, Z+2	; 0x02
    29dc:	87 70       	andi	r24, 0x07	; 7
    29de:	88 61       	ori	r24, 0x18	; 24
    29e0:	8c 93       	st	X, r24
	DDRD   = (1 << PD5);/* set pin PD5 as output pin*/
    29e2:	e1 e3       	ldi	r30, 0x31	; 49
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 e2       	ldi	r24, 0x20	; 32
    29e8:	80 83       	st	Z, r24
}
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	cf 91       	pop	r28
    29f0:	df 91       	pop	r29
    29f2:	08 95       	ret

000029f4 <set_duty_ChannelA>:
/*this two function can be written in the main */
/*
 * Description: Function to set the value of OCR1A.
 */
void set_duty_ChannelA (uint16 duty)
{
    29f4:	df 93       	push	r29
    29f6:	cf 93       	push	r28
    29f8:	00 d0       	rcall	.+0      	; 0x29fa <set_duty_ChannelA+0x6>
    29fa:	cd b7       	in	r28, 0x3d	; 61
    29fc:	de b7       	in	r29, 0x3e	; 62
    29fe:	9a 83       	std	Y+2, r25	; 0x02
    2a00:	89 83       	std	Y+1, r24	; 0x01
	OCR1A =duty;/*pwm max OCR1A if i want to generate two pwm load OCR1B with the smaller value */
    2a02:	ea e4       	ldi	r30, 0x4A	; 74
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0a:	91 83       	std	Z+1, r25	; 0x01
    2a0c:	80 83       	st	Z, r24
}
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	08 95       	ret

00002a18 <set_duty_ChannelB>:
/*
 * Description: Function to set the value of OCR1B.
 */
void set_duty_ChannelB (uint16 duty)
{
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	00 d0       	rcall	.+0      	; 0x2a1e <set_duty_ChannelB+0x6>
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	9a 83       	std	Y+2, r25	; 0x02
    2a24:	89 83       	std	Y+1, r24	; 0x01
	OCR1B =duty;
    2a26:	e8 e4       	ldi	r30, 0x48	; 72
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	89 81       	ldd	r24, Y+1	; 0x01
    2a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2e:	91 83       	std	Z+1, r25	; 0x01
    2a30:	80 83       	st	Z, r24
}
    2a32:	0f 90       	pop	r0
    2a34:	0f 90       	pop	r0
    2a36:	cf 91       	pop	r28
    2a38:	df 91       	pop	r29
    2a3a:	08 95       	ret

00002a3c <Timer1_setCallBackOvf>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBackOvf(void(*a_ptr)(void))
{
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	00 d0       	rcall	.+0      	; 0x2a42 <Timer1_setCallBackOvf+0x6>
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
    2a46:	9a 83       	std	Y+2, r25	; 0x02
    2a48:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr = a_ptr ;
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
    2a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4e:	90 93 02 01 	sts	0x0102, r25
    2a52:	80 93 01 01 	sts	0x0101, r24
}
    2a56:	0f 90       	pop	r0
    2a58:	0f 90       	pop	r0
    2a5a:	cf 91       	pop	r28
    2a5c:	df 91       	pop	r29
    2a5e:	08 95       	ret

00002a60 <Timer1_setCallBackChA>:
/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBackChA(void(*a_ptr)(void))
{
    2a60:	df 93       	push	r29
    2a62:	cf 93       	push	r28
    2a64:	00 d0       	rcall	.+0      	; 0x2a66 <Timer1_setCallBackChA+0x6>
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	9a 83       	std	Y+2, r25	; 0x02
    2a6c:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr_chA = a_ptr ;
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	9a 81       	ldd	r25, Y+2	; 0x02
    2a72:	90 93 06 01 	sts	0x0106, r25
    2a76:	80 93 05 01 	sts	0x0105, r24
}
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	08 95       	ret

00002a84 <Timer1_setCallBackChB>:
/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBackChB(void(*a_ptr)(void))
{
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	00 d0       	rcall	.+0      	; 0x2a8a <Timer1_setCallBackChB+0x6>
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
    2a8e:	9a 83       	std	Y+2, r25	; 0x02
    2a90:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr_chB = a_ptr ;
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	9a 81       	ldd	r25, Y+2	; 0x02
    2a96:	90 93 04 01 	sts	0x0104, r25
    2a9a:	80 93 03 01 	sts	0x0103, r24
}
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <__vector_8>:



ISR(TIMER1_OVF_vect)
{
    2aa8:	1f 92       	push	r1
    2aaa:	0f 92       	push	r0
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	0f 92       	push	r0
    2ab0:	11 24       	eor	r1, r1
    2ab2:	2f 93       	push	r18
    2ab4:	3f 93       	push	r19
    2ab6:	4f 93       	push	r20
    2ab8:	5f 93       	push	r21
    2aba:	6f 93       	push	r22
    2abc:	7f 93       	push	r23
    2abe:	8f 93       	push	r24
    2ac0:	9f 93       	push	r25
    2ac2:	af 93       	push	r26
    2ac4:	bf 93       	push	r27
    2ac6:	ef 93       	push	r30
    2ac8:	ff 93       	push	r31
    2aca:	df 93       	push	r29
    2acc:	cf 93       	push	r28
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr != NULL_PTR)
    2ad2:	80 91 01 01 	lds	r24, 0x0101
    2ad6:	90 91 02 01 	lds	r25, 0x0102
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	29 f0       	breq	.+10     	; 0x2ae8 <__vector_8+0x40>
	{
		(*g_CallBackPtr)();
    2ade:	e0 91 01 01 	lds	r30, 0x0101
    2ae2:	f0 91 02 01 	lds	r31, 0x0102
    2ae6:	09 95       	icall
	}
}
    2ae8:	cf 91       	pop	r28
    2aea:	df 91       	pop	r29
    2aec:	ff 91       	pop	r31
    2aee:	ef 91       	pop	r30
    2af0:	bf 91       	pop	r27
    2af2:	af 91       	pop	r26
    2af4:	9f 91       	pop	r25
    2af6:	8f 91       	pop	r24
    2af8:	7f 91       	pop	r23
    2afa:	6f 91       	pop	r22
    2afc:	5f 91       	pop	r21
    2afe:	4f 91       	pop	r20
    2b00:	3f 91       	pop	r19
    2b02:	2f 91       	pop	r18
    2b04:	0f 90       	pop	r0
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	0f 90       	pop	r0
    2b0a:	1f 90       	pop	r1
    2b0c:	18 95       	reti

00002b0e <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    2b0e:	1f 92       	push	r1
    2b10:	0f 92       	push	r0
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	0f 92       	push	r0
    2b16:	11 24       	eor	r1, r1
    2b18:	2f 93       	push	r18
    2b1a:	3f 93       	push	r19
    2b1c:	4f 93       	push	r20
    2b1e:	5f 93       	push	r21
    2b20:	6f 93       	push	r22
    2b22:	7f 93       	push	r23
    2b24:	8f 93       	push	r24
    2b26:	9f 93       	push	r25
    2b28:	af 93       	push	r26
    2b2a:	bf 93       	push	r27
    2b2c:	ef 93       	push	r30
    2b2e:	ff 93       	push	r31
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr_chA != NULL_PTR)
    2b38:	80 91 05 01 	lds	r24, 0x0105
    2b3c:	90 91 06 01 	lds	r25, 0x0106
    2b40:	00 97       	sbiw	r24, 0x00	; 0
    2b42:	29 f0       	breq	.+10     	; 0x2b4e <__vector_6+0x40>
	{
		(*g_CallBackPtr_chA)();
    2b44:	e0 91 05 01 	lds	r30, 0x0105
    2b48:	f0 91 06 01 	lds	r31, 0x0106
    2b4c:	09 95       	icall
	}
}
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	ff 91       	pop	r31
    2b54:	ef 91       	pop	r30
    2b56:	bf 91       	pop	r27
    2b58:	af 91       	pop	r26
    2b5a:	9f 91       	pop	r25
    2b5c:	8f 91       	pop	r24
    2b5e:	7f 91       	pop	r23
    2b60:	6f 91       	pop	r22
    2b62:	5f 91       	pop	r21
    2b64:	4f 91       	pop	r20
    2b66:	3f 91       	pop	r19
    2b68:	2f 91       	pop	r18
    2b6a:	0f 90       	pop	r0
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	0f 90       	pop	r0
    2b70:	1f 90       	pop	r1
    2b72:	18 95       	reti

00002b74 <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    2b74:	1f 92       	push	r1
    2b76:	0f 92       	push	r0
    2b78:	0f b6       	in	r0, 0x3f	; 63
    2b7a:	0f 92       	push	r0
    2b7c:	11 24       	eor	r1, r1
    2b7e:	2f 93       	push	r18
    2b80:	3f 93       	push	r19
    2b82:	4f 93       	push	r20
    2b84:	5f 93       	push	r21
    2b86:	6f 93       	push	r22
    2b88:	7f 93       	push	r23
    2b8a:	8f 93       	push	r24
    2b8c:	9f 93       	push	r25
    2b8e:	af 93       	push	r26
    2b90:	bf 93       	push	r27
    2b92:	ef 93       	push	r30
    2b94:	ff 93       	push	r31
    2b96:	df 93       	push	r29
    2b98:	cf 93       	push	r28
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr_chB != NULL_PTR)
    2b9e:	80 91 03 01 	lds	r24, 0x0103
    2ba2:	90 91 04 01 	lds	r25, 0x0104
    2ba6:	00 97       	sbiw	r24, 0x00	; 0
    2ba8:	29 f0       	breq	.+10     	; 0x2bb4 <__vector_7+0x40>
	{
		(*g_CallBackPtr_chB)();
    2baa:	e0 91 03 01 	lds	r30, 0x0103
    2bae:	f0 91 04 01 	lds	r31, 0x0104
    2bb2:	09 95       	icall
	}
}
    2bb4:	cf 91       	pop	r28
    2bb6:	df 91       	pop	r29
    2bb8:	ff 91       	pop	r31
    2bba:	ef 91       	pop	r30
    2bbc:	bf 91       	pop	r27
    2bbe:	af 91       	pop	r26
    2bc0:	9f 91       	pop	r25
    2bc2:	8f 91       	pop	r24
    2bc4:	7f 91       	pop	r23
    2bc6:	6f 91       	pop	r22
    2bc8:	5f 91       	pop	r21
    2bca:	4f 91       	pop	r20
    2bcc:	3f 91       	pop	r19
    2bce:	2f 91       	pop	r18
    2bd0:	0f 90       	pop	r0
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	0f 90       	pop	r0
    2bd6:	1f 90       	pop	r1
    2bd8:	18 95       	reti

00002bda <timer1_deinit>:

void timer1_deinit (void)
{
    2bda:	df 93       	push	r29
    2bdc:	cf 93       	push	r28
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    2be2:	ef e4       	ldi	r30, 0x4F	; 79
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	10 82       	st	Z, r1
	TCCR1B = 0;
    2be8:	ee e4       	ldi	r30, 0x4E	; 78
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	10 82       	st	Z, r1
	TCNT1 = 0;
    2bee:	ec e4       	ldi	r30, 0x4C	; 76
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	11 82       	std	Z+1, r1	; 0x01
    2bf4:	10 82       	st	Z, r1
	OCR1A  = 0;
    2bf6:	ea e4       	ldi	r30, 0x4A	; 74
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	11 82       	std	Z+1, r1	; 0x01
    2bfc:	10 82       	st	Z, r1
	OCR1B  = 0;
    2bfe:	e8 e4       	ldi	r30, 0x48	; 72
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	11 82       	std	Z+1, r1	; 0x01
    2c04:	10 82       	st	Z, r1
	TIMSK &= ~(1<<OCIE1A) & (~(1<<OCIE1B));
    2c06:	a9 e5       	ldi	r26, 0x59	; 89
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	e9 e5       	ldi	r30, 0x59	; 89
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	87 7e       	andi	r24, 0xE7	; 231
    2c12:	8c 93       	st	X, r24
}
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	08 95       	ret

00002c1a <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    2c1a:	df 93       	push	r29
    2c1c:	cf 93       	push	r28
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2c22:	eb e2       	ldi	r30, 0x2B	; 43
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	82 e0       	ldi	r24, 0x02	; 2
    2c28:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2c2a:	ea e2       	ldi	r30, 0x2A	; 42
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
    2c2e:	88 e1       	ldi	r24, 0x18	; 24
    2c30:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    2c32:	e0 e4       	ldi	r30, 0x40	; 64
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	86 e8       	ldi	r24, 0x86	; 134
    2c38:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2c3a:	e0 e4       	ldi	r30, 0x40	; 64
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2c40:	e9 e2       	ldi	r30, 0x29	; 41
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	8c e0       	ldi	r24, 0x0C	; 12
    2c46:	80 83       	st	Z, r24
}
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	0f 92       	push	r0
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2c5a:	eb e2       	ldi	r30, 0x2B	; 43
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	80 81       	ld	r24, Z
    2c60:	88 2f       	mov	r24, r24
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	80 72       	andi	r24, 0x20	; 32
    2c66:	90 70       	andi	r25, 0x00	; 0
    2c68:	00 97       	sbiw	r24, 0x00	; 0
    2c6a:	b9 f3       	breq	.-18     	; 0x2c5a <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    2c6c:	ec e2       	ldi	r30, 0x2C	; 44
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    2c74:	0f 90       	pop	r0
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <UART_receiveByte>:

uint8 UART_receiveByte(void)
{
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2c84:	eb e2       	ldi	r30, 0x2B	; 43
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	80 81       	ld	r24, Z
    2c8a:	88 23       	and	r24, r24
    2c8c:	dc f7       	brge	.-10     	; 0x2c84 <UART_receiveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2c8e:	ec e2       	ldi	r30, 0x2C	; 44
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
}
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	08 95       	ret

00002c9a <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2c9a:	df 93       	push	r29
    2c9c:	cf 93       	push	r28
    2c9e:	00 d0       	rcall	.+0      	; 0x2ca0 <UART_sendString+0x6>
    2ca0:	0f 92       	push	r0
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	9b 83       	std	Y+3, r25	; 0x03
    2ca8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2caa:	19 82       	std	Y+1, r1	; 0x01
    2cac:	0e c0       	rjmp	.+28     	; 0x2cca <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	28 2f       	mov	r18, r24
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb8:	fc 01       	movw	r30, r24
    2cba:	e2 0f       	add	r30, r18
    2cbc:	f3 1f       	adc	r31, r19
    2cbe:	80 81       	ld	r24, Z
    2cc0:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <UART_sendByte>
		i++;
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	8f 5f       	subi	r24, 0xFF	; 255
    2cc8:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
    2ccc:	28 2f       	mov	r18, r24
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	e2 0f       	add	r30, r18
    2cd8:	f3 1f       	adc	r31, r19
    2cda:	80 81       	ld	r24, Z
    2cdc:	88 23       	and	r24, r24
    2cde:	39 f7       	brne	.-50     	; 0x2cae <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	08 95       	ret

00002cec <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2cec:	0f 93       	push	r16
    2cee:	1f 93       	push	r17
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	00 d0       	rcall	.+0      	; 0x2cf6 <UART_receiveString+0xa>
    2cf6:	0f 92       	push	r0
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
    2cfc:	9b 83       	std	Y+3, r25	; 0x03
    2cfe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d00:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_receiveByte();
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	28 2f       	mov	r18, r24
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0c:	8c 01       	movw	r16, r24
    2d0e:	02 0f       	add	r16, r18
    2d10:	13 1f       	adc	r17, r19
    2d12:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <UART_receiveByte>
    2d16:	f8 01       	movw	r30, r16
    2d18:	80 83       	st	Z, r24
    2d1a:	0f c0       	rjmp	.+30     	; 0x2d3a <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	8f 5f       	subi	r24, 0xFF	; 255
    2d20:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	28 2f       	mov	r18, r24
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2c:	8c 01       	movw	r16, r24
    2d2e:	02 0f       	add	r16, r18
    2d30:	13 1f       	adc	r17, r19
    2d32:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <UART_receiveByte>
    2d36:	f8 01       	movw	r30, r16
    2d38:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_receiveByte();
	while(Str[i] != '#')
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	28 2f       	mov	r18, r24
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	8a 81       	ldd	r24, Y+2	; 0x02
    2d42:	9b 81       	ldd	r25, Y+3	; 0x03
    2d44:	fc 01       	movw	r30, r24
    2d46:	e2 0f       	add	r30, r18
    2d48:	f3 1f       	adc	r31, r19
    2d4a:	80 81       	ld	r24, Z
    2d4c:	83 32       	cpi	r24, 0x23	; 35
    2d4e:	31 f7       	brne	.-52     	; 0x2d1c <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_receiveByte();
	}
	Str[i] = '\0';
    2d50:	89 81       	ldd	r24, Y+1	; 0x01
    2d52:	28 2f       	mov	r18, r24
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	8a 81       	ldd	r24, Y+2	; 0x02
    2d58:	9b 81       	ldd	r25, Y+3	; 0x03
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	e2 0f       	add	r30, r18
    2d5e:	f3 1f       	adc	r31, r19
    2d60:	10 82       	st	Z, r1
}
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	1f 91       	pop	r17
    2d6e:	0f 91       	pop	r16
    2d70:	08 95       	ret

00002d72 <__prologue_saves__>:
    2d72:	2f 92       	push	r2
    2d74:	3f 92       	push	r3
    2d76:	4f 92       	push	r4
    2d78:	5f 92       	push	r5
    2d7a:	6f 92       	push	r6
    2d7c:	7f 92       	push	r7
    2d7e:	8f 92       	push	r8
    2d80:	9f 92       	push	r9
    2d82:	af 92       	push	r10
    2d84:	bf 92       	push	r11
    2d86:	cf 92       	push	r12
    2d88:	df 92       	push	r13
    2d8a:	ef 92       	push	r14
    2d8c:	ff 92       	push	r15
    2d8e:	0f 93       	push	r16
    2d90:	1f 93       	push	r17
    2d92:	cf 93       	push	r28
    2d94:	df 93       	push	r29
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
    2d9a:	ca 1b       	sub	r28, r26
    2d9c:	db 0b       	sbc	r29, r27
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	de bf       	out	0x3e, r29	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	cd bf       	out	0x3d, r28	; 61
    2da8:	09 94       	ijmp

00002daa <__epilogue_restores__>:
    2daa:	2a 88       	ldd	r2, Y+18	; 0x12
    2dac:	39 88       	ldd	r3, Y+17	; 0x11
    2dae:	48 88       	ldd	r4, Y+16	; 0x10
    2db0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2db2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2db4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2db6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2db8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dba:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dbc:	b9 84       	ldd	r11, Y+9	; 0x09
    2dbe:	c8 84       	ldd	r12, Y+8	; 0x08
    2dc0:	df 80       	ldd	r13, Y+7	; 0x07
    2dc2:	ee 80       	ldd	r14, Y+6	; 0x06
    2dc4:	fd 80       	ldd	r15, Y+5	; 0x05
    2dc6:	0c 81       	ldd	r16, Y+4	; 0x04
    2dc8:	1b 81       	ldd	r17, Y+3	; 0x03
    2dca:	aa 81       	ldd	r26, Y+2	; 0x02
    2dcc:	b9 81       	ldd	r27, Y+1	; 0x01
    2dce:	ce 0f       	add	r28, r30
    2dd0:	d1 1d       	adc	r29, r1
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	f8 94       	cli
    2dd6:	de bf       	out	0x3e, r29	; 62
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	cd bf       	out	0x3d, r28	; 61
    2ddc:	ed 01       	movw	r28, r26
    2dde:	08 95       	ret

00002de0 <itoa>:
    2de0:	fb 01       	movw	r30, r22
    2de2:	9f 01       	movw	r18, r30
    2de4:	e8 94       	clt
    2de6:	42 30       	cpi	r20, 0x02	; 2
    2de8:	c4 f0       	brlt	.+48     	; 0x2e1a <itoa+0x3a>
    2dea:	45 32       	cpi	r20, 0x25	; 37
    2dec:	b4 f4       	brge	.+44     	; 0x2e1a <itoa+0x3a>
    2dee:	4a 30       	cpi	r20, 0x0A	; 10
    2df0:	29 f4       	brne	.+10     	; 0x2dfc <itoa+0x1c>
    2df2:	97 fb       	bst	r25, 7
    2df4:	1e f4       	brtc	.+6      	; 0x2dfc <itoa+0x1c>
    2df6:	90 95       	com	r25
    2df8:	81 95       	neg	r24
    2dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2dfc:	64 2f       	mov	r22, r20
    2dfe:	77 27       	eor	r23, r23
    2e00:	0e 94 21 17 	call	0x2e42	; 0x2e42 <__udivmodhi4>
    2e04:	80 5d       	subi	r24, 0xD0	; 208
    2e06:	8a 33       	cpi	r24, 0x3A	; 58
    2e08:	0c f0       	brlt	.+2      	; 0x2e0c <itoa+0x2c>
    2e0a:	89 5d       	subi	r24, 0xD9	; 217
    2e0c:	81 93       	st	Z+, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	a1 f7       	brne	.-24     	; 0x2dfc <itoa+0x1c>
    2e14:	16 f4       	brtc	.+4      	; 0x2e1a <itoa+0x3a>
    2e16:	5d e2       	ldi	r21, 0x2D	; 45
    2e18:	51 93       	st	Z+, r21
    2e1a:	10 82       	st	Z, r1
    2e1c:	c9 01       	movw	r24, r18
    2e1e:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <strrev>

00002e22 <strrev>:
    2e22:	dc 01       	movw	r26, r24
    2e24:	fc 01       	movw	r30, r24
    2e26:	67 2f       	mov	r22, r23
    2e28:	71 91       	ld	r23, Z+
    2e2a:	77 23       	and	r23, r23
    2e2c:	e1 f7       	brne	.-8      	; 0x2e26 <strrev+0x4>
    2e2e:	32 97       	sbiw	r30, 0x02	; 2
    2e30:	04 c0       	rjmp	.+8      	; 0x2e3a <strrev+0x18>
    2e32:	7c 91       	ld	r23, X
    2e34:	6d 93       	st	X+, r22
    2e36:	70 83       	st	Z, r23
    2e38:	62 91       	ld	r22, -Z
    2e3a:	ae 17       	cp	r26, r30
    2e3c:	bf 07       	cpc	r27, r31
    2e3e:	c8 f3       	brcs	.-14     	; 0x2e32 <strrev+0x10>
    2e40:	08 95       	ret

00002e42 <__udivmodhi4>:
    2e42:	aa 1b       	sub	r26, r26
    2e44:	bb 1b       	sub	r27, r27
    2e46:	51 e1       	ldi	r21, 0x11	; 17
    2e48:	07 c0       	rjmp	.+14     	; 0x2e58 <__udivmodhi4_ep>

00002e4a <__udivmodhi4_loop>:
    2e4a:	aa 1f       	adc	r26, r26
    2e4c:	bb 1f       	adc	r27, r27
    2e4e:	a6 17       	cp	r26, r22
    2e50:	b7 07       	cpc	r27, r23
    2e52:	10 f0       	brcs	.+4      	; 0x2e58 <__udivmodhi4_ep>
    2e54:	a6 1b       	sub	r26, r22
    2e56:	b7 0b       	sbc	r27, r23

00002e58 <__udivmodhi4_ep>:
    2e58:	88 1f       	adc	r24, r24
    2e5a:	99 1f       	adc	r25, r25
    2e5c:	5a 95       	dec	r21
    2e5e:	a9 f7       	brne	.-22     	; 0x2e4a <__udivmodhi4_loop>
    2e60:	80 95       	com	r24
    2e62:	90 95       	com	r25
    2e64:	bc 01       	movw	r22, r24
    2e66:	cd 01       	movw	r24, r26
    2e68:	08 95       	ret

00002e6a <_exit>:
    2e6a:	f8 94       	cli

00002e6c <__stop_program>:
    2e6c:	ff cf       	rjmp	.-2      	; 0x2e6c <__stop_program>
