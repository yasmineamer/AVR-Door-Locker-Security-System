
final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003dae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  00003dae  00003e42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800110  00800110  00003ef2  2**0
                  ALLOC
  3 .stab         00003b70  00000000  00000000  00003ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012e5  00000000  00000000  00007a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008d49  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008e89  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ac42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000bb2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c8dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ca3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ccc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d497  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 27 1d 	jmp	0x3a4e	; 0x3a4e <__vector_6>
      1c:	0c 94 5a 1d 	jmp	0x3ab4	; 0x3ab4 <__vector_7>
      20:	0c 94 f4 1c 	jmp	0x39e8	; 0x39e8 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 31       	cpi	r26, 0x10	; 16
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e1       	ldi	r26, 0x10	; 16
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 31       	cpi	r26, 0x1C	; 28
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 40 14 	call	0x2880	; 0x2880 <main>
      8a:	0c 94 d5 1e 	jmp	0x3daa	; 0x3daa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e0       	ldi	r26, 0x03	; 3
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 81 1e 	jmp	0x3d02	; 0x3d02 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 81 1e 	jmp	0x3d02	; 0x3d02 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 59 1e 	jmp	0x3cb2	; 0x3cb2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 75 1e 	jmp	0x3cea	; 0x3cea <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 81 1e 	jmp	0x3d02	; 0x3d02 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 81 1e 	jmp	0x3d02	; 0x3d02 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 65 1e 	jmp	0x3cca	; 0x3cca <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 81 1e 	jmp	0x3d02	; 0x3d02 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 69 1e 	jmp	0x3cd2	; 0x3cd2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 85 1e 	jmp	0x3d0a	; 0x3d0a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_14>:
#include "ADC.h"

volatile uint16 g_adcResult = 0;

ISR (ADC_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	8f 93       	push	r24
     b52:	9f 93       	push	r25
     b54:	ef 93       	push	r30
     b56:	ff 93       	push	r31
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
	g_adcResult = ADC ;
     b60:	e4 e2       	ldi	r30, 0x24	; 36
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	91 81       	ldd	r25, Z+1	; 0x01
     b68:	90 93 11 01 	sts	0x0111, r25
     b6c:	80 93 10 01 	sts	0x0110, r24
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	ff 91       	pop	r31
     b76:	ef 91       	pop	r30
     b78:	9f 91       	pop	r25
     b7a:	8f 91       	pop	r24
     b7c:	0f 90       	pop	r0
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	0f 90       	pop	r0
     b82:	1f 90       	pop	r1
     b84:	18 95       	reti

00000b86 <ADC_init>:


void ADC_init(const ADC_configType *config_ptr)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <ADC_init+0x6>
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	9a 83       	std	Y+2, r25	; 0x02
     b92:	89 83       	std	Y+1, r24	; 0x01
	/*Adjust Vref*/
	ADMUX =((config_ptr -> vref)<<6);
     b94:	a7 e2       	ldi	r26, 0x27	; 39
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e9 81       	ldd	r30, Y+1	; 0x01
     b9a:	fa 81       	ldd	r31, Y+2	; 0x02
     b9c:	80 81       	ld	r24, Z
     b9e:	82 95       	swap	r24
     ba0:	88 0f       	add	r24, r24
     ba2:	88 0f       	add	r24, r24
     ba4:	80 7c       	andi	r24, 0xC0	; 192
     ba6:	8c 93       	st	X, r24
	/*enable ADC
	 * choose ADC Clock
	 * Enable or disable interrupt if conversion complete
	 */
	ADCSRA = (1<<ADEN) | ((config_ptr -> interrupt)<<ADIE) | (config_ptr ->clk);
     ba8:	a6 e2       	ldi	r26, 0x26	; 38
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	e9 81       	ldd	r30, Y+1	; 0x01
     bae:	fa 81       	ldd	r31, Y+2	; 0x02
     bb0:	81 81       	ldd	r24, Z+1	; 0x01
     bb2:	88 2f       	mov	r24, r24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	98 2f       	mov	r25, r24
     bc4:	90 68       	ori	r25, 0x80	; 128
     bc6:	e9 81       	ldd	r30, Y+1	; 0x01
     bc8:	fa 81       	ldd	r31, Y+2	; 0x02
     bca:	82 81       	ldd	r24, Z+2	; 0x02
     bcc:	89 2b       	or	r24, r25
     bce:	8c 93       	st	X, r24

}
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	cf 91       	pop	r28
     bd6:	df 91       	pop	r29
     bd8:	08 95       	ret

00000bda <ADC_readChannel>:

void ADC_readChannel(uint8 channel_num)
{
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	0f 92       	push	r0
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX =(ADMUX & 0xE0) | (channel_num & 0x07);
     be6:	a7 e2       	ldi	r26, 0x27	; 39
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e7 e2       	ldi	r30, 0x27	; 39
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	98 2f       	mov	r25, r24
     bf2:	90 7e       	andi	r25, 0xE0	; 224
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	87 70       	andi	r24, 0x07	; 7
     bf8:	89 2b       	or	r24, r25
     bfa:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADSC);
     bfc:	a6 e2       	ldi	r26, 0x26	; 38
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e6 e2       	ldi	r30, 0x26	; 38
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	80 64       	ori	r24, 0x40	; 64
     c08:	8c 93       	st	X, r24

	/* polling if interrupt Disabled */
	if(BIT_IS_CLEAR(ADCSRA ,ADIE))
     c0a:	e6 e2       	ldi	r30, 0x26	; 38
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	88 70       	andi	r24, 0x08	; 8
     c16:	90 70       	andi	r25, 0x00	; 0
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	c1 f4       	brne	.+48     	; 0xc4c <ADC_readChannel+0x72>
	{

		while(BIT_IS_CLEAR(ADCSRA,ADIF));
     c1c:	e6 e2       	ldi	r30, 0x26	; 38
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	88 2f       	mov	r24, r24
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	80 71       	andi	r24, 0x10	; 16
     c28:	90 70       	andi	r25, 0x00	; 0
     c2a:	00 97       	sbiw	r24, 0x00	; 0
     c2c:	b9 f3       	breq	.-18     	; 0xc1c <ADC_readChannel+0x42>
		SET_BIT(ADCSRA ,ADIF);
     c2e:	a6 e2       	ldi	r26, 0x26	; 38
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e6 e2       	ldi	r30, 0x26	; 38
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	80 61       	ori	r24, 0x10	; 16
     c3a:	8c 93       	st	X, r24
		g_adcResult = ADC ;
     c3c:	e4 e2       	ldi	r30, 0x24	; 36
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	91 81       	ldd	r25, Z+1	; 0x01
     c44:	90 93 11 01 	sts	0x0111, r25
     c48:	80 93 10 01 	sts	0x0110, r24
	}

}
     c4c:	0f 90       	pop	r0
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <modules_init>:
 * Description : initialize Modules needed to interface with user
 * enable global interrupt bit
 */

void modules_init (void)
{
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	cd b7       	in	r28, 0x3d	; 61
     c5a:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
     c5c:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_init>
	UART_init();
     c60:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <UART_init>
	SREG |= (1<<7);
     c64:	af e5       	ldi	r26, 0x5F	; 95
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	ef e5       	ldi	r30, 0x5F	; 95
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	80 68       	ori	r24, 0x80	; 128
     c70:	8c 93       	st	X, r24

}
     c72:	cf 91       	pop	r28
     c74:	df 91       	pop	r29
     c76:	08 95       	ret

00000c78 <Timer1_setup>:
/*
 * Description : initialize Timer1 CTC + set call back to required function
 */
void Timer1_setup (timer_config * config_ptr)
{
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	00 d0       	rcall	.+0      	; 0xc7e <Timer1_setup+0x6>
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	9a 83       	std	Y+2, r25	; 0x02
     c84:	89 83       	std	Y+1, r24	; 0x01
	timer1_ctc_chA_init(config_ptr, 9770);
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	9a 81       	ldd	r25, Y+2	; 0x02
     c8a:	6a e2       	ldi	r22, 0x2A	; 42
     c8c:	76 e2       	ldi	r23, 0x26	; 38
     c8e:	0e 94 0c 1c 	call	0x3818	; 0x3818 <timer1_ctc_chA_init>
	Timer1_setCallBackChA(openFlag);
     c92:	82 e5       	ldi	r24, 0x52	; 82
     c94:	96 e0       	ldi	r25, 0x06	; 6
     c96:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <Timer1_setCallBackChA>
}
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	cf 91       	pop	r28
     ca0:	df 91       	pop	r29
     ca2:	08 95       	ret

00000ca4 <openFlag>:

/*
 * Description : these two functions changes the value of polling flags
 */
void openFlag (void)
{
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
	open_flag = 1;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	80 93 12 01 	sts	0x0112, r24
}
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <closeFlag>:



void closeFlag (void)
{
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
	close_flag = 1;
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	80 93 13 01 	sts	0x0113, r24
}
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <user_setPW>:
 * and send it to the 2nd MCU
 *
 */

void user_setPW (void)
{
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	ca 56       	subi	r28, 0x6A	; 106
     cda:	d0 40       	sbci	r29, 0x00	; 0
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61

	uint8 password_1[pass_length+2];

	uint8 i;

	if(visits == 0)
     ce6:	80 91 15 01 	lds	r24, 0x0115
     cea:	88 23       	and	r24, r24
     cec:	09 f0       	breq	.+2      	; 0xcf0 <user_setPW+0x24>
     cee:	c2 c0       	rjmp	.+388    	; 0xe74 <user_setPW+0x1a8>
	{
		visits ++;
     cf0:	80 91 15 01 	lds	r24, 0x0115
     cf4:	8f 5f       	subi	r24, 0xFF	; 255
     cf6:	80 93 15 01 	sts	0x0115, r24
		LCD_clearScreen();
     cfa:	0e 94 a3 1b 	call	0x3746	; 0x3746 <LCD_clearScreen>
		LCD_goToRowColumn(0,0);
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_goToRowColumn>
		LCD_displayString(" **WELCOME** ");
     d06:	80 e6       	ldi	r24, 0x60	; 96
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <LCD_displayString>
     d0e:	fe 01       	movw	r30, r28
     d10:	e1 5a       	subi	r30, 0xA1	; 161
     d12:	ff 4f       	sbci	r31, 0xFF	; 255
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e4       	ldi	r25, 0x40	; 64
     d18:	ac e9       	ldi	r26, 0x9C	; 156
     d1a:	b5 e4       	ldi	r27, 0x45	; 69
     d1c:	80 83       	st	Z, r24
     d1e:	91 83       	std	Z+1, r25	; 0x01
     d20:	a2 83       	std	Z+2, r26	; 0x02
     d22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d24:	8e 01       	movw	r16, r28
     d26:	05 5a       	subi	r16, 0xA5	; 165
     d28:	1f 4f       	sbci	r17, 0xFF	; 255
     d2a:	fe 01       	movw	r30, r28
     d2c:	e1 5a       	subi	r30, 0xA1	; 161
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	60 81       	ld	r22, Z
     d32:	71 81       	ldd	r23, Z+1	; 0x01
     d34:	82 81       	ldd	r24, Z+2	; 0x02
     d36:	93 81       	ldd	r25, Z+3	; 0x03
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	4a e7       	ldi	r20, 0x7A	; 122
     d3e:	53 e4       	ldi	r21, 0x43	; 67
     d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	f8 01       	movw	r30, r16
     d4a:	80 83       	st	Z, r24
     d4c:	91 83       	std	Z+1, r25	; 0x01
     d4e:	a2 83       	std	Z+2, r26	; 0x02
     d50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d52:	fe 01       	movw	r30, r28
     d54:	e5 5a       	subi	r30, 0xA5	; 165
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	60 81       	ld	r22, Z
     d5a:	71 81       	ldd	r23, Z+1	; 0x01
     d5c:	82 81       	ldd	r24, Z+2	; 0x02
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e8       	ldi	r20, 0x80	; 128
     d66:	5f e3       	ldi	r21, 0x3F	; 63
     d68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d6c:	88 23       	and	r24, r24
     d6e:	44 f4       	brge	.+16     	; 0xd80 <user_setPW+0xb4>
		__ticks = 1;
     d70:	fe 01       	movw	r30, r28
     d72:	e7 5a       	subi	r30, 0xA7	; 167
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	91 83       	std	Z+1, r25	; 0x01
     d7c:	80 83       	st	Z, r24
     d7e:	64 c0       	rjmp	.+200    	; 0xe48 <user_setPW+0x17c>
	else if (__tmp > 65535)
     d80:	fe 01       	movw	r30, r28
     d82:	e5 5a       	subi	r30, 0xA5	; 165
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	60 81       	ld	r22, Z
     d88:	71 81       	ldd	r23, Z+1	; 0x01
     d8a:	82 81       	ldd	r24, Z+2	; 0x02
     d8c:	93 81       	ldd	r25, Z+3	; 0x03
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	3f ef       	ldi	r19, 0xFF	; 255
     d92:	4f e7       	ldi	r20, 0x7F	; 127
     d94:	57 e4       	ldi	r21, 0x47	; 71
     d96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d9a:	18 16       	cp	r1, r24
     d9c:	0c f0       	brlt	.+2      	; 0xda0 <user_setPW+0xd4>
     d9e:	43 c0       	rjmp	.+134    	; 0xe26 <user_setPW+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da0:	fe 01       	movw	r30, r28
     da2:	e1 5a       	subi	r30, 0xA1	; 161
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	60 81       	ld	r22, Z
     da8:	71 81       	ldd	r23, Z+1	; 0x01
     daa:	82 81       	ldd	r24, Z+2	; 0x02
     dac:	93 81       	ldd	r25, Z+3	; 0x03
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	40 e2       	ldi	r20, 0x20	; 32
     db4:	51 e4       	ldi	r21, 0x41	; 65
     db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	8e 01       	movw	r16, r28
     dc0:	07 5a       	subi	r16, 0xA7	; 167
     dc2:	1f 4f       	sbci	r17, 0xFF	; 255
     dc4:	bc 01       	movw	r22, r24
     dc6:	cd 01       	movw	r24, r26
     dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	f8 01       	movw	r30, r16
     dd2:	91 83       	std	Z+1, r25	; 0x01
     dd4:	80 83       	st	Z, r24
     dd6:	1f c0       	rjmp	.+62     	; 0xe16 <user_setPW+0x14a>
     dd8:	fe 01       	movw	r30, r28
     dda:	e9 5a       	subi	r30, 0xA9	; 169
     ddc:	ff 4f       	sbci	r31, 0xFF	; 255
     dde:	89 e1       	ldi	r24, 0x19	; 25
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	91 83       	std	Z+1, r25	; 0x01
     de4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     de6:	fe 01       	movw	r30, r28
     de8:	e9 5a       	subi	r30, 0xA9	; 169
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	80 81       	ld	r24, Z
     dee:	91 81       	ldd	r25, Z+1	; 0x01
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	f1 f7       	brne	.-4      	; 0xdf0 <user_setPW+0x124>
     df4:	fe 01       	movw	r30, r28
     df6:	e9 5a       	subi	r30, 0xA9	; 169
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	91 83       	std	Z+1, r25	; 0x01
     dfc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dfe:	de 01       	movw	r26, r28
     e00:	a7 5a       	subi	r26, 0xA7	; 167
     e02:	bf 4f       	sbci	r27, 0xFF	; 255
     e04:	fe 01       	movw	r30, r28
     e06:	e7 5a       	subi	r30, 0xA7	; 167
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	80 81       	ld	r24, Z
     e0c:	91 81       	ldd	r25, Z+1	; 0x01
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	11 96       	adiw	r26, 0x01	; 1
     e12:	9c 93       	st	X, r25
     e14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e16:	fe 01       	movw	r30, r28
     e18:	e7 5a       	subi	r30, 0xA7	; 167
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	80 81       	ld	r24, Z
     e1e:	91 81       	ldd	r25, Z+1	; 0x01
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	d1 f6       	brne	.-76     	; 0xdd8 <user_setPW+0x10c>
     e24:	27 c0       	rjmp	.+78     	; 0xe74 <user_setPW+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e26:	8e 01       	movw	r16, r28
     e28:	07 5a       	subi	r16, 0xA7	; 167
     e2a:	1f 4f       	sbci	r17, 0xFF	; 255
     e2c:	fe 01       	movw	r30, r28
     e2e:	e5 5a       	subi	r30, 0xA5	; 165
     e30:	ff 4f       	sbci	r31, 0xFF	; 255
     e32:	60 81       	ld	r22, Z
     e34:	71 81       	ldd	r23, Z+1	; 0x01
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	f8 01       	movw	r30, r16
     e44:	91 83       	std	Z+1, r25	; 0x01
     e46:	80 83       	st	Z, r24
     e48:	de 01       	movw	r26, r28
     e4a:	ab 5a       	subi	r26, 0xAB	; 171
     e4c:	bf 4f       	sbci	r27, 0xFF	; 255
     e4e:	fe 01       	movw	r30, r28
     e50:	e7 5a       	subi	r30, 0xA7	; 167
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	80 81       	ld	r24, Z
     e56:	91 81       	ldd	r25, Z+1	; 0x01
     e58:	8d 93       	st	X+, r24
     e5a:	9c 93       	st	X, r25
     e5c:	fe 01       	movw	r30, r28
     e5e:	eb 5a       	subi	r30, 0xAB	; 171
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <user_setPW+0x19a>
     e6a:	fe 01       	movw	r30, r28
     e6c:	eb 5a       	subi	r30, 0xAB	; 171
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	80 83       	st	Z, r24
		_delay_ms(5000);
	}


	LCD_clearScreen();
     e74:	0e 94 a3 1b 	call	0x3746	; 0x3746 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Enter Password:  ");
     e78:	2e e6       	ldi	r18, 0x6E	; 110
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	a9 01       	movw	r20, r18
     e82:	0e 94 67 1b 	call	0x36ce	; 0x36ce <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_goToRowColumn>

	for(i = 0; i< pass_length ;i++)
     e8e:	fe 01       	movw	r30, r28
     e90:	ed 59       	subi	r30, 0x9D	; 157
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	10 82       	st	Z, r1
     e96:	de c1       	rjmp	.+956    	; 0x1254 <user_setPW+0x588>
	{
		password_1[i] = KeyPad_getPressedKey();
     e98:	fe 01       	movw	r30, r28
     e9a:	ed 59       	subi	r30, 0x9D	; 157
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	80 81       	ld	r24, Z
     ea0:	08 2f       	mov	r16, r24
     ea2:	10 e0       	ldi	r17, 0x00	; 0
     ea4:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <KeyPad_getPressedKey>
     ea8:	28 2f       	mov	r18, r24
     eaa:	ce 01       	movw	r24, r28
     eac:	8c 59       	subi	r24, 0x9C	; 156
     eae:	9f 4f       	sbci	r25, 0xFF	; 255
     eb0:	fc 01       	movw	r30, r24
     eb2:	e0 0f       	add	r30, r16
     eb4:	f1 1f       	adc	r31, r17
     eb6:	20 83       	st	Z, r18
     eb8:	fe 01       	movw	r30, r28
     eba:	ef 5a       	subi	r30, 0xAF	; 175
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	aa ef       	ldi	r26, 0xFA	; 250
     ec4:	b4 e4       	ldi	r27, 0x44	; 68
     ec6:	80 83       	st	Z, r24
     ec8:	91 83       	std	Z+1, r25	; 0x01
     eca:	a2 83       	std	Z+2, r26	; 0x02
     ecc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ece:	8e 01       	movw	r16, r28
     ed0:	03 5b       	subi	r16, 0xB3	; 179
     ed2:	1f 4f       	sbci	r17, 0xFF	; 255
     ed4:	fe 01       	movw	r30, r28
     ed6:	ef 5a       	subi	r30, 0xAF	; 175
     ed8:	ff 4f       	sbci	r31, 0xFF	; 255
     eda:	60 81       	ld	r22, Z
     edc:	71 81       	ldd	r23, Z+1	; 0x01
     ede:	82 81       	ldd	r24, Z+2	; 0x02
     ee0:	93 81       	ldd	r25, Z+3	; 0x03
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	4a e7       	ldi	r20, 0x7A	; 122
     ee8:	53 e4       	ldi	r21, 0x43	; 67
     eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	f8 01       	movw	r30, r16
     ef4:	80 83       	st	Z, r24
     ef6:	91 83       	std	Z+1, r25	; 0x01
     ef8:	a2 83       	std	Z+2, r26	; 0x02
     efa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     efc:	fe 01       	movw	r30, r28
     efe:	e3 5b       	subi	r30, 0xB3	; 179
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	60 81       	ld	r22, Z
     f04:	71 81       	ldd	r23, Z+1	; 0x01
     f06:	82 81       	ldd	r24, Z+2	; 0x02
     f08:	93 81       	ldd	r25, Z+3	; 0x03
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e8       	ldi	r20, 0x80	; 128
     f10:	5f e3       	ldi	r21, 0x3F	; 63
     f12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f16:	88 23       	and	r24, r24
     f18:	44 f4       	brge	.+16     	; 0xf2a <user_setPW+0x25e>
		__ticks = 1;
     f1a:	fe 01       	movw	r30, r28
     f1c:	e5 5b       	subi	r30, 0xB5	; 181
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	91 83       	std	Z+1, r25	; 0x01
     f26:	80 83       	st	Z, r24
     f28:	64 c0       	rjmp	.+200    	; 0xff2 <user_setPW+0x326>
	else if (__tmp > 65535)
     f2a:	fe 01       	movw	r30, r28
     f2c:	e3 5b       	subi	r30, 0xB3	; 179
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	60 81       	ld	r22, Z
     f32:	71 81       	ldd	r23, Z+1	; 0x01
     f34:	82 81       	ldd	r24, Z+2	; 0x02
     f36:	93 81       	ldd	r25, Z+3	; 0x03
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	3f ef       	ldi	r19, 0xFF	; 255
     f3c:	4f e7       	ldi	r20, 0x7F	; 127
     f3e:	57 e4       	ldi	r21, 0x47	; 71
     f40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f44:	18 16       	cp	r1, r24
     f46:	0c f0       	brlt	.+2      	; 0xf4a <user_setPW+0x27e>
     f48:	43 c0       	rjmp	.+134    	; 0xfd0 <user_setPW+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4a:	fe 01       	movw	r30, r28
     f4c:	ef 5a       	subi	r30, 0xAF	; 175
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	60 81       	ld	r22, Z
     f52:	71 81       	ldd	r23, Z+1	; 0x01
     f54:	82 81       	ldd	r24, Z+2	; 0x02
     f56:	93 81       	ldd	r25, Z+3	; 0x03
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	40 e2       	ldi	r20, 0x20	; 32
     f5e:	51 e4       	ldi	r21, 0x41	; 65
     f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	8e 01       	movw	r16, r28
     f6a:	05 5b       	subi	r16, 0xB5	; 181
     f6c:	1f 4f       	sbci	r17, 0xFF	; 255
     f6e:	bc 01       	movw	r22, r24
     f70:	cd 01       	movw	r24, r26
     f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	f8 01       	movw	r30, r16
     f7c:	91 83       	std	Z+1, r25	; 0x01
     f7e:	80 83       	st	Z, r24
     f80:	1f c0       	rjmp	.+62     	; 0xfc0 <user_setPW+0x2f4>
     f82:	fe 01       	movw	r30, r28
     f84:	e7 5b       	subi	r30, 0xB7	; 183
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	89 e1       	ldi	r24, 0x19	; 25
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	91 83       	std	Z+1, r25	; 0x01
     f8e:	80 83       	st	Z, r24
     f90:	fe 01       	movw	r30, r28
     f92:	e7 5b       	subi	r30, 0xB7	; 183
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <user_setPW+0x2ce>
     f9e:	fe 01       	movw	r30, r28
     fa0:	e7 5b       	subi	r30, 0xB7	; 183
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa8:	de 01       	movw	r26, r28
     faa:	a5 5b       	subi	r26, 0xB5	; 181
     fac:	bf 4f       	sbci	r27, 0xFF	; 255
     fae:	fe 01       	movw	r30, r28
     fb0:	e5 5b       	subi	r30, 0xB5	; 181
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	80 81       	ld	r24, Z
     fb6:	91 81       	ldd	r25, Z+1	; 0x01
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	11 96       	adiw	r26, 0x01	; 1
     fbc:	9c 93       	st	X, r25
     fbe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc0:	fe 01       	movw	r30, r28
     fc2:	e5 5b       	subi	r30, 0xB5	; 181
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	00 97       	sbiw	r24, 0x00	; 0
     fcc:	d1 f6       	brne	.-76     	; 0xf82 <user_setPW+0x2b6>
     fce:	27 c0       	rjmp	.+78     	; 0x101e <user_setPW+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd0:	8e 01       	movw	r16, r28
     fd2:	05 5b       	subi	r16, 0xB5	; 181
     fd4:	1f 4f       	sbci	r17, 0xFF	; 255
     fd6:	fe 01       	movw	r30, r28
     fd8:	e3 5b       	subi	r30, 0xB3	; 179
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	60 81       	ld	r22, Z
     fde:	71 81       	ldd	r23, Z+1	; 0x01
     fe0:	82 81       	ldd	r24, Z+2	; 0x02
     fe2:	93 81       	ldd	r25, Z+3	; 0x03
     fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	f8 01       	movw	r30, r16
     fee:	91 83       	std	Z+1, r25	; 0x01
     ff0:	80 83       	st	Z, r24
     ff2:	de 01       	movw	r26, r28
     ff4:	a9 5b       	subi	r26, 0xB9	; 185
     ff6:	bf 4f       	sbci	r27, 0xFF	; 255
     ff8:	fe 01       	movw	r30, r28
     ffa:	e5 5b       	subi	r30, 0xB5	; 181
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	80 81       	ld	r24, Z
    1000:	91 81       	ldd	r25, Z+1	; 0x01
    1002:	8d 93       	st	X+, r24
    1004:	9c 93       	st	X, r25
    1006:	fe 01       	movw	r30, r28
    1008:	e9 5b       	subi	r30, 0xB9	; 185
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	80 81       	ld	r24, Z
    100e:	91 81       	ldd	r25, Z+1	; 0x01
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	f1 f7       	brne	.-4      	; 0x1010 <user_setPW+0x344>
    1014:	fe 01       	movw	r30, r28
    1016:	e9 5b       	subi	r30, 0xB9	; 185
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	91 83       	std	Z+1, r25	; 0x01
    101c:	80 83       	st	Z, r24
		_delay_ms(2000);
		LCD_intgerToString(password_1[i]);
    101e:	fe 01       	movw	r30, r28
    1020:	ed 59       	subi	r30, 0x9D	; 157
    1022:	ff 4f       	sbci	r31, 0xFF	; 255
    1024:	80 81       	ld	r24, Z
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	ce 01       	movw	r24, r28
    102c:	8c 59       	subi	r24, 0x9C	; 156
    102e:	9f 4f       	sbci	r25, 0xFF	; 255
    1030:	fc 01       	movw	r30, r24
    1032:	e2 0f       	add	r30, r18
    1034:	f3 1f       	adc	r31, r19
    1036:	80 81       	ld	r24, Z
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 80 1b 	call	0x3700	; 0x3700 <LCD_intgerToString>
    1040:	fe 01       	movw	r30, r28
    1042:	ed 5b       	subi	r30, 0xBD	; 189
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	aa e7       	ldi	r26, 0x7A	; 122
    104c:	b4 e4       	ldi	r27, 0x44	; 68
    104e:	80 83       	st	Z, r24
    1050:	91 83       	std	Z+1, r25	; 0x01
    1052:	a2 83       	std	Z+2, r26	; 0x02
    1054:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1056:	8e 01       	movw	r16, r28
    1058:	01 5c       	subi	r16, 0xC1	; 193
    105a:	1f 4f       	sbci	r17, 0xFF	; 255
    105c:	fe 01       	movw	r30, r28
    105e:	ed 5b       	subi	r30, 0xBD	; 189
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	60 81       	ld	r22, Z
    1064:	71 81       	ldd	r23, Z+1	; 0x01
    1066:	82 81       	ldd	r24, Z+2	; 0x02
    1068:	93 81       	ldd	r25, Z+3	; 0x03
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	4a e7       	ldi	r20, 0x7A	; 122
    1070:	53 e4       	ldi	r21, 0x43	; 67
    1072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	f8 01       	movw	r30, r16
    107c:	80 83       	st	Z, r24
    107e:	91 83       	std	Z+1, r25	; 0x01
    1080:	a2 83       	std	Z+2, r26	; 0x02
    1082:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1084:	fe 01       	movw	r30, r28
    1086:	ff 96       	adiw	r30, 0x3f	; 63
    1088:	60 81       	ld	r22, Z
    108a:	71 81       	ldd	r23, Z+1	; 0x01
    108c:	82 81       	ldd	r24, Z+2	; 0x02
    108e:	93 81       	ldd	r25, Z+3	; 0x03
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e8       	ldi	r20, 0x80	; 128
    1096:	5f e3       	ldi	r21, 0x3F	; 63
    1098:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    109c:	88 23       	and	r24, r24
    109e:	2c f4       	brge	.+10     	; 0x10aa <user_setPW+0x3de>
		__ticks = 1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	9e af       	std	Y+62, r25	; 0x3e
    10a6:	8d af       	std	Y+61, r24	; 0x3d
    10a8:	46 c0       	rjmp	.+140    	; 0x1136 <user_setPW+0x46a>
	else if (__tmp > 65535)
    10aa:	fe 01       	movw	r30, r28
    10ac:	ff 96       	adiw	r30, 0x3f	; 63
    10ae:	60 81       	ld	r22, Z
    10b0:	71 81       	ldd	r23, Z+1	; 0x01
    10b2:	82 81       	ldd	r24, Z+2	; 0x02
    10b4:	93 81       	ldd	r25, Z+3	; 0x03
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	3f ef       	ldi	r19, 0xFF	; 255
    10ba:	4f e7       	ldi	r20, 0x7F	; 127
    10bc:	57 e4       	ldi	r21, 0x47	; 71
    10be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10c2:	18 16       	cp	r1, r24
    10c4:	64 f5       	brge	.+88     	; 0x111e <user_setPW+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c6:	fe 01       	movw	r30, r28
    10c8:	ed 5b       	subi	r30, 0xBD	; 189
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	60 81       	ld	r22, Z
    10ce:	71 81       	ldd	r23, Z+1	; 0x01
    10d0:	82 81       	ldd	r24, Z+2	; 0x02
    10d2:	93 81       	ldd	r25, Z+3	; 0x03
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e2       	ldi	r20, 0x20	; 32
    10da:	51 e4       	ldi	r21, 0x41	; 65
    10dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	bc 01       	movw	r22, r24
    10e6:	cd 01       	movw	r24, r26
    10e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	9e af       	std	Y+62, r25	; 0x3e
    10f2:	8d af       	std	Y+61, r24	; 0x3d
    10f4:	0f c0       	rjmp	.+30     	; 0x1114 <user_setPW+0x448>
    10f6:	89 e1       	ldi	r24, 0x19	; 25
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	9c af       	std	Y+60, r25	; 0x3c
    10fc:	8b af       	std	Y+59, r24	; 0x3b
    10fe:	8b ad       	ldd	r24, Y+59	; 0x3b
    1100:	9c ad       	ldd	r25, Y+60	; 0x3c
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <user_setPW+0x436>
    1106:	9c af       	std	Y+60, r25	; 0x3c
    1108:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    110a:	8d ad       	ldd	r24, Y+61	; 0x3d
    110c:	9e ad       	ldd	r25, Y+62	; 0x3e
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	9e af       	std	Y+62, r25	; 0x3e
    1112:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1114:	8d ad       	ldd	r24, Y+61	; 0x3d
    1116:	9e ad       	ldd	r25, Y+62	; 0x3e
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	69 f7       	brne	.-38     	; 0x10f6 <user_setPW+0x42a>
    111c:	16 c0       	rjmp	.+44     	; 0x114a <user_setPW+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    111e:	fe 01       	movw	r30, r28
    1120:	ff 96       	adiw	r30, 0x3f	; 63
    1122:	60 81       	ld	r22, Z
    1124:	71 81       	ldd	r23, Z+1	; 0x01
    1126:	82 81       	ldd	r24, Z+2	; 0x02
    1128:	93 81       	ldd	r25, Z+3	; 0x03
    112a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	9e af       	std	Y+62, r25	; 0x3e
    1134:	8d af       	std	Y+61, r24	; 0x3d
    1136:	8d ad       	ldd	r24, Y+61	; 0x3d
    1138:	9e ad       	ldd	r25, Y+62	; 0x3e
    113a:	9a af       	std	Y+58, r25	; 0x3a
    113c:	89 af       	std	Y+57, r24	; 0x39
    113e:	89 ad       	ldd	r24, Y+57	; 0x39
    1140:	9a ad       	ldd	r25, Y+58	; 0x3a
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <user_setPW+0x476>
    1146:	9a af       	std	Y+58, r25	; 0x3a
    1148:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1000);
		LCD_goToRowColumn(1,i);
    114a:	fe 01       	movw	r30, r28
    114c:	ed 59       	subi	r30, 0x9D	; 157
    114e:	ff 4f       	sbci	r31, 0xFF	; 255
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	60 81       	ld	r22, Z
    1154:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_goToRowColumn>
		LCD_displayCharacter('*');
    1158:	8a e2       	ldi	r24, 0x2A	; 42
    115a:	0e 94 00 19 	call	0x3200	; 0x3200 <LCD_displayCharacter>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	aa e7       	ldi	r26, 0x7A	; 122
    1164:	b4 e4       	ldi	r27, 0x44	; 68
    1166:	8d ab       	std	Y+53, r24	; 0x35
    1168:	9e ab       	std	Y+54, r25	; 0x36
    116a:	af ab       	std	Y+55, r26	; 0x37
    116c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    116e:	6d a9       	ldd	r22, Y+53	; 0x35
    1170:	7e a9       	ldd	r23, Y+54	; 0x36
    1172:	8f a9       	ldd	r24, Y+55	; 0x37
    1174:	98 ad       	ldd	r25, Y+56	; 0x38
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	4a e7       	ldi	r20, 0x7A	; 122
    117c:	53 e4       	ldi	r21, 0x43	; 67
    117e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	89 ab       	std	Y+49, r24	; 0x31
    1188:	9a ab       	std	Y+50, r25	; 0x32
    118a:	ab ab       	std	Y+51, r26	; 0x33
    118c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    118e:	69 a9       	ldd	r22, Y+49	; 0x31
    1190:	7a a9       	ldd	r23, Y+50	; 0x32
    1192:	8b a9       	ldd	r24, Y+51	; 0x33
    1194:	9c a9       	ldd	r25, Y+52	; 0x34
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e8       	ldi	r20, 0x80	; 128
    119c:	5f e3       	ldi	r21, 0x3F	; 63
    119e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11a2:	88 23       	and	r24, r24
    11a4:	2c f4       	brge	.+10     	; 0x11b0 <user_setPW+0x4e4>
		__ticks = 1;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	98 ab       	std	Y+48, r25	; 0x30
    11ac:	8f a7       	std	Y+47, r24	; 0x2f
    11ae:	3f c0       	rjmp	.+126    	; 0x122e <user_setPW+0x562>
	else if (__tmp > 65535)
    11b0:	69 a9       	ldd	r22, Y+49	; 0x31
    11b2:	7a a9       	ldd	r23, Y+50	; 0x32
    11b4:	8b a9       	ldd	r24, Y+51	; 0x33
    11b6:	9c a9       	ldd	r25, Y+52	; 0x34
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	3f ef       	ldi	r19, 0xFF	; 255
    11bc:	4f e7       	ldi	r20, 0x7F	; 127
    11be:	57 e4       	ldi	r21, 0x47	; 71
    11c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11c4:	18 16       	cp	r1, r24
    11c6:	4c f5       	brge	.+82     	; 0x121a <user_setPW+0x54e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c8:	6d a9       	ldd	r22, Y+53	; 0x35
    11ca:	7e a9       	ldd	r23, Y+54	; 0x36
    11cc:	8f a9       	ldd	r24, Y+55	; 0x37
    11ce:	98 ad       	ldd	r25, Y+56	; 0x38
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e2       	ldi	r20, 0x20	; 32
    11d6:	51 e4       	ldi	r21, 0x41	; 65
    11d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	bc 01       	movw	r22, r24
    11e2:	cd 01       	movw	r24, r26
    11e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	98 ab       	std	Y+48, r25	; 0x30
    11ee:	8f a7       	std	Y+47, r24	; 0x2f
    11f0:	0f c0       	rjmp	.+30     	; 0x1210 <user_setPW+0x544>
    11f2:	89 e1       	ldi	r24, 0x19	; 25
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	9e a7       	std	Y+46, r25	; 0x2e
    11f8:	8d a7       	std	Y+45, r24	; 0x2d
    11fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    11fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <user_setPW+0x532>
    1202:	9e a7       	std	Y+46, r25	; 0x2e
    1204:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1206:	8f a5       	ldd	r24, Y+47	; 0x2f
    1208:	98 a9       	ldd	r25, Y+48	; 0x30
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	98 ab       	std	Y+48, r25	; 0x30
    120e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1210:	8f a5       	ldd	r24, Y+47	; 0x2f
    1212:	98 a9       	ldd	r25, Y+48	; 0x30
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	69 f7       	brne	.-38     	; 0x11f2 <user_setPW+0x526>
    1218:	14 c0       	rjmp	.+40     	; 0x1242 <user_setPW+0x576>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121a:	69 a9       	ldd	r22, Y+49	; 0x31
    121c:	7a a9       	ldd	r23, Y+50	; 0x32
    121e:	8b a9       	ldd	r24, Y+51	; 0x33
    1220:	9c a9       	ldd	r25, Y+52	; 0x34
    1222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	98 ab       	std	Y+48, r25	; 0x30
    122c:	8f a7       	std	Y+47, r24	; 0x2f
    122e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1230:	98 a9       	ldd	r25, Y+48	; 0x30
    1232:	9c a7       	std	Y+44, r25	; 0x2c
    1234:	8b a7       	std	Y+43, r24	; 0x2b
    1236:	8b a5       	ldd	r24, Y+43	; 0x2b
    1238:	9c a5       	ldd	r25, Y+44	; 0x2c
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	f1 f7       	brne	.-4      	; 0x123a <user_setPW+0x56e>
    123e:	9c a7       	std	Y+44, r25	; 0x2c
    1240:	8b a7       	std	Y+43, r24	; 0x2b

	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "Enter Password:  ");
	LCD_goToRowColumn(1,0);

	for(i = 0; i< pass_length ;i++)
    1242:	de 01       	movw	r26, r28
    1244:	ad 59       	subi	r26, 0x9D	; 157
    1246:	bf 4f       	sbci	r27, 0xFF	; 255
    1248:	fe 01       	movw	r30, r28
    124a:	ed 59       	subi	r30, 0x9D	; 157
    124c:	ff 4f       	sbci	r31, 0xFF	; 255
    124e:	80 81       	ld	r24, Z
    1250:	8f 5f       	subi	r24, 0xFF	; 255
    1252:	8c 93       	st	X, r24
    1254:	fe 01       	movw	r30, r28
    1256:	ed 59       	subi	r30, 0x9D	; 157
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	80 81       	ld	r24, Z
    125c:	85 30       	cpi	r24, 0x05	; 5
    125e:	08 f4       	brcc	.+2      	; 0x1262 <user_setPW+0x596>
    1260:	1b ce       	rjmp	.-970    	; 0xe98 <user_setPW+0x1cc>
		LCD_goToRowColumn(1,i);
		LCD_displayCharacter('*');
		_delay_ms(1000);
	}

	password_1[i] = '#';
    1262:	fe 01       	movw	r30, r28
    1264:	ed 59       	subi	r30, 0x9D	; 157
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	80 81       	ld	r24, Z
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	ce 01       	movw	r24, r28
    1270:	8c 59       	subi	r24, 0x9C	; 156
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	fc 01       	movw	r30, r24
    1276:	e2 0f       	add	r30, r18
    1278:	f3 1f       	adc	r31, r19
    127a:	83 e2       	ldi	r24, 0x23	; 35
    127c:	80 83       	st	Z, r24
	i++;
    127e:	de 01       	movw	r26, r28
    1280:	ad 59       	subi	r26, 0x9D	; 157
    1282:	bf 4f       	sbci	r27, 0xFF	; 255
    1284:	fe 01       	movw	r30, r28
    1286:	ed 59       	subi	r30, 0x9D	; 157
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	80 81       	ld	r24, Z
    128c:	8f 5f       	subi	r24, 0xFF	; 255
    128e:	8c 93       	st	X, r24

	password_1[i] ='\0';
    1290:	fe 01       	movw	r30, r28
    1292:	ed 59       	subi	r30, 0x9D	; 157
    1294:	ff 4f       	sbci	r31, 0xFF	; 255
    1296:	80 81       	ld	r24, Z
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	ce 01       	movw	r24, r28
    129e:	8c 59       	subi	r24, 0x9C	; 156
    12a0:	9f 4f       	sbci	r25, 0xFF	; 255
    12a2:	fc 01       	movw	r30, r24
    12a4:	e2 0f       	add	r30, r18
    12a6:	f3 1f       	adc	r31, r19
    12a8:	10 82       	st	Z, r1
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	a6 e9       	ldi	r26, 0x96	; 150
    12b0:	b3 e4       	ldi	r27, 0x43	; 67
    12b2:	8f a3       	std	Y+39, r24	; 0x27
    12b4:	98 a7       	std	Y+40, r25	; 0x28
    12b6:	a9 a7       	std	Y+41, r26	; 0x29
    12b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ba:	6f a1       	ldd	r22, Y+39	; 0x27
    12bc:	78 a5       	ldd	r23, Y+40	; 0x28
    12be:	89 a5       	ldd	r24, Y+41	; 0x29
    12c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	4a e7       	ldi	r20, 0x7A	; 122
    12c8:	53 e4       	ldi	r21, 0x43	; 67
    12ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	8b a3       	std	Y+35, r24	; 0x23
    12d4:	9c a3       	std	Y+36, r25	; 0x24
    12d6:	ad a3       	std	Y+37, r26	; 0x25
    12d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12da:	6b a1       	ldd	r22, Y+35	; 0x23
    12dc:	7c a1       	ldd	r23, Y+36	; 0x24
    12de:	8d a1       	ldd	r24, Y+37	; 0x25
    12e0:	9e a1       	ldd	r25, Y+38	; 0x26
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e8       	ldi	r20, 0x80	; 128
    12e8:	5f e3       	ldi	r21, 0x3F	; 63
    12ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ee:	88 23       	and	r24, r24
    12f0:	2c f4       	brge	.+10     	; 0x12fc <user_setPW+0x630>
		__ticks = 1;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	9a a3       	std	Y+34, r25	; 0x22
    12f8:	89 a3       	std	Y+33, r24	; 0x21
    12fa:	3f c0       	rjmp	.+126    	; 0x137a <user_setPW+0x6ae>
	else if (__tmp > 65535)
    12fc:	6b a1       	ldd	r22, Y+35	; 0x23
    12fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1300:	8d a1       	ldd	r24, Y+37	; 0x25
    1302:	9e a1       	ldd	r25, Y+38	; 0x26
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	3f ef       	ldi	r19, 0xFF	; 255
    1308:	4f e7       	ldi	r20, 0x7F	; 127
    130a:	57 e4       	ldi	r21, 0x47	; 71
    130c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1310:	18 16       	cp	r1, r24
    1312:	4c f5       	brge	.+82     	; 0x1366 <user_setPW+0x69a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1314:	6f a1       	ldd	r22, Y+39	; 0x27
    1316:	78 a5       	ldd	r23, Y+40	; 0x28
    1318:	89 a5       	ldd	r24, Y+41	; 0x29
    131a:	9a a5       	ldd	r25, Y+42	; 0x2a
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	40 e2       	ldi	r20, 0x20	; 32
    1322:	51 e4       	ldi	r21, 0x41	; 65
    1324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	bc 01       	movw	r22, r24
    132e:	cd 01       	movw	r24, r26
    1330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	9a a3       	std	Y+34, r25	; 0x22
    133a:	89 a3       	std	Y+33, r24	; 0x21
    133c:	0f c0       	rjmp	.+30     	; 0x135c <user_setPW+0x690>
    133e:	89 e1       	ldi	r24, 0x19	; 25
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	98 a3       	std	Y+32, r25	; 0x20
    1344:	8f 8f       	std	Y+31, r24	; 0x1f
    1346:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1348:	98 a1       	ldd	r25, Y+32	; 0x20
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	f1 f7       	brne	.-4      	; 0x134a <user_setPW+0x67e>
    134e:	98 a3       	std	Y+32, r25	; 0x20
    1350:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1352:	89 a1       	ldd	r24, Y+33	; 0x21
    1354:	9a a1       	ldd	r25, Y+34	; 0x22
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	9a a3       	std	Y+34, r25	; 0x22
    135a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135c:	89 a1       	ldd	r24, Y+33	; 0x21
    135e:	9a a1       	ldd	r25, Y+34	; 0x22
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	69 f7       	brne	.-38     	; 0x133e <user_setPW+0x672>
    1364:	14 c0       	rjmp	.+40     	; 0x138e <user_setPW+0x6c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1366:	6b a1       	ldd	r22, Y+35	; 0x23
    1368:	7c a1       	ldd	r23, Y+36	; 0x24
    136a:	8d a1       	ldd	r24, Y+37	; 0x25
    136c:	9e a1       	ldd	r25, Y+38	; 0x26
    136e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	9a a3       	std	Y+34, r25	; 0x22
    1378:	89 a3       	std	Y+33, r24	; 0x21
    137a:	89 a1       	ldd	r24, Y+33	; 0x21
    137c:	9a a1       	ldd	r25, Y+34	; 0x22
    137e:	9e 8f       	std	Y+30, r25	; 0x1e
    1380:	8d 8f       	std	Y+29, r24	; 0x1d
    1382:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1384:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <user_setPW+0x6ba>
    138a:	9e 8f       	std	Y+30, r25	; 0x1e
    138c:	8d 8f       	std	Y+29, r24	; 0x1d

    _delay_ms(300);
	UART_sendByte(READY);
    138e:	84 e6       	ldi	r24, 0x64	; 100
    1390:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <UART_sendByte>
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a6 e9       	ldi	r26, 0x96	; 150
    139a:	b3 e4       	ldi	r27, 0x43	; 67
    139c:	89 8f       	std	Y+25, r24	; 0x19
    139e:	9a 8f       	std	Y+26, r25	; 0x1a
    13a0:	ab 8f       	std	Y+27, r26	; 0x1b
    13a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a4:	69 8d       	ldd	r22, Y+25	; 0x19
    13a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	4a e7       	ldi	r20, 0x7A	; 122
    13b2:	53 e4       	ldi	r21, 0x43	; 67
    13b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	8d 8b       	std	Y+21, r24	; 0x15
    13be:	9e 8b       	std	Y+22, r25	; 0x16
    13c0:	af 8b       	std	Y+23, r26	; 0x17
    13c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13c4:	6d 89       	ldd	r22, Y+21	; 0x15
    13c6:	7e 89       	ldd	r23, Y+22	; 0x16
    13c8:	8f 89       	ldd	r24, Y+23	; 0x17
    13ca:	98 8d       	ldd	r25, Y+24	; 0x18
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	40 e8       	ldi	r20, 0x80	; 128
    13d2:	5f e3       	ldi	r21, 0x3F	; 63
    13d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13d8:	88 23       	and	r24, r24
    13da:	2c f4       	brge	.+10     	; 0x13e6 <user_setPW+0x71a>
		__ticks = 1;
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	9c 8b       	std	Y+20, r25	; 0x14
    13e2:	8b 8b       	std	Y+19, r24	; 0x13
    13e4:	3f c0       	rjmp	.+126    	; 0x1464 <user_setPW+0x798>
	else if (__tmp > 65535)
    13e6:	6d 89       	ldd	r22, Y+21	; 0x15
    13e8:	7e 89       	ldd	r23, Y+22	; 0x16
    13ea:	8f 89       	ldd	r24, Y+23	; 0x17
    13ec:	98 8d       	ldd	r25, Y+24	; 0x18
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	3f ef       	ldi	r19, 0xFF	; 255
    13f2:	4f e7       	ldi	r20, 0x7F	; 127
    13f4:	57 e4       	ldi	r21, 0x47	; 71
    13f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13fa:	18 16       	cp	r1, r24
    13fc:	4c f5       	brge	.+82     	; 0x1450 <user_setPW+0x784>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1400:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1402:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1404:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e2       	ldi	r20, 0x20	; 32
    140c:	51 e4       	ldi	r21, 0x41	; 65
    140e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	bc 01       	movw	r22, r24
    1418:	cd 01       	movw	r24, r26
    141a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	9c 8b       	std	Y+20, r25	; 0x14
    1424:	8b 8b       	std	Y+19, r24	; 0x13
    1426:	0f c0       	rjmp	.+30     	; 0x1446 <user_setPW+0x77a>
    1428:	89 e1       	ldi	r24, 0x19	; 25
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	9a 8b       	std	Y+18, r25	; 0x12
    142e:	89 8b       	std	Y+17, r24	; 0x11
    1430:	89 89       	ldd	r24, Y+17	; 0x11
    1432:	9a 89       	ldd	r25, Y+18	; 0x12
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	f1 f7       	brne	.-4      	; 0x1434 <user_setPW+0x768>
    1438:	9a 8b       	std	Y+18, r25	; 0x12
    143a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    143c:	8b 89       	ldd	r24, Y+19	; 0x13
    143e:	9c 89       	ldd	r25, Y+20	; 0x14
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	9c 8b       	std	Y+20, r25	; 0x14
    1444:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1446:	8b 89       	ldd	r24, Y+19	; 0x13
    1448:	9c 89       	ldd	r25, Y+20	; 0x14
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	69 f7       	brne	.-38     	; 0x1428 <user_setPW+0x75c>
    144e:	14 c0       	rjmp	.+40     	; 0x1478 <user_setPW+0x7ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1450:	6d 89       	ldd	r22, Y+21	; 0x15
    1452:	7e 89       	ldd	r23, Y+22	; 0x16
    1454:	8f 89       	ldd	r24, Y+23	; 0x17
    1456:	98 8d       	ldd	r25, Y+24	; 0x18
    1458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	9c 8b       	std	Y+20, r25	; 0x14
    1462:	8b 8b       	std	Y+19, r24	; 0x13
    1464:	8b 89       	ldd	r24, Y+19	; 0x13
    1466:	9c 89       	ldd	r25, Y+20	; 0x14
    1468:	98 8b       	std	Y+16, r25	; 0x10
    146a:	8f 87       	std	Y+15, r24	; 0x0f
    146c:	8f 85       	ldd	r24, Y+15	; 0x0f
    146e:	98 89       	ldd	r25, Y+16	; 0x10
    1470:	01 97       	sbiw	r24, 0x01	; 1
    1472:	f1 f7       	brne	.-4      	; 0x1470 <user_setPW+0x7a4>
    1474:	98 8b       	std	Y+16, r25	; 0x10
    1476:	8f 87       	std	Y+15, r24	; 0x0f
//	while( UART_receiveByte() != READY);
	_delay_ms(300);
	UART_sendString(password_1);
    1478:	ce 01       	movw	r24, r28
    147a:	8c 59       	subi	r24, 0x9C	; 156
    147c:	9f 4f       	sbci	r25, 0xFF	; 255
    147e:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <UART_sendString>
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	a6 e9       	ldi	r26, 0x96	; 150
    1488:	b3 e4       	ldi	r27, 0x43	; 67
    148a:	8b 87       	std	Y+11, r24	; 0x0b
    148c:	9c 87       	std	Y+12, r25	; 0x0c
    148e:	ad 87       	std	Y+13, r26	; 0x0d
    1490:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1492:	6b 85       	ldd	r22, Y+11	; 0x0b
    1494:	7c 85       	ldd	r23, Y+12	; 0x0c
    1496:	8d 85       	ldd	r24, Y+13	; 0x0d
    1498:	9e 85       	ldd	r25, Y+14	; 0x0e
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	4a e7       	ldi	r20, 0x7A	; 122
    14a0:	53 e4       	ldi	r21, 0x43	; 67
    14a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	8f 83       	std	Y+7, r24	; 0x07
    14ac:	98 87       	std	Y+8, r25	; 0x08
    14ae:	a9 87       	std	Y+9, r26	; 0x09
    14b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14b2:	6f 81       	ldd	r22, Y+7	; 0x07
    14b4:	78 85       	ldd	r23, Y+8	; 0x08
    14b6:	89 85       	ldd	r24, Y+9	; 0x09
    14b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e8       	ldi	r20, 0x80	; 128
    14c0:	5f e3       	ldi	r21, 0x3F	; 63
    14c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14c6:	88 23       	and	r24, r24
    14c8:	2c f4       	brge	.+10     	; 0x14d4 <user_setPW+0x808>
		__ticks = 1;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	9e 83       	std	Y+6, r25	; 0x06
    14d0:	8d 83       	std	Y+5, r24	; 0x05
    14d2:	3f c0       	rjmp	.+126    	; 0x1552 <user_setPW+0x886>
	else if (__tmp > 65535)
    14d4:	6f 81       	ldd	r22, Y+7	; 0x07
    14d6:	78 85       	ldd	r23, Y+8	; 0x08
    14d8:	89 85       	ldd	r24, Y+9	; 0x09
    14da:	9a 85       	ldd	r25, Y+10	; 0x0a
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	3f ef       	ldi	r19, 0xFF	; 255
    14e0:	4f e7       	ldi	r20, 0x7F	; 127
    14e2:	57 e4       	ldi	r21, 0x47	; 71
    14e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e8:	18 16       	cp	r1, r24
    14ea:	4c f5       	brge	.+82     	; 0x153e <user_setPW+0x872>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	40 e2       	ldi	r20, 0x20	; 32
    14fa:	51 e4       	ldi	r21, 0x41	; 65
    14fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	bc 01       	movw	r22, r24
    1506:	cd 01       	movw	r24, r26
    1508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	9e 83       	std	Y+6, r25	; 0x06
    1512:	8d 83       	std	Y+5, r24	; 0x05
    1514:	0f c0       	rjmp	.+30     	; 0x1534 <user_setPW+0x868>
    1516:	89 e1       	ldi	r24, 0x19	; 25
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9c 83       	std	Y+4, r25	; 0x04
    151c:	8b 83       	std	Y+3, r24	; 0x03
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <user_setPW+0x856>
    1526:	9c 83       	std	Y+4, r25	; 0x04
    1528:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	9e 81       	ldd	r25, Y+6	; 0x06
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	9e 83       	std	Y+6, r25	; 0x06
    1532:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1534:	8d 81       	ldd	r24, Y+5	; 0x05
    1536:	9e 81       	ldd	r25, Y+6	; 0x06
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	69 f7       	brne	.-38     	; 0x1516 <user_setPW+0x84a>
    153c:	14 c0       	rjmp	.+40     	; 0x1566 <user_setPW+0x89a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153e:	6f 81       	ldd	r22, Y+7	; 0x07
    1540:	78 85       	ldd	r23, Y+8	; 0x08
    1542:	89 85       	ldd	r24, Y+9	; 0x09
    1544:	9a 85       	ldd	r25, Y+10	; 0x0a
    1546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	9e 83       	std	Y+6, r25	; 0x06
    1550:	8d 83       	std	Y+5, r24	; 0x05
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	9e 81       	ldd	r25, Y+6	; 0x06
    1556:	9a 83       	std	Y+2, r25	; 0x02
    1558:	89 83       	std	Y+1, r24	; 0x01
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	9a 81       	ldd	r25, Y+2	; 0x02
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	f1 f7       	brne	.-4      	; 0x155e <user_setPW+0x892>
    1562:	9a 83       	std	Y+2, r25	; 0x02
    1564:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	LCD_clearScreen();
    1566:	0e 94 a3 1b 	call	0x3746	; 0x3746 <LCD_clearScreen>

}
    156a:	c6 59       	subi	r28, 0x96	; 150
    156c:	df 4f       	sbci	r29, 0xFF	; 255
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	1f 91       	pop	r17
    157e:	0f 91       	pop	r16
    1580:	08 95       	ret

00001582 <user_confirmPW>:
 * and send it to the 2nd MCU
 *
 */

void user_confirmPW (void)
{
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	ce 54       	subi	r28, 0x4E	; 78
    1590:	d0 40       	sbci	r29, 0x00	; 0
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
	uint8 password_2[pass_length+2];
	uint8 i ;
	LCD_clearScreen();
    159c:	0e 94 a3 1b 	call	0x3746	; 0x3746 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "confirm Password:  ");
    15a0:	20 e8       	ldi	r18, 0x80	; 128
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	a9 01       	movw	r20, r18
    15aa:	0e 94 67 1b 	call	0x36ce	; 0x36ce <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_goToRowColumn>

	for(i=0 ; i<pass_length ; i++)
    15b6:	fe 01       	movw	r30, r28
    15b8:	e9 5b       	subi	r30, 0xB9	; 185
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	10 82       	st	Z, r1
    15be:	9d c1       	rjmp	.+826    	; 0x18fa <user_confirmPW+0x378>
	{
		password_2[i] = KeyPad_getPressedKey();
    15c0:	fe 01       	movw	r30, r28
    15c2:	e9 5b       	subi	r30, 0xB9	; 185
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	80 81       	ld	r24, Z
    15c8:	08 2f       	mov	r16, r24
    15ca:	10 e0       	ldi	r17, 0x00	; 0
    15cc:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <KeyPad_getPressedKey>
    15d0:	28 2f       	mov	r18, r24
    15d2:	ce 01       	movw	r24, r28
    15d4:	88 5b       	subi	r24, 0xB8	; 184
    15d6:	9f 4f       	sbci	r25, 0xFF	; 255
    15d8:	fc 01       	movw	r30, r24
    15da:	e0 0f       	add	r30, r16
    15dc:	f1 1f       	adc	r31, r17
    15de:	20 83       	st	Z, r18
    15e0:	fe 01       	movw	r30, r28
    15e2:	ed 5b       	subi	r30, 0xBD	; 189
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	aa ef       	ldi	r26, 0xFA	; 250
    15ec:	b4 e4       	ldi	r27, 0x44	; 68
    15ee:	80 83       	st	Z, r24
    15f0:	91 83       	std	Z+1, r25	; 0x01
    15f2:	a2 83       	std	Z+2, r26	; 0x02
    15f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f6:	8e 01       	movw	r16, r28
    15f8:	01 5c       	subi	r16, 0xC1	; 193
    15fa:	1f 4f       	sbci	r17, 0xFF	; 255
    15fc:	fe 01       	movw	r30, r28
    15fe:	ed 5b       	subi	r30, 0xBD	; 189
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	60 81       	ld	r22, Z
    1604:	71 81       	ldd	r23, Z+1	; 0x01
    1606:	82 81       	ldd	r24, Z+2	; 0x02
    1608:	93 81       	ldd	r25, Z+3	; 0x03
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	4a e7       	ldi	r20, 0x7A	; 122
    1610:	53 e4       	ldi	r21, 0x43	; 67
    1612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	f8 01       	movw	r30, r16
    161c:	80 83       	st	Z, r24
    161e:	91 83       	std	Z+1, r25	; 0x01
    1620:	a2 83       	std	Z+2, r26	; 0x02
    1622:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1624:	fe 01       	movw	r30, r28
    1626:	ff 96       	adiw	r30, 0x3f	; 63
    1628:	60 81       	ld	r22, Z
    162a:	71 81       	ldd	r23, Z+1	; 0x01
    162c:	82 81       	ldd	r24, Z+2	; 0x02
    162e:	93 81       	ldd	r25, Z+3	; 0x03
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e8       	ldi	r20, 0x80	; 128
    1636:	5f e3       	ldi	r21, 0x3F	; 63
    1638:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    163c:	88 23       	and	r24, r24
    163e:	2c f4       	brge	.+10     	; 0x164a <user_confirmPW+0xc8>
		__ticks = 1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	9e af       	std	Y+62, r25	; 0x3e
    1646:	8d af       	std	Y+61, r24	; 0x3d
    1648:	46 c0       	rjmp	.+140    	; 0x16d6 <user_confirmPW+0x154>
	else if (__tmp > 65535)
    164a:	fe 01       	movw	r30, r28
    164c:	ff 96       	adiw	r30, 0x3f	; 63
    164e:	60 81       	ld	r22, Z
    1650:	71 81       	ldd	r23, Z+1	; 0x01
    1652:	82 81       	ldd	r24, Z+2	; 0x02
    1654:	93 81       	ldd	r25, Z+3	; 0x03
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	3f ef       	ldi	r19, 0xFF	; 255
    165a:	4f e7       	ldi	r20, 0x7F	; 127
    165c:	57 e4       	ldi	r21, 0x47	; 71
    165e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1662:	18 16       	cp	r1, r24
    1664:	64 f5       	brge	.+88     	; 0x16be <user_confirmPW+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1666:	fe 01       	movw	r30, r28
    1668:	ed 5b       	subi	r30, 0xBD	; 189
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	60 81       	ld	r22, Z
    166e:	71 81       	ldd	r23, Z+1	; 0x01
    1670:	82 81       	ldd	r24, Z+2	; 0x02
    1672:	93 81       	ldd	r25, Z+3	; 0x03
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e2       	ldi	r20, 0x20	; 32
    167a:	51 e4       	ldi	r21, 0x41	; 65
    167c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	bc 01       	movw	r22, r24
    1686:	cd 01       	movw	r24, r26
    1688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	9e af       	std	Y+62, r25	; 0x3e
    1692:	8d af       	std	Y+61, r24	; 0x3d
    1694:	0f c0       	rjmp	.+30     	; 0x16b4 <user_confirmPW+0x132>
    1696:	89 e1       	ldi	r24, 0x19	; 25
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	9c af       	std	Y+60, r25	; 0x3c
    169c:	8b af       	std	Y+59, r24	; 0x3b
    169e:	8b ad       	ldd	r24, Y+59	; 0x3b
    16a0:	9c ad       	ldd	r25, Y+60	; 0x3c
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	f1 f7       	brne	.-4      	; 0x16a2 <user_confirmPW+0x120>
    16a6:	9c af       	std	Y+60, r25	; 0x3c
    16a8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    16ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	9e af       	std	Y+62, r25	; 0x3e
    16b2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    16b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	69 f7       	brne	.-38     	; 0x1696 <user_confirmPW+0x114>
    16bc:	16 c0       	rjmp	.+44     	; 0x16ea <user_confirmPW+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16be:	fe 01       	movw	r30, r28
    16c0:	ff 96       	adiw	r30, 0x3f	; 63
    16c2:	60 81       	ld	r22, Z
    16c4:	71 81       	ldd	r23, Z+1	; 0x01
    16c6:	82 81       	ldd	r24, Z+2	; 0x02
    16c8:	93 81       	ldd	r25, Z+3	; 0x03
    16ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	9e af       	std	Y+62, r25	; 0x3e
    16d4:	8d af       	std	Y+61, r24	; 0x3d
    16d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    16d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    16da:	9a af       	std	Y+58, r25	; 0x3a
    16dc:	89 af       	std	Y+57, r24	; 0x39
    16de:	89 ad       	ldd	r24, Y+57	; 0x39
    16e0:	9a ad       	ldd	r25, Y+58	; 0x3a
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <user_confirmPW+0x160>
    16e6:	9a af       	std	Y+58, r25	; 0x3a
    16e8:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(2000);
		LCD_intgerToString(password_2[i]);
    16ea:	fe 01       	movw	r30, r28
    16ec:	e9 5b       	subi	r30, 0xB9	; 185
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	80 81       	ld	r24, Z
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	ce 01       	movw	r24, r28
    16f8:	88 5b       	subi	r24, 0xB8	; 184
    16fa:	9f 4f       	sbci	r25, 0xFF	; 255
    16fc:	fc 01       	movw	r30, r24
    16fe:	e2 0f       	add	r30, r18
    1700:	f3 1f       	adc	r31, r19
    1702:	80 81       	ld	r24, Z
    1704:	88 2f       	mov	r24, r24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 80 1b 	call	0x3700	; 0x3700 <LCD_intgerToString>
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	aa e7       	ldi	r26, 0x7A	; 122
    1712:	b4 e4       	ldi	r27, 0x44	; 68
    1714:	8d ab       	std	Y+53, r24	; 0x35
    1716:	9e ab       	std	Y+54, r25	; 0x36
    1718:	af ab       	std	Y+55, r26	; 0x37
    171a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171c:	6d a9       	ldd	r22, Y+53	; 0x35
    171e:	7e a9       	ldd	r23, Y+54	; 0x36
    1720:	8f a9       	ldd	r24, Y+55	; 0x37
    1722:	98 ad       	ldd	r25, Y+56	; 0x38
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	4a e7       	ldi	r20, 0x7A	; 122
    172a:	53 e4       	ldi	r21, 0x43	; 67
    172c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	89 ab       	std	Y+49, r24	; 0x31
    1736:	9a ab       	std	Y+50, r25	; 0x32
    1738:	ab ab       	std	Y+51, r26	; 0x33
    173a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    173c:	69 a9       	ldd	r22, Y+49	; 0x31
    173e:	7a a9       	ldd	r23, Y+50	; 0x32
    1740:	8b a9       	ldd	r24, Y+51	; 0x33
    1742:	9c a9       	ldd	r25, Y+52	; 0x34
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e8       	ldi	r20, 0x80	; 128
    174a:	5f e3       	ldi	r21, 0x3F	; 63
    174c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1750:	88 23       	and	r24, r24
    1752:	2c f4       	brge	.+10     	; 0x175e <user_confirmPW+0x1dc>
		__ticks = 1;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	98 ab       	std	Y+48, r25	; 0x30
    175a:	8f a7       	std	Y+47, r24	; 0x2f
    175c:	3f c0       	rjmp	.+126    	; 0x17dc <user_confirmPW+0x25a>
	else if (__tmp > 65535)
    175e:	69 a9       	ldd	r22, Y+49	; 0x31
    1760:	7a a9       	ldd	r23, Y+50	; 0x32
    1762:	8b a9       	ldd	r24, Y+51	; 0x33
    1764:	9c a9       	ldd	r25, Y+52	; 0x34
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	3f ef       	ldi	r19, 0xFF	; 255
    176a:	4f e7       	ldi	r20, 0x7F	; 127
    176c:	57 e4       	ldi	r21, 0x47	; 71
    176e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1772:	18 16       	cp	r1, r24
    1774:	4c f5       	brge	.+82     	; 0x17c8 <user_confirmPW+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1776:	6d a9       	ldd	r22, Y+53	; 0x35
    1778:	7e a9       	ldd	r23, Y+54	; 0x36
    177a:	8f a9       	ldd	r24, Y+55	; 0x37
    177c:	98 ad       	ldd	r25, Y+56	; 0x38
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e2       	ldi	r20, 0x20	; 32
    1784:	51 e4       	ldi	r21, 0x41	; 65
    1786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	bc 01       	movw	r22, r24
    1790:	cd 01       	movw	r24, r26
    1792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	98 ab       	std	Y+48, r25	; 0x30
    179c:	8f a7       	std	Y+47, r24	; 0x2f
    179e:	0f c0       	rjmp	.+30     	; 0x17be <user_confirmPW+0x23c>
    17a0:	89 e1       	ldi	r24, 0x19	; 25
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9e a7       	std	Y+46, r25	; 0x2e
    17a6:	8d a7       	std	Y+45, r24	; 0x2d
    17a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    17aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <user_confirmPW+0x22a>
    17b0:	9e a7       	std	Y+46, r25	; 0x2e
    17b2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    17b6:	98 a9       	ldd	r25, Y+48	; 0x30
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	98 ab       	std	Y+48, r25	; 0x30
    17bc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17be:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c0:	98 a9       	ldd	r25, Y+48	; 0x30
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	69 f7       	brne	.-38     	; 0x17a0 <user_confirmPW+0x21e>
    17c6:	14 c0       	rjmp	.+40     	; 0x17f0 <user_confirmPW+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c8:	69 a9       	ldd	r22, Y+49	; 0x31
    17ca:	7a a9       	ldd	r23, Y+50	; 0x32
    17cc:	8b a9       	ldd	r24, Y+51	; 0x33
    17ce:	9c a9       	ldd	r25, Y+52	; 0x34
    17d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	98 ab       	std	Y+48, r25	; 0x30
    17da:	8f a7       	std	Y+47, r24	; 0x2f
    17dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    17de:	98 a9       	ldd	r25, Y+48	; 0x30
    17e0:	9c a7       	std	Y+44, r25	; 0x2c
    17e2:	8b a7       	std	Y+43, r24	; 0x2b
    17e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    17e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <user_confirmPW+0x266>
    17ec:	9c a7       	std	Y+44, r25	; 0x2c
    17ee:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		LCD_goToRowColumn(1,i);
    17f0:	fe 01       	movw	r30, r28
    17f2:	e9 5b       	subi	r30, 0xB9	; 185
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	60 81       	ld	r22, Z
    17fa:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_goToRowColumn>
		LCD_displayCharacter('*');
    17fe:	8a e2       	ldi	r24, 0x2A	; 42
    1800:	0e 94 00 19 	call	0x3200	; 0x3200 <LCD_displayCharacter>
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	aa e7       	ldi	r26, 0x7A	; 122
    180a:	b4 e4       	ldi	r27, 0x44	; 68
    180c:	8f a3       	std	Y+39, r24	; 0x27
    180e:	98 a7       	std	Y+40, r25	; 0x28
    1810:	a9 a7       	std	Y+41, r26	; 0x29
    1812:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1814:	6f a1       	ldd	r22, Y+39	; 0x27
    1816:	78 a5       	ldd	r23, Y+40	; 0x28
    1818:	89 a5       	ldd	r24, Y+41	; 0x29
    181a:	9a a5       	ldd	r25, Y+42	; 0x2a
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	4a e7       	ldi	r20, 0x7A	; 122
    1822:	53 e4       	ldi	r21, 0x43	; 67
    1824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	8b a3       	std	Y+35, r24	; 0x23
    182e:	9c a3       	std	Y+36, r25	; 0x24
    1830:	ad a3       	std	Y+37, r26	; 0x25
    1832:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1834:	6b a1       	ldd	r22, Y+35	; 0x23
    1836:	7c a1       	ldd	r23, Y+36	; 0x24
    1838:	8d a1       	ldd	r24, Y+37	; 0x25
    183a:	9e a1       	ldd	r25, Y+38	; 0x26
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e8       	ldi	r20, 0x80	; 128
    1842:	5f e3       	ldi	r21, 0x3F	; 63
    1844:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1848:	88 23       	and	r24, r24
    184a:	2c f4       	brge	.+10     	; 0x1856 <user_confirmPW+0x2d4>
		__ticks = 1;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	9a a3       	std	Y+34, r25	; 0x22
    1852:	89 a3       	std	Y+33, r24	; 0x21
    1854:	3f c0       	rjmp	.+126    	; 0x18d4 <user_confirmPW+0x352>
	else if (__tmp > 65535)
    1856:	6b a1       	ldd	r22, Y+35	; 0x23
    1858:	7c a1       	ldd	r23, Y+36	; 0x24
    185a:	8d a1       	ldd	r24, Y+37	; 0x25
    185c:	9e a1       	ldd	r25, Y+38	; 0x26
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	3f ef       	ldi	r19, 0xFF	; 255
    1862:	4f e7       	ldi	r20, 0x7F	; 127
    1864:	57 e4       	ldi	r21, 0x47	; 71
    1866:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    186a:	18 16       	cp	r1, r24
    186c:	4c f5       	brge	.+82     	; 0x18c0 <user_confirmPW+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186e:	6f a1       	ldd	r22, Y+39	; 0x27
    1870:	78 a5       	ldd	r23, Y+40	; 0x28
    1872:	89 a5       	ldd	r24, Y+41	; 0x29
    1874:	9a a5       	ldd	r25, Y+42	; 0x2a
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e2       	ldi	r20, 0x20	; 32
    187c:	51 e4       	ldi	r21, 0x41	; 65
    187e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	bc 01       	movw	r22, r24
    1888:	cd 01       	movw	r24, r26
    188a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	9a a3       	std	Y+34, r25	; 0x22
    1894:	89 a3       	std	Y+33, r24	; 0x21
    1896:	0f c0       	rjmp	.+30     	; 0x18b6 <user_confirmPW+0x334>
    1898:	89 e1       	ldi	r24, 0x19	; 25
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	98 a3       	std	Y+32, r25	; 0x20
    189e:	8f 8f       	std	Y+31, r24	; 0x1f
    18a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18a2:	98 a1       	ldd	r25, Y+32	; 0x20
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	f1 f7       	brne	.-4      	; 0x18a4 <user_confirmPW+0x322>
    18a8:	98 a3       	std	Y+32, r25	; 0x20
    18aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ac:	89 a1       	ldd	r24, Y+33	; 0x21
    18ae:	9a a1       	ldd	r25, Y+34	; 0x22
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	9a a3       	std	Y+34, r25	; 0x22
    18b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b6:	89 a1       	ldd	r24, Y+33	; 0x21
    18b8:	9a a1       	ldd	r25, Y+34	; 0x22
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	69 f7       	brne	.-38     	; 0x1898 <user_confirmPW+0x316>
    18be:	14 c0       	rjmp	.+40     	; 0x18e8 <user_confirmPW+0x366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c0:	6b a1       	ldd	r22, Y+35	; 0x23
    18c2:	7c a1       	ldd	r23, Y+36	; 0x24
    18c4:	8d a1       	ldd	r24, Y+37	; 0x25
    18c6:	9e a1       	ldd	r25, Y+38	; 0x26
    18c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	9a a3       	std	Y+34, r25	; 0x22
    18d2:	89 a3       	std	Y+33, r24	; 0x21
    18d4:	89 a1       	ldd	r24, Y+33	; 0x21
    18d6:	9a a1       	ldd	r25, Y+34	; 0x22
    18d8:	9e 8f       	std	Y+30, r25	; 0x1e
    18da:	8d 8f       	std	Y+29, r24	; 0x1d
    18dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	f1 f7       	brne	.-4      	; 0x18e0 <user_confirmPW+0x35e>
    18e4:	9e 8f       	std	Y+30, r25	; 0x1e
    18e6:	8d 8f       	std	Y+29, r24	; 0x1d
	uint8 i ;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "confirm Password:  ");
	LCD_goToRowColumn(1,0);

	for(i=0 ; i<pass_length ; i++)
    18e8:	de 01       	movw	r26, r28
    18ea:	a9 5b       	subi	r26, 0xB9	; 185
    18ec:	bf 4f       	sbci	r27, 0xFF	; 255
    18ee:	fe 01       	movw	r30, r28
    18f0:	e9 5b       	subi	r30, 0xB9	; 185
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	80 81       	ld	r24, Z
    18f6:	8f 5f       	subi	r24, 0xFF	; 255
    18f8:	8c 93       	st	X, r24
    18fa:	fe 01       	movw	r30, r28
    18fc:	e9 5b       	subi	r30, 0xB9	; 185
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 81       	ld	r24, Z
    1902:	85 30       	cpi	r24, 0x05	; 5
    1904:	08 f4       	brcc	.+2      	; 0x1908 <user_confirmPW+0x386>
    1906:	5c ce       	rjmp	.-840    	; 0x15c0 <user_confirmPW+0x3e>
		LCD_goToRowColumn(1,i);
		LCD_displayCharacter('*');
		_delay_ms(1000);
	}

	password_2[i] = '#';
    1908:	fe 01       	movw	r30, r28
    190a:	e9 5b       	subi	r30, 0xB9	; 185
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	80 81       	ld	r24, Z
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	ce 01       	movw	r24, r28
    1916:	88 5b       	subi	r24, 0xB8	; 184
    1918:	9f 4f       	sbci	r25, 0xFF	; 255
    191a:	fc 01       	movw	r30, r24
    191c:	e2 0f       	add	r30, r18
    191e:	f3 1f       	adc	r31, r19
    1920:	83 e2       	ldi	r24, 0x23	; 35
    1922:	80 83       	st	Z, r24
	i++;
    1924:	de 01       	movw	r26, r28
    1926:	a9 5b       	subi	r26, 0xB9	; 185
    1928:	bf 4f       	sbci	r27, 0xFF	; 255
    192a:	fe 01       	movw	r30, r28
    192c:	e9 5b       	subi	r30, 0xB9	; 185
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	80 81       	ld	r24, Z
    1932:	8f 5f       	subi	r24, 0xFF	; 255
    1934:	8c 93       	st	X, r24

	password_2[i] ='\0';
    1936:	fe 01       	movw	r30, r28
    1938:	e9 5b       	subi	r30, 0xB9	; 185
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	80 81       	ld	r24, Z
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	ce 01       	movw	r24, r28
    1944:	88 5b       	subi	r24, 0xB8	; 184
    1946:	9f 4f       	sbci	r25, 0xFF	; 255
    1948:	fc 01       	movw	r30, r24
    194a:	e2 0f       	add	r30, r18
    194c:	f3 1f       	adc	r31, r19
    194e:	10 82       	st	Z, r1
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	a0 e8       	ldi	r26, 0x80	; 128
    1956:	bf e3       	ldi	r27, 0x3F	; 63
    1958:	89 8f       	std	Y+25, r24	; 0x19
    195a:	9a 8f       	std	Y+26, r25	; 0x1a
    195c:	ab 8f       	std	Y+27, r26	; 0x1b
    195e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1960:	69 8d       	ldd	r22, Y+25	; 0x19
    1962:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1964:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1966:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	4a e7       	ldi	r20, 0x7A	; 122
    196e:	53 e4       	ldi	r21, 0x43	; 67
    1970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	8d 8b       	std	Y+21, r24	; 0x15
    197a:	9e 8b       	std	Y+22, r25	; 0x16
    197c:	af 8b       	std	Y+23, r26	; 0x17
    197e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1980:	6d 89       	ldd	r22, Y+21	; 0x15
    1982:	7e 89       	ldd	r23, Y+22	; 0x16
    1984:	8f 89       	ldd	r24, Y+23	; 0x17
    1986:	98 8d       	ldd	r25, Y+24	; 0x18
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e8       	ldi	r20, 0x80	; 128
    198e:	5f e3       	ldi	r21, 0x3F	; 63
    1990:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1994:	88 23       	and	r24, r24
    1996:	2c f4       	brge	.+10     	; 0x19a2 <user_confirmPW+0x420>
		__ticks = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9c 8b       	std	Y+20, r25	; 0x14
    199e:	8b 8b       	std	Y+19, r24	; 0x13
    19a0:	3f c0       	rjmp	.+126    	; 0x1a20 <user_confirmPW+0x49e>
	else if (__tmp > 65535)
    19a2:	6d 89       	ldd	r22, Y+21	; 0x15
    19a4:	7e 89       	ldd	r23, Y+22	; 0x16
    19a6:	8f 89       	ldd	r24, Y+23	; 0x17
    19a8:	98 8d       	ldd	r25, Y+24	; 0x18
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	3f ef       	ldi	r19, 0xFF	; 255
    19ae:	4f e7       	ldi	r20, 0x7F	; 127
    19b0:	57 e4       	ldi	r21, 0x47	; 71
    19b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19b6:	18 16       	cp	r1, r24
    19b8:	4c f5       	brge	.+82     	; 0x1a0c <user_confirmPW+0x48a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ba:	69 8d       	ldd	r22, Y+25	; 0x19
    19bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	40 e2       	ldi	r20, 0x20	; 32
    19c8:	51 e4       	ldi	r21, 0x41	; 65
    19ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9c 8b       	std	Y+20, r25	; 0x14
    19e0:	8b 8b       	std	Y+19, r24	; 0x13
    19e2:	0f c0       	rjmp	.+30     	; 0x1a02 <user_confirmPW+0x480>
    19e4:	89 e1       	ldi	r24, 0x19	; 25
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9a 8b       	std	Y+18, r25	; 0x12
    19ea:	89 8b       	std	Y+17, r24	; 0x11
    19ec:	89 89       	ldd	r24, Y+17	; 0x11
    19ee:	9a 89       	ldd	r25, Y+18	; 0x12
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <user_confirmPW+0x46e>
    19f4:	9a 8b       	std	Y+18, r25	; 0x12
    19f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f8:	8b 89       	ldd	r24, Y+19	; 0x13
    19fa:	9c 89       	ldd	r25, Y+20	; 0x14
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	9c 8b       	std	Y+20, r25	; 0x14
    1a00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a02:	8b 89       	ldd	r24, Y+19	; 0x13
    1a04:	9c 89       	ldd	r25, Y+20	; 0x14
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	69 f7       	brne	.-38     	; 0x19e4 <user_confirmPW+0x462>
    1a0a:	14 c0       	rjmp	.+40     	; 0x1a34 <user_confirmPW+0x4b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a10:	8f 89       	ldd	r24, Y+23	; 0x17
    1a12:	98 8d       	ldd	r25, Y+24	; 0x18
    1a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9c 8b       	std	Y+20, r25	; 0x14
    1a1e:	8b 8b       	std	Y+19, r24	; 0x13
    1a20:	8b 89       	ldd	r24, Y+19	; 0x13
    1a22:	9c 89       	ldd	r25, Y+20	; 0x14
    1a24:	98 8b       	std	Y+16, r25	; 0x10
    1a26:	8f 87       	std	Y+15, r24	; 0x0f
    1a28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a2a:	98 89       	ldd	r25, Y+16	; 0x10
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <user_confirmPW+0x4aa>
    1a30:	98 8b       	std	Y+16, r25	; 0x10
    1a32:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);
	UART_sendByte(READY);
    1a34:	84 e6       	ldi	r24, 0x64	; 100
    1a36:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <UART_sendByte>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a0 e8       	ldi	r26, 0x80	; 128
    1a40:	bf e3       	ldi	r27, 0x3F	; 63
    1a42:	8b 87       	std	Y+11, r24	; 0x0b
    1a44:	9c 87       	std	Y+12, r25	; 0x0c
    1a46:	ad 87       	std	Y+13, r26	; 0x0d
    1a48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	4a e7       	ldi	r20, 0x7A	; 122
    1a58:	53 e4       	ldi	r21, 0x43	; 67
    1a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	8f 83       	std	Y+7, r24	; 0x07
    1a64:	98 87       	std	Y+8, r25	; 0x08
    1a66:	a9 87       	std	Y+9, r26	; 0x09
    1a68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6c:	78 85       	ldd	r23, Y+8	; 0x08
    1a6e:	89 85       	ldd	r24, Y+9	; 0x09
    1a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e8       	ldi	r20, 0x80	; 128
    1a78:	5f e3       	ldi	r21, 0x3F	; 63
    1a7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a7e:	88 23       	and	r24, r24
    1a80:	2c f4       	brge	.+10     	; 0x1a8c <user_confirmPW+0x50a>
		__ticks = 1;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
    1a8a:	3f c0       	rjmp	.+126    	; 0x1b0a <user_confirmPW+0x588>
	else if (__tmp > 65535)
    1a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8e:	78 85       	ldd	r23, Y+8	; 0x08
    1a90:	89 85       	ldd	r24, Y+9	; 0x09
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	3f ef       	ldi	r19, 0xFF	; 255
    1a98:	4f e7       	ldi	r20, 0x7F	; 127
    1a9a:	57 e4       	ldi	r21, 0x47	; 71
    1a9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aa0:	18 16       	cp	r1, r24
    1aa2:	4c f5       	brge	.+82     	; 0x1af6 <user_confirmPW+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e2       	ldi	r20, 0x20	; 32
    1ab2:	51 e4       	ldi	r21, 0x41	; 65
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	bc 01       	movw	r22, r24
    1abe:	cd 01       	movw	r24, r26
    1ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	9e 83       	std	Y+6, r25	; 0x06
    1aca:	8d 83       	std	Y+5, r24	; 0x05
    1acc:	0f c0       	rjmp	.+30     	; 0x1aec <user_confirmPW+0x56a>
    1ace:	89 e1       	ldi	r24, 0x19	; 25
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9c 83       	std	Y+4, r25	; 0x04
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <user_confirmPW+0x558>
    1ade:	9c 83       	std	Y+4, r25	; 0x04
    1ae0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	9e 81       	ldd	r25, Y+6	; 0x06
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	69 f7       	brne	.-38     	; 0x1ace <user_confirmPW+0x54c>
    1af4:	14 c0       	rjmp	.+40     	; 0x1b1e <user_confirmPW+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af6:	6f 81       	ldd	r22, Y+7	; 0x07
    1af8:	78 85       	ldd	r23, Y+8	; 0x08
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0e:	9a 83       	std	Y+2, r25	; 0x02
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	9a 81       	ldd	r25, Y+2	; 0x02
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <user_confirmPW+0x594>
    1b1a:	9a 83       	std	Y+2, r25	; 0x02
    1b1c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);
	UART_sendString(password_2);
    1b1e:	ce 01       	movw	r24, r28
    1b20:	88 5b       	subi	r24, 0xB8	; 184
    1b22:	9f 4f       	sbci	r25, 0xFF	; 255
    1b24:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <UART_sendString>

	LCD_clearScreen();
    1b28:	0e 94 a3 1b 	call	0x3746	; 0x3746 <LCD_clearScreen>

}
    1b2c:	c2 5b       	subi	r28, 0xB2	; 178
    1b2e:	df 4f       	sbci	r29, 0xFF	; 255
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	de bf       	out	0x3e, r29	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	cd bf       	out	0x3d, r28	; 61
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	08 95       	ret

00001b44 <system_mainMenu>:
 * Input: void
 * Output: void
 *
 *****************************************************************************/
void system_mainMenu (void)
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1b4c:	0e 94 a3 1b 	call	0x3746	; 0x3746 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+:Change PW");
    1b50:	24 e9       	ldi	r18, 0x94	; 148
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	a9 01       	movw	r20, r18
    1b5a:	0e 94 67 1b 	call	0x36ce	; 0x36ce <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"-:Open Door");
    1b5e:	20 ea       	ldi	r18, 0xA0	; 160
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	a9 01       	movw	r20, r18
    1b68:	0e 94 67 1b 	call	0x36ce	; 0x36ce <LCD_displayStringRowColumn>
}
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <System_checkMatching>:
/*
 * Description: send to second MCU ask for confirm the password if the two input passwords
 * are the same
 */
void System_checkMatching (void)
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62


	while((UART_receiveByte ()) != READY);
    1b7a:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <UART_receiveByte>
    1b7e:	84 36       	cpi	r24, 0x64	; 100
    1b80:	e1 f7       	brne	.-8      	; 0x1b7a <System_checkMatching+0x8>


//	UART_sendByte(IF_PW_MATCHED);

	check = UART_receiveByte();
    1b82:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <UART_receiveByte>
    1b86:	80 93 0c 01 	sts	0x010C, r24

	if(check != MATCHED)
    1b8a:	80 91 0c 01 	lds	r24, 0x010C
    1b8e:	8b 30       	cpi	r24, 0x0B	; 11
    1b90:	11 f0       	breq	.+4      	; 0x1b96 <System_checkMatching+0x24>
	{
		system_errorMessage();
    1b92:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <system_errorMessage>

	}

}
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <system_errorMessage>:
/*
 * Description: function display error message to user
 * when the input password isn't right
 */
void system_errorMessage (void)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	e8 97       	sbiw	r28, 0x38	; 56
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1bb0:	0e 94 a3 1b 	call	0x3746	; 0x3746 <LCD_clearScreen>
	LCD_displayString(" **INVALID** ");
    1bb4:	8c ea       	ldi	r24, 0xAC	; 172
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <LCD_displayString>
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	aa ef       	ldi	r26, 0xFA	; 250
    1bc2:	b3 e4       	ldi	r27, 0x43	; 67
    1bc4:	8d ab       	std	Y+53, r24	; 0x35
    1bc6:	9e ab       	std	Y+54, r25	; 0x36
    1bc8:	af ab       	std	Y+55, r26	; 0x37
    1bca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bcc:	6d a9       	ldd	r22, Y+53	; 0x35
    1bce:	7e a9       	ldd	r23, Y+54	; 0x36
    1bd0:	8f a9       	ldd	r24, Y+55	; 0x37
    1bd2:	98 ad       	ldd	r25, Y+56	; 0x38
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4a e7       	ldi	r20, 0x7A	; 122
    1bda:	53 e4       	ldi	r21, 0x43	; 67
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	89 ab       	std	Y+49, r24	; 0x31
    1be6:	9a ab       	std	Y+50, r25	; 0x32
    1be8:	ab ab       	std	Y+51, r26	; 0x33
    1bea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bec:	69 a9       	ldd	r22, Y+49	; 0x31
    1bee:	7a a9       	ldd	r23, Y+50	; 0x32
    1bf0:	8b a9       	ldd	r24, Y+51	; 0x33
    1bf2:	9c a9       	ldd	r25, Y+52	; 0x34
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e8       	ldi	r20, 0x80	; 128
    1bfa:	5f e3       	ldi	r21, 0x3F	; 63
    1bfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c00:	88 23       	and	r24, r24
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <system_errorMessage+0x72>
		__ticks = 1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	98 ab       	std	Y+48, r25	; 0x30
    1c0a:	8f a7       	std	Y+47, r24	; 0x2f
    1c0c:	3f c0       	rjmp	.+126    	; 0x1c8c <system_errorMessage+0xf0>
	else if (__tmp > 65535)
    1c0e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c10:	7a a9       	ldd	r23, Y+50	; 0x32
    1c12:	8b a9       	ldd	r24, Y+51	; 0x33
    1c14:	9c a9       	ldd	r25, Y+52	; 0x34
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	3f ef       	ldi	r19, 0xFF	; 255
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	57 e4       	ldi	r21, 0x47	; 71
    1c1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	4c f5       	brge	.+82     	; 0x1c78 <system_errorMessage+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c26:	6d a9       	ldd	r22, Y+53	; 0x35
    1c28:	7e a9       	ldd	r23, Y+54	; 0x36
    1c2a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c2c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e2       	ldi	r20, 0x20	; 32
    1c34:	51 e4       	ldi	r21, 0x41	; 65
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	98 ab       	std	Y+48, r25	; 0x30
    1c4c:	8f a7       	std	Y+47, r24	; 0x2f
    1c4e:	0f c0       	rjmp	.+30     	; 0x1c6e <system_errorMessage+0xd2>
    1c50:	89 e1       	ldi	r24, 0x19	; 25
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	9e a7       	std	Y+46, r25	; 0x2e
    1c56:	8d a7       	std	Y+45, r24	; 0x2d
    1c58:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c5a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <system_errorMessage+0xc0>
    1c60:	9e a7       	std	Y+46, r25	; 0x2e
    1c62:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c66:	98 a9       	ldd	r25, Y+48	; 0x30
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	98 ab       	std	Y+48, r25	; 0x30
    1c6c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c70:	98 a9       	ldd	r25, Y+48	; 0x30
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	69 f7       	brne	.-38     	; 0x1c50 <system_errorMessage+0xb4>
    1c76:	14 c0       	rjmp	.+40     	; 0x1ca0 <system_errorMessage+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c78:	69 a9       	ldd	r22, Y+49	; 0x31
    1c7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	98 ab       	std	Y+48, r25	; 0x30
    1c8a:	8f a7       	std	Y+47, r24	; 0x2f
    1c8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c90:	9c a7       	std	Y+44, r25	; 0x2c
    1c92:	8b a7       	std	Y+43, r24	; 0x2b
    1c94:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c96:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <system_errorMessage+0xfc>
    1c9c:	9c a7       	std	Y+44, r25	; 0x2c
    1c9e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500);

	LCD_sendCommand(0x08);
    1ca0:	88 e0       	ldi	r24, 0x08	; 8
    1ca2:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_sendCommand>
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	aa ef       	ldi	r26, 0xFA	; 250
    1cac:	b3 e4       	ldi	r27, 0x43	; 67
    1cae:	8f a3       	std	Y+39, r24	; 0x27
    1cb0:	98 a7       	std	Y+40, r25	; 0x28
    1cb2:	a9 a7       	std	Y+41, r26	; 0x29
    1cb4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb6:	6f a1       	ldd	r22, Y+39	; 0x27
    1cb8:	78 a5       	ldd	r23, Y+40	; 0x28
    1cba:	89 a5       	ldd	r24, Y+41	; 0x29
    1cbc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	4a e7       	ldi	r20, 0x7A	; 122
    1cc4:	53 e4       	ldi	r21, 0x43	; 67
    1cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	8b a3       	std	Y+35, r24	; 0x23
    1cd0:	9c a3       	std	Y+36, r25	; 0x24
    1cd2:	ad a3       	std	Y+37, r26	; 0x25
    1cd4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cd6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cda:	8d a1       	ldd	r24, Y+37	; 0x25
    1cdc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e8       	ldi	r20, 0x80	; 128
    1ce4:	5f e3       	ldi	r21, 0x3F	; 63
    1ce6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cea:	88 23       	and	r24, r24
    1cec:	2c f4       	brge	.+10     	; 0x1cf8 <system_errorMessage+0x15c>
		__ticks = 1;
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	9a a3       	std	Y+34, r25	; 0x22
    1cf4:	89 a3       	std	Y+33, r24	; 0x21
    1cf6:	3f c0       	rjmp	.+126    	; 0x1d76 <system_errorMessage+0x1da>
	else if (__tmp > 65535)
    1cf8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cfa:	7c a1       	ldd	r23, Y+36	; 0x24
    1cfc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cfe:	9e a1       	ldd	r25, Y+38	; 0x26
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	3f ef       	ldi	r19, 0xFF	; 255
    1d04:	4f e7       	ldi	r20, 0x7F	; 127
    1d06:	57 e4       	ldi	r21, 0x47	; 71
    1d08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d0c:	18 16       	cp	r1, r24
    1d0e:	4c f5       	brge	.+82     	; 0x1d62 <system_errorMessage+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d10:	6f a1       	ldd	r22, Y+39	; 0x27
    1d12:	78 a5       	ldd	r23, Y+40	; 0x28
    1d14:	89 a5       	ldd	r24, Y+41	; 0x29
    1d16:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e2       	ldi	r20, 0x20	; 32
    1d1e:	51 e4       	ldi	r21, 0x41	; 65
    1d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	bc 01       	movw	r22, r24
    1d2a:	cd 01       	movw	r24, r26
    1d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	9a a3       	std	Y+34, r25	; 0x22
    1d36:	89 a3       	std	Y+33, r24	; 0x21
    1d38:	0f c0       	rjmp	.+30     	; 0x1d58 <system_errorMessage+0x1bc>
    1d3a:	89 e1       	ldi	r24, 0x19	; 25
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	98 a3       	std	Y+32, r25	; 0x20
    1d40:	8f 8f       	std	Y+31, r24	; 0x1f
    1d42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d44:	98 a1       	ldd	r25, Y+32	; 0x20
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <system_errorMessage+0x1aa>
    1d4a:	98 a3       	std	Y+32, r25	; 0x20
    1d4c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d50:	9a a1       	ldd	r25, Y+34	; 0x22
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	9a a3       	std	Y+34, r25	; 0x22
    1d56:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d58:	89 a1       	ldd	r24, Y+33	; 0x21
    1d5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d5c:	00 97       	sbiw	r24, 0x00	; 0
    1d5e:	69 f7       	brne	.-38     	; 0x1d3a <system_errorMessage+0x19e>
    1d60:	14 c0       	rjmp	.+40     	; 0x1d8a <system_errorMessage+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d62:	6b a1       	ldd	r22, Y+35	; 0x23
    1d64:	7c a1       	ldd	r23, Y+36	; 0x24
    1d66:	8d a1       	ldd	r24, Y+37	; 0x25
    1d68:	9e a1       	ldd	r25, Y+38	; 0x26
    1d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	9a a3       	std	Y+34, r25	; 0x22
    1d74:	89 a3       	std	Y+33, r24	; 0x21
    1d76:	89 a1       	ldd	r24, Y+33	; 0x21
    1d78:	9a a1       	ldd	r25, Y+34	; 0x22
    1d7a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d7c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	f1 f7       	brne	.-4      	; 0x1d82 <system_errorMessage+0x1e6>
    1d86:	9e 8f       	std	Y+30, r25	; 0x1e
    1d88:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	LCD_sendCommand(0x0C);
    1d8a:	8c e0       	ldi	r24, 0x0C	; 12
    1d8c:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_sendCommand>
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	aa ef       	ldi	r26, 0xFA	; 250
    1d96:	b3 e4       	ldi	r27, 0x43	; 67
    1d98:	89 8f       	std	Y+25, r24	; 0x19
    1d9a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d9c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da0:	69 8d       	ldd	r22, Y+25	; 0x19
    1da2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1da4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	4a e7       	ldi	r20, 0x7A	; 122
    1dae:	53 e4       	ldi	r21, 0x43	; 67
    1db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	8d 8b       	std	Y+21, r24	; 0x15
    1dba:	9e 8b       	std	Y+22, r25	; 0x16
    1dbc:	af 8b       	std	Y+23, r26	; 0x17
    1dbe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e8       	ldi	r20, 0x80	; 128
    1dce:	5f e3       	ldi	r21, 0x3F	; 63
    1dd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dd4:	88 23       	and	r24, r24
    1dd6:	2c f4       	brge	.+10     	; 0x1de2 <system_errorMessage+0x246>
		__ticks = 1;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	9c 8b       	std	Y+20, r25	; 0x14
    1dde:	8b 8b       	std	Y+19, r24	; 0x13
    1de0:	3f c0       	rjmp	.+126    	; 0x1e60 <system_errorMessage+0x2c4>
	else if (__tmp > 65535)
    1de2:	6d 89       	ldd	r22, Y+21	; 0x15
    1de4:	7e 89       	ldd	r23, Y+22	; 0x16
    1de6:	8f 89       	ldd	r24, Y+23	; 0x17
    1de8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	3f ef       	ldi	r19, 0xFF	; 255
    1dee:	4f e7       	ldi	r20, 0x7F	; 127
    1df0:	57 e4       	ldi	r21, 0x47	; 71
    1df2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1df6:	18 16       	cp	r1, r24
    1df8:	4c f5       	brge	.+82     	; 0x1e4c <system_errorMessage+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfa:	69 8d       	ldd	r22, Y+25	; 0x19
    1dfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	40 e2       	ldi	r20, 0x20	; 32
    1e08:	51 e4       	ldi	r21, 0x41	; 65
    1e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	9c 8b       	std	Y+20, r25	; 0x14
    1e20:	8b 8b       	std	Y+19, r24	; 0x13
    1e22:	0f c0       	rjmp	.+30     	; 0x1e42 <system_errorMessage+0x2a6>
    1e24:	89 e1       	ldi	r24, 0x19	; 25
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	9a 8b       	std	Y+18, r25	; 0x12
    1e2a:	89 8b       	std	Y+17, r24	; 0x11
    1e2c:	89 89       	ldd	r24, Y+17	; 0x11
    1e2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <system_errorMessage+0x294>
    1e34:	9a 8b       	std	Y+18, r25	; 0x12
    1e36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e38:	8b 89       	ldd	r24, Y+19	; 0x13
    1e3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	9c 8b       	std	Y+20, r25	; 0x14
    1e40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e42:	8b 89       	ldd	r24, Y+19	; 0x13
    1e44:	9c 89       	ldd	r25, Y+20	; 0x14
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	69 f7       	brne	.-38     	; 0x1e24 <system_errorMessage+0x288>
    1e4a:	14 c0       	rjmp	.+40     	; 0x1e74 <system_errorMessage+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e50:	8f 89       	ldd	r24, Y+23	; 0x17
    1e52:	98 8d       	ldd	r25, Y+24	; 0x18
    1e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	9c 8b       	std	Y+20, r25	; 0x14
    1e5e:	8b 8b       	std	Y+19, r24	; 0x13
    1e60:	8b 89       	ldd	r24, Y+19	; 0x13
    1e62:	9c 89       	ldd	r25, Y+20	; 0x14
    1e64:	98 8b       	std	Y+16, r25	; 0x10
    1e66:	8f 87       	std	Y+15, r24	; 0x0f
    1e68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e6a:	98 89       	ldd	r25, Y+16	; 0x10
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <system_errorMessage+0x2d0>
    1e70:	98 8b       	std	Y+16, r25	; 0x10
    1e72:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	LCD_sendCommand(0x08);
    1e74:	88 e0       	ldi	r24, 0x08	; 8
    1e76:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_sendCommand>
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	aa ef       	ldi	r26, 0xFA	; 250
    1e80:	b3 e4       	ldi	r27, 0x43	; 67
    1e82:	8b 87       	std	Y+11, r24	; 0x0b
    1e84:	9c 87       	std	Y+12, r25	; 0x0c
    1e86:	ad 87       	std	Y+13, r26	; 0x0d
    1e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	4a e7       	ldi	r20, 0x7A	; 122
    1e98:	53 e4       	ldi	r21, 0x43	; 67
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	8f 83       	std	Y+7, r24	; 0x07
    1ea4:	98 87       	std	Y+8, r25	; 0x08
    1ea6:	a9 87       	std	Y+9, r26	; 0x09
    1ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1eac:	78 85       	ldd	r23, Y+8	; 0x08
    1eae:	89 85       	ldd	r24, Y+9	; 0x09
    1eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e8       	ldi	r20, 0x80	; 128
    1eb8:	5f e3       	ldi	r21, 0x3F	; 63
    1eba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <system_errorMessage+0x330>
		__ticks = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
    1eca:	3f c0       	rjmp	.+126    	; 0x1f4a <system_errorMessage+0x3ae>
	else if (__tmp > 65535)
    1ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ece:	78 85       	ldd	r23, Y+8	; 0x08
    1ed0:	89 85       	ldd	r24, Y+9	; 0x09
    1ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	3f ef       	ldi	r19, 0xFF	; 255
    1ed8:	4f e7       	ldi	r20, 0x7F	; 127
    1eda:	57 e4       	ldi	r21, 0x47	; 71
    1edc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	4c f5       	brge	.+82     	; 0x1f36 <system_errorMessage+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e2       	ldi	r20, 0x20	; 32
    1ef2:	51 e4       	ldi	r21, 0x41	; 65
    1ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
    1f0c:	0f c0       	rjmp	.+30     	; 0x1f2c <system_errorMessage+0x390>
    1f0e:	89 e1       	ldi	r24, 0x19	; 25
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <system_errorMessage+0x37e>
    1f1e:	9c 83       	std	Y+4, r25	; 0x04
    1f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	9e 81       	ldd	r25, Y+6	; 0x06
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	9e 83       	std	Y+6, r25	; 0x06
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	69 f7       	brne	.-38     	; 0x1f0e <system_errorMessage+0x372>
    1f34:	14 c0       	rjmp	.+40     	; 0x1f5e <system_errorMessage+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f36:	6f 81       	ldd	r22, Y+7	; 0x07
    1f38:	78 85       	ldd	r23, Y+8	; 0x08
    1f3a:	89 85       	ldd	r24, Y+9	; 0x09
    1f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9e 83       	std	Y+6, r25	; 0x06
    1f48:	8d 83       	std	Y+5, r24	; 0x05
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9a 81       	ldd	r25, Y+2	; 0x02
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <system_errorMessage+0x3ba>
    1f5a:	9a 83       	std	Y+2, r25	; 0x02
    1f5c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_sendCommand(0x0C);
    1f5e:	8c e0       	ldi	r24, 0x0C	; 12
    1f60:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_sendCommand>

	LCD_clearScreen();
    1f64:	0e 94 a3 1b 	call	0x3746	; 0x3746 <LCD_clearScreen>
}
    1f68:	e8 96       	adiw	r28, 0x38	; 56
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <system_confirmSavePW>:

void system_confirmSavePW (void)
{
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	2e 97       	sbiw	r28, 0x0e	; 14
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1f8e:	0e 94 a3 1b 	call	0x3746	; 0x3746 <LCD_clearScreen>
	LCD_displayString("Your Password is");
    1f92:	8a eb       	ldi	r24, 0xBA	; 186
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"Saved");
    1f9a:	2b ec       	ldi	r18, 0xCB	; 203
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	60 e0       	ldi	r22, 0x00	; 0
    1fa2:	a9 01       	movw	r20, r18
    1fa4:	0e 94 67 1b 	call	0x36ce	; 0x36ce <LCD_displayStringRowColumn>
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	aa e7       	ldi	r26, 0x7A	; 122
    1fae:	b4 e4       	ldi	r27, 0x44	; 68
    1fb0:	8b 87       	std	Y+11, r24	; 0x0b
    1fb2:	9c 87       	std	Y+12, r25	; 0x0c
    1fb4:	ad 87       	std	Y+13, r26	; 0x0d
    1fb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	4a e7       	ldi	r20, 0x7A	; 122
    1fc6:	53 e4       	ldi	r21, 0x43	; 67
    1fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	8f 83       	std	Y+7, r24	; 0x07
    1fd2:	98 87       	std	Y+8, r25	; 0x08
    1fd4:	a9 87       	std	Y+9, r26	; 0x09
    1fd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fda:	78 85       	ldd	r23, Y+8	; 0x08
    1fdc:	89 85       	ldd	r24, Y+9	; 0x09
    1fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e8       	ldi	r20, 0x80	; 128
    1fe6:	5f e3       	ldi	r21, 0x3F	; 63
    1fe8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fec:	88 23       	and	r24, r24
    1fee:	2c f4       	brge	.+10     	; 0x1ffa <system_confirmSavePW+0x80>
		__ticks = 1;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	9e 83       	std	Y+6, r25	; 0x06
    1ff6:	8d 83       	std	Y+5, r24	; 0x05
    1ff8:	3f c0       	rjmp	.+126    	; 0x2078 <system_confirmSavePW+0xfe>
	else if (__tmp > 65535)
    1ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffc:	78 85       	ldd	r23, Y+8	; 0x08
    1ffe:	89 85       	ldd	r24, Y+9	; 0x09
    2000:	9a 85       	ldd	r25, Y+10	; 0x0a
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	3f ef       	ldi	r19, 0xFF	; 255
    2006:	4f e7       	ldi	r20, 0x7F	; 127
    2008:	57 e4       	ldi	r21, 0x47	; 71
    200a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    200e:	18 16       	cp	r1, r24
    2010:	4c f5       	brge	.+82     	; 0x2064 <system_confirmSavePW+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2012:	6b 85       	ldd	r22, Y+11	; 0x0b
    2014:	7c 85       	ldd	r23, Y+12	; 0x0c
    2016:	8d 85       	ldd	r24, Y+13	; 0x0d
    2018:	9e 85       	ldd	r25, Y+14	; 0x0e
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e2       	ldi	r20, 0x20	; 32
    2020:	51 e4       	ldi	r21, 0x41	; 65
    2022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	bc 01       	movw	r22, r24
    202c:	cd 01       	movw	r24, r26
    202e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9e 83       	std	Y+6, r25	; 0x06
    2038:	8d 83       	std	Y+5, r24	; 0x05
    203a:	0f c0       	rjmp	.+30     	; 0x205a <system_confirmSavePW+0xe0>
    203c:	89 e1       	ldi	r24, 0x19	; 25
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	9c 83       	std	Y+4, r25	; 0x04
    2042:	8b 83       	std	Y+3, r24	; 0x03
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <system_confirmSavePW+0xce>
    204c:	9c 83       	std	Y+4, r25	; 0x04
    204e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2050:	8d 81       	ldd	r24, Y+5	; 0x05
    2052:	9e 81       	ldd	r25, Y+6	; 0x06
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	9e 83       	std	Y+6, r25	; 0x06
    2058:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205a:	8d 81       	ldd	r24, Y+5	; 0x05
    205c:	9e 81       	ldd	r25, Y+6	; 0x06
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	69 f7       	brne	.-38     	; 0x203c <system_confirmSavePW+0xc2>
    2062:	14 c0       	rjmp	.+40     	; 0x208c <system_confirmSavePW+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2064:	6f 81       	ldd	r22, Y+7	; 0x07
    2066:	78 85       	ldd	r23, Y+8	; 0x08
    2068:	89 85       	ldd	r24, Y+9	; 0x09
    206a:	9a 85       	ldd	r25, Y+10	; 0x0a
    206c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	9e 83       	std	Y+6, r25	; 0x06
    2076:	8d 83       	std	Y+5, r24	; 0x05
    2078:	8d 81       	ldd	r24, Y+5	; 0x05
    207a:	9e 81       	ldd	r25, Y+6	; 0x06
    207c:	9a 83       	std	Y+2, r25	; 0x02
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	9a 81       	ldd	r25, Y+2	; 0x02
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <system_confirmSavePW+0x10a>
    2088:	9a 83       	std	Y+2, r25	; 0x02
    208a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

	LCD_clearScreen();
    208c:	0e 94 a3 1b 	call	0x3746	; 0x3746 <LCD_clearScreen>
}
    2090:	2e 96       	adiw	r28, 0x0e	; 14
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	de bf       	out	0x3e, r29	; 62
    2098:	0f be       	out	0x3f, r0	; 63
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	08 95       	ret

000020a2 <userChooseOption>:
 /*
  * Description: get the user option and return it to the calling function also send it
  * to the second microcontroller.
  */
void userChooseOption (void)
{
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
    20aa:	ab 97       	sbiw	r28, 0x2b	; 43
    20ac:	0f b6       	in	r0, 0x3f	; 63
    20ae:	f8 94       	cli
    20b0:	de bf       	out	0x3e, r29	; 62
    20b2:	0f be       	out	0x3f, r0	; 63
    20b4:	cd bf       	out	0x3d, r28	; 61
	uint8 userInput ;

	userInput =  KeyPad_getPressedKey();
    20b6:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <KeyPad_getPressedKey>
    20ba:	8b a7       	std	Y+43, r24	; 0x2b
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	aa ef       	ldi	r26, 0xFA	; 250
    20c2:	b3 e4       	ldi	r27, 0x43	; 67
    20c4:	8f a3       	std	Y+39, r24	; 0x27
    20c6:	98 a7       	std	Y+40, r25	; 0x28
    20c8:	a9 a7       	std	Y+41, r26	; 0x29
    20ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20cc:	6f a1       	ldd	r22, Y+39	; 0x27
    20ce:	78 a5       	ldd	r23, Y+40	; 0x28
    20d0:	89 a5       	ldd	r24, Y+41	; 0x29
    20d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	4a e7       	ldi	r20, 0x7A	; 122
    20da:	53 e4       	ldi	r21, 0x43	; 67
    20dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	8b a3       	std	Y+35, r24	; 0x23
    20e6:	9c a3       	std	Y+36, r25	; 0x24
    20e8:	ad a3       	std	Y+37, r26	; 0x25
    20ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20ec:	6b a1       	ldd	r22, Y+35	; 0x23
    20ee:	7c a1       	ldd	r23, Y+36	; 0x24
    20f0:	8d a1       	ldd	r24, Y+37	; 0x25
    20f2:	9e a1       	ldd	r25, Y+38	; 0x26
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e8       	ldi	r20, 0x80	; 128
    20fa:	5f e3       	ldi	r21, 0x3F	; 63
    20fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2100:	88 23       	and	r24, r24
    2102:	2c f4       	brge	.+10     	; 0x210e <userChooseOption+0x6c>
		__ticks = 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9a a3       	std	Y+34, r25	; 0x22
    210a:	89 a3       	std	Y+33, r24	; 0x21
    210c:	3f c0       	rjmp	.+126    	; 0x218c <userChooseOption+0xea>
	else if (__tmp > 65535)
    210e:	6b a1       	ldd	r22, Y+35	; 0x23
    2110:	7c a1       	ldd	r23, Y+36	; 0x24
    2112:	8d a1       	ldd	r24, Y+37	; 0x25
    2114:	9e a1       	ldd	r25, Y+38	; 0x26
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	3f ef       	ldi	r19, 0xFF	; 255
    211a:	4f e7       	ldi	r20, 0x7F	; 127
    211c:	57 e4       	ldi	r21, 0x47	; 71
    211e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2122:	18 16       	cp	r1, r24
    2124:	4c f5       	brge	.+82     	; 0x2178 <userChooseOption+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2126:	6f a1       	ldd	r22, Y+39	; 0x27
    2128:	78 a5       	ldd	r23, Y+40	; 0x28
    212a:	89 a5       	ldd	r24, Y+41	; 0x29
    212c:	9a a5       	ldd	r25, Y+42	; 0x2a
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e2       	ldi	r20, 0x20	; 32
    2134:	51 e4       	ldi	r21, 0x41	; 65
    2136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	9a a3       	std	Y+34, r25	; 0x22
    214c:	89 a3       	std	Y+33, r24	; 0x21
    214e:	0f c0       	rjmp	.+30     	; 0x216e <userChooseOption+0xcc>
    2150:	89 e1       	ldi	r24, 0x19	; 25
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	98 a3       	std	Y+32, r25	; 0x20
    2156:	8f 8f       	std	Y+31, r24	; 0x1f
    2158:	8f 8d       	ldd	r24, Y+31	; 0x1f
    215a:	98 a1       	ldd	r25, Y+32	; 0x20
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <userChooseOption+0xba>
    2160:	98 a3       	std	Y+32, r25	; 0x20
    2162:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2164:	89 a1       	ldd	r24, Y+33	; 0x21
    2166:	9a a1       	ldd	r25, Y+34	; 0x22
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	9a a3       	std	Y+34, r25	; 0x22
    216c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216e:	89 a1       	ldd	r24, Y+33	; 0x21
    2170:	9a a1       	ldd	r25, Y+34	; 0x22
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	69 f7       	brne	.-38     	; 0x2150 <userChooseOption+0xae>
    2176:	14 c0       	rjmp	.+40     	; 0x21a0 <userChooseOption+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2178:	6b a1       	ldd	r22, Y+35	; 0x23
    217a:	7c a1       	ldd	r23, Y+36	; 0x24
    217c:	8d a1       	ldd	r24, Y+37	; 0x25
    217e:	9e a1       	ldd	r25, Y+38	; 0x26
    2180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	9a a3       	std	Y+34, r25	; 0x22
    218a:	89 a3       	std	Y+33, r24	; 0x21
    218c:	89 a1       	ldd	r24, Y+33	; 0x21
    218e:	9a a1       	ldd	r25, Y+34	; 0x22
    2190:	9e 8f       	std	Y+30, r25	; 0x1e
    2192:	8d 8f       	std	Y+29, r24	; 0x1d
    2194:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2196:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <userChooseOption+0xf6>
    219c:	9e 8f       	std	Y+30, r25	; 0x1e
    219e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	if(userInput == '+')
    21a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    21a2:	8b 32       	cpi	r24, 0x2B	; 43
    21a4:	09 f0       	breq	.+2      	; 0x21a8 <userChooseOption+0x106>
    21a6:	7c c0       	rjmp	.+248    	; 0x22a0 <userChooseOption+0x1fe>
	{
		UART_sendByte(READY);
    21a8:	84 e6       	ldi	r24, 0x64	; 100
    21aa:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <UART_sendByte>
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	aa ef       	ldi	r26, 0xFA	; 250
    21b4:	b3 e4       	ldi	r27, 0x43	; 67
    21b6:	89 8f       	std	Y+25, r24	; 0x19
    21b8:	9a 8f       	std	Y+26, r25	; 0x1a
    21ba:	ab 8f       	std	Y+27, r26	; 0x1b
    21bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21be:	69 8d       	ldd	r22, Y+25	; 0x19
    21c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	4a e7       	ldi	r20, 0x7A	; 122
    21cc:	53 e4       	ldi	r21, 0x43	; 67
    21ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	8d 8b       	std	Y+21, r24	; 0x15
    21d8:	9e 8b       	std	Y+22, r25	; 0x16
    21da:	af 8b       	std	Y+23, r26	; 0x17
    21dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21de:	6d 89       	ldd	r22, Y+21	; 0x15
    21e0:	7e 89       	ldd	r23, Y+22	; 0x16
    21e2:	8f 89       	ldd	r24, Y+23	; 0x17
    21e4:	98 8d       	ldd	r25, Y+24	; 0x18
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e8       	ldi	r20, 0x80	; 128
    21ec:	5f e3       	ldi	r21, 0x3F	; 63
    21ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f2:	88 23       	and	r24, r24
    21f4:	2c f4       	brge	.+10     	; 0x2200 <userChooseOption+0x15e>
		__ticks = 1;
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	9c 8b       	std	Y+20, r25	; 0x14
    21fc:	8b 8b       	std	Y+19, r24	; 0x13
    21fe:	3f c0       	rjmp	.+126    	; 0x227e <userChooseOption+0x1dc>
	else if (__tmp > 65535)
    2200:	6d 89       	ldd	r22, Y+21	; 0x15
    2202:	7e 89       	ldd	r23, Y+22	; 0x16
    2204:	8f 89       	ldd	r24, Y+23	; 0x17
    2206:	98 8d       	ldd	r25, Y+24	; 0x18
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	3f ef       	ldi	r19, 0xFF	; 255
    220c:	4f e7       	ldi	r20, 0x7F	; 127
    220e:	57 e4       	ldi	r21, 0x47	; 71
    2210:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2214:	18 16       	cp	r1, r24
    2216:	4c f5       	brge	.+82     	; 0x226a <userChooseOption+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2218:	69 8d       	ldd	r22, Y+25	; 0x19
    221a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    221c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    221e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e2       	ldi	r20, 0x20	; 32
    2226:	51 e4       	ldi	r21, 0x41	; 65
    2228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	bc 01       	movw	r22, r24
    2232:	cd 01       	movw	r24, r26
    2234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	9c 8b       	std	Y+20, r25	; 0x14
    223e:	8b 8b       	std	Y+19, r24	; 0x13
    2240:	0f c0       	rjmp	.+30     	; 0x2260 <userChooseOption+0x1be>
    2242:	89 e1       	ldi	r24, 0x19	; 25
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	9a 8b       	std	Y+18, r25	; 0x12
    2248:	89 8b       	std	Y+17, r24	; 0x11
    224a:	89 89       	ldd	r24, Y+17	; 0x11
    224c:	9a 89       	ldd	r25, Y+18	; 0x12
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	f1 f7       	brne	.-4      	; 0x224e <userChooseOption+0x1ac>
    2252:	9a 8b       	std	Y+18, r25	; 0x12
    2254:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2256:	8b 89       	ldd	r24, Y+19	; 0x13
    2258:	9c 89       	ldd	r25, Y+20	; 0x14
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	9c 8b       	std	Y+20, r25	; 0x14
    225e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2260:	8b 89       	ldd	r24, Y+19	; 0x13
    2262:	9c 89       	ldd	r25, Y+20	; 0x14
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	69 f7       	brne	.-38     	; 0x2242 <userChooseOption+0x1a0>
    2268:	14 c0       	rjmp	.+40     	; 0x2292 <userChooseOption+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226a:	6d 89       	ldd	r22, Y+21	; 0x15
    226c:	7e 89       	ldd	r23, Y+22	; 0x16
    226e:	8f 89       	ldd	r24, Y+23	; 0x17
    2270:	98 8d       	ldd	r25, Y+24	; 0x18
    2272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	9c 8b       	std	Y+20, r25	; 0x14
    227c:	8b 8b       	std	Y+19, r24	; 0x13
    227e:	8b 89       	ldd	r24, Y+19	; 0x13
    2280:	9c 89       	ldd	r25, Y+20	; 0x14
    2282:	98 8b       	std	Y+16, r25	; 0x10
    2284:	8f 87       	std	Y+15, r24	; 0x0f
    2286:	8f 85       	ldd	r24, Y+15	; 0x0f
    2288:	98 89       	ldd	r25, Y+16	; 0x10
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	f1 f7       	brne	.-4      	; 0x228a <userChooseOption+0x1e8>
    228e:	98 8b       	std	Y+16, r25	; 0x10
    2290:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		UART_sendByte(CHG_PW);
    2292:	83 e0       	ldi	r24, 0x03	; 3
    2294:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <UART_sendByte>
		state = CHG_PW ;
    2298:	83 e0       	ldi	r24, 0x03	; 3
    229a:	80 93 0b 01 	sts	0x010B, r24
    229e:	7f c0       	rjmp	.+254    	; 0x239e <userChooseOption+0x2fc>
	}
	else if(userInput == '-')
    22a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    22a2:	8d 32       	cpi	r24, 0x2D	; 45
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <userChooseOption+0x206>
    22a6:	7b c0       	rjmp	.+246    	; 0x239e <userChooseOption+0x2fc>
	{
		UART_sendByte(READY);
    22a8:	84 e6       	ldi	r24, 0x64	; 100
    22aa:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <UART_sendByte>
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	aa ef       	ldi	r26, 0xFA	; 250
    22b4:	b3 e4       	ldi	r27, 0x43	; 67
    22b6:	8b 87       	std	Y+11, r24	; 0x0b
    22b8:	9c 87       	std	Y+12, r25	; 0x0c
    22ba:	ad 87       	std	Y+13, r26	; 0x0d
    22bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22be:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4a e7       	ldi	r20, 0x7A	; 122
    22cc:	53 e4       	ldi	r21, 0x43	; 67
    22ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	8f 83       	std	Y+7, r24	; 0x07
    22d8:	98 87       	std	Y+8, r25	; 0x08
    22da:	a9 87       	std	Y+9, r26	; 0x09
    22dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22de:	6f 81       	ldd	r22, Y+7	; 0x07
    22e0:	78 85       	ldd	r23, Y+8	; 0x08
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e8       	ldi	r20, 0x80	; 128
    22ec:	5f e3       	ldi	r21, 0x3F	; 63
    22ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f2:	88 23       	and	r24, r24
    22f4:	2c f4       	brge	.+10     	; 0x2300 <userChooseOption+0x25e>
		__ticks = 1;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	9e 83       	std	Y+6, r25	; 0x06
    22fc:	8d 83       	std	Y+5, r24	; 0x05
    22fe:	3f c0       	rjmp	.+126    	; 0x237e <userChooseOption+0x2dc>
	else if (__tmp > 65535)
    2300:	6f 81       	ldd	r22, Y+7	; 0x07
    2302:	78 85       	ldd	r23, Y+8	; 0x08
    2304:	89 85       	ldd	r24, Y+9	; 0x09
    2306:	9a 85       	ldd	r25, Y+10	; 0x0a
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	3f ef       	ldi	r19, 0xFF	; 255
    230c:	4f e7       	ldi	r20, 0x7F	; 127
    230e:	57 e4       	ldi	r21, 0x47	; 71
    2310:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2314:	18 16       	cp	r1, r24
    2316:	4c f5       	brge	.+82     	; 0x236a <userChooseOption+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2318:	6b 85       	ldd	r22, Y+11	; 0x0b
    231a:	7c 85       	ldd	r23, Y+12	; 0x0c
    231c:	8d 85       	ldd	r24, Y+13	; 0x0d
    231e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e2       	ldi	r20, 0x20	; 32
    2326:	51 e4       	ldi	r21, 0x41	; 65
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
    2340:	0f c0       	rjmp	.+30     	; 0x2360 <userChooseOption+0x2be>
    2342:	89 e1       	ldi	r24, 0x19	; 25
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9c 83       	std	Y+4, r25	; 0x04
    2348:	8b 83       	std	Y+3, r24	; 0x03
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <userChooseOption+0x2ac>
    2352:	9c 83       	std	Y+4, r25	; 0x04
    2354:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	9e 81       	ldd	r25, Y+6	; 0x06
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	9e 83       	std	Y+6, r25	; 0x06
    235e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2360:	8d 81       	ldd	r24, Y+5	; 0x05
    2362:	9e 81       	ldd	r25, Y+6	; 0x06
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	69 f7       	brne	.-38     	; 0x2342 <userChooseOption+0x2a0>
    2368:	14 c0       	rjmp	.+40     	; 0x2392 <userChooseOption+0x2f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236a:	6f 81       	ldd	r22, Y+7	; 0x07
    236c:	78 85       	ldd	r23, Y+8	; 0x08
    236e:	89 85       	ldd	r24, Y+9	; 0x09
    2370:	9a 85       	ldd	r25, Y+10	; 0x0a
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	9a 83       	std	Y+2, r25	; 0x02
    2384:	89 83       	std	Y+1, r24	; 0x01
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <userChooseOption+0x2e8>
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		UART_sendByte(O_DOOR);
    2392:	84 e0       	ldi	r24, 0x04	; 4
    2394:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <UART_sendByte>
		state= O_DOOR ;
    2398:	84 e0       	ldi	r24, 0x04	; 4
    239a:	80 93 0b 01 	sts	0x010B, r24
	}

}
    239e:	ab 96       	adiw	r28, 0x2b	; 43
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <systemConfirmOpenClose>:

void systemConfirmOpenClose(void)
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    23b8:	0e 94 a3 1b 	call	0x3746	; 0x3746 <LCD_clearScreen>
	LCD_displayString("DOOR is OPEN");
    23bc:	81 ed       	ldi	r24, 0xD1	; 209
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <LCD_displayString>
	while(open_flag == 0);
    23c4:	80 91 12 01 	lds	r24, 0x0112
    23c8:	88 23       	and	r24, r24
    23ca:	e1 f3       	breq	.-8      	; 0x23c4 <systemConfirmOpenClose+0x14>

	open_flag = 0 ;
    23cc:	10 92 12 01 	sts	0x0112, r1
}
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <systemClose>:

void systemClose (void)
{
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    23de:	0e 94 a3 1b 	call	0x3746	; 0x3746 <LCD_clearScreen>
	LCD_displayString("DOOR is closed");
    23e2:	8e ed       	ldi	r24, 0xDE	; 222
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <LCD_displayString>
	while(close_flag == 0);
    23ea:	80 91 13 01 	lds	r24, 0x0113
    23ee:	88 23       	and	r24, r24
    23f0:	e1 f3       	breq	.-8      	; 0x23ea <systemClose+0x14>
	timer1_deinit();
    23f2:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <timer1_deinit>
	close_flag = 0 ;
    23f6:	10 92 13 01 	sts	0x0113, r1
}
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret

00002400 <userEnterPW>:

void userEnterPW(void)
{
    2400:	0f 93       	push	r16
    2402:	1f 93       	push	r17
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	e2 97       	sbiw	r28, 0x32	; 50
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2418:	0e 94 a3 1b 	call	0x3746	; 0x3746 <LCD_clearScreen>
	LCD_displayString("Enter Your Password: ");
    241c:	8d ee       	ldi	r24, 0xED	; 237
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <LCD_displayString>
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	a0 e8       	ldi	r26, 0x80	; 128
    242a:	bf e3       	ldi	r27, 0x3F	; 63
    242c:	8f a3       	std	Y+39, r24	; 0x27
    242e:	98 a7       	std	Y+40, r25	; 0x28
    2430:	a9 a7       	std	Y+41, r26	; 0x29
    2432:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2434:	6f a1       	ldd	r22, Y+39	; 0x27
    2436:	78 a5       	ldd	r23, Y+40	; 0x28
    2438:	89 a5       	ldd	r24, Y+41	; 0x29
    243a:	9a a5       	ldd	r25, Y+42	; 0x2a
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	4a e7       	ldi	r20, 0x7A	; 122
    2442:	53 e4       	ldi	r21, 0x43	; 67
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	8b a3       	std	Y+35, r24	; 0x23
    244e:	9c a3       	std	Y+36, r25	; 0x24
    2450:	ad a3       	std	Y+37, r26	; 0x25
    2452:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2454:	6b a1       	ldd	r22, Y+35	; 0x23
    2456:	7c a1       	ldd	r23, Y+36	; 0x24
    2458:	8d a1       	ldd	r24, Y+37	; 0x25
    245a:	9e a1       	ldd	r25, Y+38	; 0x26
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e8       	ldi	r20, 0x80	; 128
    2462:	5f e3       	ldi	r21, 0x3F	; 63
    2464:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2468:	88 23       	and	r24, r24
    246a:	2c f4       	brge	.+10     	; 0x2476 <userEnterPW+0x76>
		__ticks = 1;
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	9a a3       	std	Y+34, r25	; 0x22
    2472:	89 a3       	std	Y+33, r24	; 0x21
    2474:	3f c0       	rjmp	.+126    	; 0x24f4 <userEnterPW+0xf4>
	else if (__tmp > 65535)
    2476:	6b a1       	ldd	r22, Y+35	; 0x23
    2478:	7c a1       	ldd	r23, Y+36	; 0x24
    247a:	8d a1       	ldd	r24, Y+37	; 0x25
    247c:	9e a1       	ldd	r25, Y+38	; 0x26
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	3f ef       	ldi	r19, 0xFF	; 255
    2482:	4f e7       	ldi	r20, 0x7F	; 127
    2484:	57 e4       	ldi	r21, 0x47	; 71
    2486:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    248a:	18 16       	cp	r1, r24
    248c:	4c f5       	brge	.+82     	; 0x24e0 <userEnterPW+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248e:	6f a1       	ldd	r22, Y+39	; 0x27
    2490:	78 a5       	ldd	r23, Y+40	; 0x28
    2492:	89 a5       	ldd	r24, Y+41	; 0x29
    2494:	9a a5       	ldd	r25, Y+42	; 0x2a
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e2       	ldi	r20, 0x20	; 32
    249c:	51 e4       	ldi	r21, 0x41	; 65
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	bc 01       	movw	r22, r24
    24a8:	cd 01       	movw	r24, r26
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	9a a3       	std	Y+34, r25	; 0x22
    24b4:	89 a3       	std	Y+33, r24	; 0x21
    24b6:	0f c0       	rjmp	.+30     	; 0x24d6 <userEnterPW+0xd6>
    24b8:	89 e1       	ldi	r24, 0x19	; 25
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	98 a3       	std	Y+32, r25	; 0x20
    24be:	8f 8f       	std	Y+31, r24	; 0x1f
    24c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24c2:	98 a1       	ldd	r25, Y+32	; 0x20
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <userEnterPW+0xc4>
    24c8:	98 a3       	std	Y+32, r25	; 0x20
    24ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24cc:	89 a1       	ldd	r24, Y+33	; 0x21
    24ce:	9a a1       	ldd	r25, Y+34	; 0x22
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	9a a3       	std	Y+34, r25	; 0x22
    24d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d6:	89 a1       	ldd	r24, Y+33	; 0x21
    24d8:	9a a1       	ldd	r25, Y+34	; 0x22
    24da:	00 97       	sbiw	r24, 0x00	; 0
    24dc:	69 f7       	brne	.-38     	; 0x24b8 <userEnterPW+0xb8>
    24de:	14 c0       	rjmp	.+40     	; 0x2508 <userEnterPW+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e0:	6b a1       	ldd	r22, Y+35	; 0x23
    24e2:	7c a1       	ldd	r23, Y+36	; 0x24
    24e4:	8d a1       	ldd	r24, Y+37	; 0x25
    24e6:	9e a1       	ldd	r25, Y+38	; 0x26
    24e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	9a a3       	std	Y+34, r25	; 0x22
    24f2:	89 a3       	std	Y+33, r24	; 0x21
    24f4:	89 a1       	ldd	r24, Y+33	; 0x21
    24f6:	9a a1       	ldd	r25, Y+34	; 0x22
    24f8:	9e 8f       	std	Y+30, r25	; 0x1e
    24fa:	8d 8f       	std	Y+29, r24	; 0x1d
    24fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	f1 f7       	brne	.-4      	; 0x2500 <userEnterPW+0x100>
    2504:	9e 8f       	std	Y+30, r25	; 0x1e
    2506:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_goToRowColumn(1,0);
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	60 e0       	ldi	r22, 0x00	; 0
    250c:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_goToRowColumn>

	uint8 i;
	uint8 password[pass_length +2];
	for(i=0 ; i<pass_length ; i++)
    2510:	1b a6       	std	Y+43, r1	; 0x2b
    2512:	88 c0       	rjmp	.+272    	; 0x2624 <userEnterPW+0x224>
	{
		password[i] = KeyPad_getPressedKey();
    2514:	8b a5       	ldd	r24, Y+43	; 0x2b
    2516:	08 2f       	mov	r16, r24
    2518:	10 e0       	ldi	r17, 0x00	; 0
    251a:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <KeyPad_getPressedKey>
    251e:	28 2f       	mov	r18, r24
    2520:	ce 01       	movw	r24, r28
    2522:	8c 96       	adiw	r24, 0x2c	; 44
    2524:	fc 01       	movw	r30, r24
    2526:	e0 0f       	add	r30, r16
    2528:	f1 1f       	adc	r31, r17
    252a:	20 83       	st	Z, r18
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	aa ef       	ldi	r26, 0xFA	; 250
    2532:	b4 e4       	ldi	r27, 0x44	; 68
    2534:	89 8f       	std	Y+25, r24	; 0x19
    2536:	9a 8f       	std	Y+26, r25	; 0x1a
    2538:	ab 8f       	std	Y+27, r26	; 0x1b
    253a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253c:	69 8d       	ldd	r22, Y+25	; 0x19
    253e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2540:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2542:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	4a e7       	ldi	r20, 0x7A	; 122
    254a:	53 e4       	ldi	r21, 0x43	; 67
    254c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	8d 8b       	std	Y+21, r24	; 0x15
    2556:	9e 8b       	std	Y+22, r25	; 0x16
    2558:	af 8b       	std	Y+23, r26	; 0x17
    255a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    255c:	6d 89       	ldd	r22, Y+21	; 0x15
    255e:	7e 89       	ldd	r23, Y+22	; 0x16
    2560:	8f 89       	ldd	r24, Y+23	; 0x17
    2562:	98 8d       	ldd	r25, Y+24	; 0x18
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e8       	ldi	r20, 0x80	; 128
    256a:	5f e3       	ldi	r21, 0x3F	; 63
    256c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2570:	88 23       	and	r24, r24
    2572:	2c f4       	brge	.+10     	; 0x257e <userEnterPW+0x17e>
		__ticks = 1;
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	9c 8b       	std	Y+20, r25	; 0x14
    257a:	8b 8b       	std	Y+19, r24	; 0x13
    257c:	3f c0       	rjmp	.+126    	; 0x25fc <userEnterPW+0x1fc>
	else if (__tmp > 65535)
    257e:	6d 89       	ldd	r22, Y+21	; 0x15
    2580:	7e 89       	ldd	r23, Y+22	; 0x16
    2582:	8f 89       	ldd	r24, Y+23	; 0x17
    2584:	98 8d       	ldd	r25, Y+24	; 0x18
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	3f ef       	ldi	r19, 0xFF	; 255
    258a:	4f e7       	ldi	r20, 0x7F	; 127
    258c:	57 e4       	ldi	r21, 0x47	; 71
    258e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2592:	18 16       	cp	r1, r24
    2594:	4c f5       	brge	.+82     	; 0x25e8 <userEnterPW+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2596:	69 8d       	ldd	r22, Y+25	; 0x19
    2598:	7a 8d       	ldd	r23, Y+26	; 0x1a
    259a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    259c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e2       	ldi	r20, 0x20	; 32
    25a4:	51 e4       	ldi	r21, 0x41	; 65
    25a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	bc 01       	movw	r22, r24
    25b0:	cd 01       	movw	r24, r26
    25b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	9c 8b       	std	Y+20, r25	; 0x14
    25bc:	8b 8b       	std	Y+19, r24	; 0x13
    25be:	0f c0       	rjmp	.+30     	; 0x25de <userEnterPW+0x1de>
    25c0:	89 e1       	ldi	r24, 0x19	; 25
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	9a 8b       	std	Y+18, r25	; 0x12
    25c6:	89 8b       	std	Y+17, r24	; 0x11
    25c8:	89 89       	ldd	r24, Y+17	; 0x11
    25ca:	9a 89       	ldd	r25, Y+18	; 0x12
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <userEnterPW+0x1cc>
    25d0:	9a 8b       	std	Y+18, r25	; 0x12
    25d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d4:	8b 89       	ldd	r24, Y+19	; 0x13
    25d6:	9c 89       	ldd	r25, Y+20	; 0x14
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	9c 8b       	std	Y+20, r25	; 0x14
    25dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25de:	8b 89       	ldd	r24, Y+19	; 0x13
    25e0:	9c 89       	ldd	r25, Y+20	; 0x14
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	69 f7       	brne	.-38     	; 0x25c0 <userEnterPW+0x1c0>
    25e6:	14 c0       	rjmp	.+40     	; 0x2610 <userEnterPW+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e8:	6d 89       	ldd	r22, Y+21	; 0x15
    25ea:	7e 89       	ldd	r23, Y+22	; 0x16
    25ec:	8f 89       	ldd	r24, Y+23	; 0x17
    25ee:	98 8d       	ldd	r25, Y+24	; 0x18
    25f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	9c 8b       	std	Y+20, r25	; 0x14
    25fa:	8b 8b       	std	Y+19, r24	; 0x13
    25fc:	8b 89       	ldd	r24, Y+19	; 0x13
    25fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2600:	98 8b       	std	Y+16, r25	; 0x10
    2602:	8f 87       	std	Y+15, r24	; 0x0f
    2604:	8f 85       	ldd	r24, Y+15	; 0x0f
    2606:	98 89       	ldd	r25, Y+16	; 0x10
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <userEnterPW+0x208>
    260c:	98 8b       	std	Y+16, r25	; 0x10
    260e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);
		LCD_goToRowColumn(1,i);
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	6b a5       	ldd	r22, Y+43	; 0x2b
    2614:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_goToRowColumn>
		LCD_displayCharacter('*');
    2618:	8a e2       	ldi	r24, 0x2A	; 42
    261a:	0e 94 00 19 	call	0x3200	; 0x3200 <LCD_displayCharacter>
	_delay_ms(1);
	LCD_goToRowColumn(1,0);

	uint8 i;
	uint8 password[pass_length +2];
	for(i=0 ; i<pass_length ; i++)
    261e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2620:	8f 5f       	subi	r24, 0xFF	; 255
    2622:	8b a7       	std	Y+43, r24	; 0x2b
    2624:	8b a5       	ldd	r24, Y+43	; 0x2b
    2626:	85 30       	cpi	r24, 0x05	; 5
    2628:	08 f4       	brcc	.+2      	; 0x262c <userEnterPW+0x22c>
    262a:	74 cf       	rjmp	.-280    	; 0x2514 <userEnterPW+0x114>
		_delay_ms(2000);
		LCD_goToRowColumn(1,i);
		LCD_displayCharacter('*');
	}

	password[i] = '#';
    262c:	8b a5       	ldd	r24, Y+43	; 0x2b
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	ce 01       	movw	r24, r28
    2634:	8c 96       	adiw	r24, 0x2c	; 44
    2636:	fc 01       	movw	r30, r24
    2638:	e2 0f       	add	r30, r18
    263a:	f3 1f       	adc	r31, r19
    263c:	83 e2       	ldi	r24, 0x23	; 35
    263e:	80 83       	st	Z, r24
	i++;
    2640:	8b a5       	ldd	r24, Y+43	; 0x2b
    2642:	8f 5f       	subi	r24, 0xFF	; 255
    2644:	8b a7       	std	Y+43, r24	; 0x2b

	password[i] ='\0';
    2646:	8b a5       	ldd	r24, Y+43	; 0x2b
    2648:	28 2f       	mov	r18, r24
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	ce 01       	movw	r24, r28
    264e:	8c 96       	adiw	r24, 0x2c	; 44
    2650:	fc 01       	movw	r30, r24
    2652:	e2 0f       	add	r30, r18
    2654:	f3 1f       	adc	r31, r19
    2656:	10 82       	st	Z, r1


	UART_sendByte(READY);
    2658:	84 e6       	ldi	r24, 0x64	; 100
    265a:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <UART_sendByte>
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	a0 e8       	ldi	r26, 0x80	; 128
    2664:	bf e3       	ldi	r27, 0x3F	; 63
    2666:	8b 87       	std	Y+11, r24	; 0x0b
    2668:	9c 87       	std	Y+12, r25	; 0x0c
    266a:	ad 87       	std	Y+13, r26	; 0x0d
    266c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    266e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2670:	7c 85       	ldd	r23, Y+12	; 0x0c
    2672:	8d 85       	ldd	r24, Y+13	; 0x0d
    2674:	9e 85       	ldd	r25, Y+14	; 0x0e
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	4a e7       	ldi	r20, 0x7A	; 122
    267c:	53 e4       	ldi	r21, 0x43	; 67
    267e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	8f 83       	std	Y+7, r24	; 0x07
    2688:	98 87       	std	Y+8, r25	; 0x08
    268a:	a9 87       	std	Y+9, r26	; 0x09
    268c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    268e:	6f 81       	ldd	r22, Y+7	; 0x07
    2690:	78 85       	ldd	r23, Y+8	; 0x08
    2692:	89 85       	ldd	r24, Y+9	; 0x09
    2694:	9a 85       	ldd	r25, Y+10	; 0x0a
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e8       	ldi	r20, 0x80	; 128
    269c:	5f e3       	ldi	r21, 0x3F	; 63
    269e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26a2:	88 23       	and	r24, r24
    26a4:	2c f4       	brge	.+10     	; 0x26b0 <userEnterPW+0x2b0>
		__ticks = 1;
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	9e 83       	std	Y+6, r25	; 0x06
    26ac:	8d 83       	std	Y+5, r24	; 0x05
    26ae:	3f c0       	rjmp	.+126    	; 0x272e <userEnterPW+0x32e>
	else if (__tmp > 65535)
    26b0:	6f 81       	ldd	r22, Y+7	; 0x07
    26b2:	78 85       	ldd	r23, Y+8	; 0x08
    26b4:	89 85       	ldd	r24, Y+9	; 0x09
    26b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	3f ef       	ldi	r19, 0xFF	; 255
    26bc:	4f e7       	ldi	r20, 0x7F	; 127
    26be:	57 e4       	ldi	r21, 0x47	; 71
    26c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c4:	18 16       	cp	r1, r24
    26c6:	4c f5       	brge	.+82     	; 0x271a <userEnterPW+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    26cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e2       	ldi	r20, 0x20	; 32
    26d6:	51 e4       	ldi	r21, 0x41	; 65
    26d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	bc 01       	movw	r22, r24
    26e2:	cd 01       	movw	r24, r26
    26e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	9e 83       	std	Y+6, r25	; 0x06
    26ee:	8d 83       	std	Y+5, r24	; 0x05
    26f0:	0f c0       	rjmp	.+30     	; 0x2710 <userEnterPW+0x310>
    26f2:	89 e1       	ldi	r24, 0x19	; 25
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	9c 83       	std	Y+4, r25	; 0x04
    26f8:	8b 83       	std	Y+3, r24	; 0x03
    26fa:	8b 81       	ldd	r24, Y+3	; 0x03
    26fc:	9c 81       	ldd	r25, Y+4	; 0x04
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <userEnterPW+0x2fe>
    2702:	9c 83       	std	Y+4, r25	; 0x04
    2704:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2706:	8d 81       	ldd	r24, Y+5	; 0x05
    2708:	9e 81       	ldd	r25, Y+6	; 0x06
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	9e 83       	std	Y+6, r25	; 0x06
    270e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2710:	8d 81       	ldd	r24, Y+5	; 0x05
    2712:	9e 81       	ldd	r25, Y+6	; 0x06
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	69 f7       	brne	.-38     	; 0x26f2 <userEnterPW+0x2f2>
    2718:	14 c0       	rjmp	.+40     	; 0x2742 <userEnterPW+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271a:	6f 81       	ldd	r22, Y+7	; 0x07
    271c:	78 85       	ldd	r23, Y+8	; 0x08
    271e:	89 85       	ldd	r24, Y+9	; 0x09
    2720:	9a 85       	ldd	r25, Y+10	; 0x0a
    2722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	9e 83       	std	Y+6, r25	; 0x06
    272c:	8d 83       	std	Y+5, r24	; 0x05
    272e:	8d 81       	ldd	r24, Y+5	; 0x05
    2730:	9e 81       	ldd	r25, Y+6	; 0x06
    2732:	9a 83       	std	Y+2, r25	; 0x02
    2734:	89 83       	std	Y+1, r24	; 0x01
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	9a 81       	ldd	r25, Y+2	; 0x02
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	f1 f7       	brne	.-4      	; 0x273a <userEnterPW+0x33a>
    273e:	9a 83       	std	Y+2, r25	; 0x02
    2740:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	UART_sendString(password);
    2742:	ce 01       	movw	r24, r28
    2744:	8c 96       	adiw	r24, 0x2c	; 44
    2746:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <UART_sendString>


	check = (UART_receiveByte());
    274a:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <UART_receiveByte>
    274e:	80 93 0c 01 	sts	0x010C, r24
}
    2752:	e2 96       	adiw	r28, 0x32	; 50
    2754:	0f b6       	in	r0, 0x3f	; 63
    2756:	f8 94       	cli
    2758:	de bf       	out	0x3e, r29	; 62
    275a:	0f be       	out	0x3f, r0	; 63
    275c:	cd bf       	out	0x3d, r28	; 61
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	1f 91       	pop	r17
    2764:	0f 91       	pop	r16
    2766:	08 95       	ret

00002768 <sendState>:

void sendState (STATE state)
{
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	2f 97       	sbiw	r28, 0x0f	; 15
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	8f 87       	std	Y+15, r24	; 0x0f
	UART_sendByte(READY);
    277e:	84 e6       	ldi	r24, 0x64	; 100
    2780:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <UART_sendByte>
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	a0 e8       	ldi	r26, 0x80	; 128
    278a:	bf e3       	ldi	r27, 0x3F	; 63
    278c:	8b 87       	std	Y+11, r24	; 0x0b
    278e:	9c 87       	std	Y+12, r25	; 0x0c
    2790:	ad 87       	std	Y+13, r26	; 0x0d
    2792:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2794:	6b 85       	ldd	r22, Y+11	; 0x0b
    2796:	7c 85       	ldd	r23, Y+12	; 0x0c
    2798:	8d 85       	ldd	r24, Y+13	; 0x0d
    279a:	9e 85       	ldd	r25, Y+14	; 0x0e
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	4a e7       	ldi	r20, 0x7A	; 122
    27a2:	53 e4       	ldi	r21, 0x43	; 67
    27a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	8f 83       	std	Y+7, r24	; 0x07
    27ae:	98 87       	std	Y+8, r25	; 0x08
    27b0:	a9 87       	std	Y+9, r26	; 0x09
    27b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27b4:	6f 81       	ldd	r22, Y+7	; 0x07
    27b6:	78 85       	ldd	r23, Y+8	; 0x08
    27b8:	89 85       	ldd	r24, Y+9	; 0x09
    27ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	40 e8       	ldi	r20, 0x80	; 128
    27c2:	5f e3       	ldi	r21, 0x3F	; 63
    27c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27c8:	88 23       	and	r24, r24
    27ca:	2c f4       	brge	.+10     	; 0x27d6 <sendState+0x6e>
		__ticks = 1;
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	9e 83       	std	Y+6, r25	; 0x06
    27d2:	8d 83       	std	Y+5, r24	; 0x05
    27d4:	3f c0       	rjmp	.+126    	; 0x2854 <sendState+0xec>
	else if (__tmp > 65535)
    27d6:	6f 81       	ldd	r22, Y+7	; 0x07
    27d8:	78 85       	ldd	r23, Y+8	; 0x08
    27da:	89 85       	ldd	r24, Y+9	; 0x09
    27dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	3f ef       	ldi	r19, 0xFF	; 255
    27e2:	4f e7       	ldi	r20, 0x7F	; 127
    27e4:	57 e4       	ldi	r21, 0x47	; 71
    27e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ea:	18 16       	cp	r1, r24
    27ec:	4c f5       	brge	.+82     	; 0x2840 <sendState+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e2       	ldi	r20, 0x20	; 32
    27fc:	51 e4       	ldi	r21, 0x41	; 65
    27fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	bc 01       	movw	r22, r24
    2808:	cd 01       	movw	r24, r26
    280a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	9e 83       	std	Y+6, r25	; 0x06
    2814:	8d 83       	std	Y+5, r24	; 0x05
    2816:	0f c0       	rjmp	.+30     	; 0x2836 <sendState+0xce>
    2818:	89 e1       	ldi	r24, 0x19	; 25
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	9c 83       	std	Y+4, r25	; 0x04
    281e:	8b 83       	std	Y+3, r24	; 0x03
    2820:	8b 81       	ldd	r24, Y+3	; 0x03
    2822:	9c 81       	ldd	r25, Y+4	; 0x04
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <sendState+0xbc>
    2828:	9c 83       	std	Y+4, r25	; 0x04
    282a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282c:	8d 81       	ldd	r24, Y+5	; 0x05
    282e:	9e 81       	ldd	r25, Y+6	; 0x06
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	9e 83       	std	Y+6, r25	; 0x06
    2834:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2836:	8d 81       	ldd	r24, Y+5	; 0x05
    2838:	9e 81       	ldd	r25, Y+6	; 0x06
    283a:	00 97       	sbiw	r24, 0x00	; 0
    283c:	69 f7       	brne	.-38     	; 0x2818 <sendState+0xb0>
    283e:	14 c0       	rjmp	.+40     	; 0x2868 <sendState+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2840:	6f 81       	ldd	r22, Y+7	; 0x07
    2842:	78 85       	ldd	r23, Y+8	; 0x08
    2844:	89 85       	ldd	r24, Y+9	; 0x09
    2846:	9a 85       	ldd	r25, Y+10	; 0x0a
    2848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	9e 83       	std	Y+6, r25	; 0x06
    2852:	8d 83       	std	Y+5, r24	; 0x05
    2854:	8d 81       	ldd	r24, Y+5	; 0x05
    2856:	9e 81       	ldd	r25, Y+6	; 0x06
    2858:	9a 83       	std	Y+2, r25	; 0x02
    285a:	89 83       	std	Y+1, r24	; 0x01
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	9a 81       	ldd	r25, Y+2	; 0x02
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <sendState+0xf8>
    2864:	9a 83       	std	Y+2, r25	; 0x02
    2866:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	UART_sendByte(state);
    2868:	8f 85       	ldd	r24, Y+15	; 0x0f
    286a:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <UART_sendByte>
}
    286e:	2f 96       	adiw	r28, 0x0f	; 15
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	08 95       	ret

00002880 <main>:
	extern volatile STATE state ;
	extern volatile CHECK check ;
	extern volatile  uint8 NumOfTry ;

int main(void)
{
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	a4 97       	sbiw	r28, 0x24	; 36
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	cd bf       	out	0x3d, r28	; 61


	timer_config timer1_config = {0,F_CPU_CLOCK_1024}; // overflow after 67s
    2894:	ce 01       	movw	r24, r28
    2896:	4d 96       	adiw	r24, 0x1d	; 29
    2898:	99 a3       	std	Y+33, r25	; 0x21
    289a:	88 a3       	std	Y+32, r24	; 0x20
    289c:	ed e0       	ldi	r30, 0x0D	; 13
    289e:	f1 e0       	ldi	r31, 0x01	; 1
    28a0:	fb a3       	std	Y+35, r31	; 0x23
    28a2:	ea a3       	std	Y+34, r30	; 0x22
    28a4:	f3 e0       	ldi	r31, 0x03	; 3
    28a6:	fc a3       	std	Y+36, r31	; 0x24
    28a8:	ea a1       	ldd	r30, Y+34	; 0x22
    28aa:	fb a1       	ldd	r31, Y+35	; 0x23
    28ac:	00 80       	ld	r0, Z
    28ae:	8a a1       	ldd	r24, Y+34	; 0x22
    28b0:	9b a1       	ldd	r25, Y+35	; 0x23
    28b2:	01 96       	adiw	r24, 0x01	; 1
    28b4:	9b a3       	std	Y+35, r25	; 0x23
    28b6:	8a a3       	std	Y+34, r24	; 0x22
    28b8:	e8 a1       	ldd	r30, Y+32	; 0x20
    28ba:	f9 a1       	ldd	r31, Y+33	; 0x21
    28bc:	00 82       	st	Z, r0
    28be:	88 a1       	ldd	r24, Y+32	; 0x20
    28c0:	99 a1       	ldd	r25, Y+33	; 0x21
    28c2:	01 96       	adiw	r24, 0x01	; 1
    28c4:	99 a3       	std	Y+33, r25	; 0x21
    28c6:	88 a3       	std	Y+32, r24	; 0x20
    28c8:	9c a1       	ldd	r25, Y+36	; 0x24
    28ca:	91 50       	subi	r25, 0x01	; 1
    28cc:	9c a3       	std	Y+36, r25	; 0x24
    28ce:	ec a1       	ldd	r30, Y+36	; 0x24
    28d0:	ee 23       	and	r30, r30
    28d2:	51 f7       	brne	.-44     	; 0x28a8 <main+0x28>

	modules_init();
    28d4:	0e 94 2a 06 	call	0xc54	; 0xc54 <modules_init>
    28d8:	10 c0       	rjmp	.+32     	; 0x28fa <main+0x7a>

	while(1)
	{
		while(check == UNMATCHED && state == INITIAL)
		{
			sendState(state);
    28da:	80 91 0b 01 	lds	r24, 0x010B
    28de:	0e 94 b4 13 	call	0x2768	; 0x2768 <sendState>
			user_setPW();
    28e2:	0e 94 66 06 	call	0xccc	; 0xccc <user_setPW>
			user_confirmPW();
    28e6:	0e 94 c1 0a 	call	0x1582	; 0x1582 <user_confirmPW>
			System_checkMatching();
    28ea:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <System_checkMatching>
			if(check == MATCHED)
    28ee:	80 91 0c 01 	lds	r24, 0x010C
    28f2:	8b 30       	cpi	r24, 0x0B	; 11
    28f4:	11 f4       	brne	.+4      	; 0x28fa <main+0x7a>
			{
				system_confirmSavePW();
    28f6:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <system_confirmSavePW>



	while(1)
	{
		while(check == UNMATCHED && state == INITIAL)
    28fa:	80 91 0c 01 	lds	r24, 0x010C
    28fe:	8a 30       	cpi	r24, 0x0A	; 10
    2900:	21 f4       	brne	.+8      	; 0x290a <main+0x8a>
    2902:	80 91 0b 01 	lds	r24, 0x010B
    2906:	82 30       	cpi	r24, 0x02	; 2
    2908:	41 f3       	breq	.-48     	; 0x28da <main+0x5a>
			{
				system_confirmSavePW();
			}
		}

		system_mainMenu();
    290a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <system_mainMenu>

		userChooseOption(); // get the option from user and send it to the MCU
    290e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <userChooseOption>

		sendState(state);
    2912:	80 91 0b 01 	lds	r24, 0x010B
    2916:	0e 94 b4 13 	call	0x2768	; 0x2768 <sendState>
		if(state == CHG_PW)
    291a:	80 91 0b 01 	lds	r24, 0x010B
    291e:	83 30       	cpi	r24, 0x03	; 3
    2920:	09 f0       	breq	.+2      	; 0x2924 <main+0xa4>
    2922:	b2 c0       	rjmp	.+356    	; 0x2a88 <main+0x208>
		{
			check = UNMATCHED;
    2924:	8a e0       	ldi	r24, 0x0A	; 10
    2926:	80 93 0c 01 	sts	0x010C, r24
    292a:	0b c0       	rjmp	.+22     	; 0x2942 <main+0xc2>

			while(check == UNMATCHED)
			{
				userEnterPW();
    292c:	0e 94 00 12 	call	0x2400	; 0x2400 <userEnterPW>

				NumOfTry ++;
    2930:	80 91 14 01 	lds	r24, 0x0114
    2934:	8f 5f       	subi	r24, 0xFF	; 255
    2936:	80 93 14 01 	sts	0x0114, r24
				if (NumOfTry >= MAX_TRY)
    293a:	80 91 14 01 	lds	r24, 0x0114
    293e:	83 30       	cpi	r24, 0x03	; 3
    2940:	20 f4       	brcc	.+8      	; 0x294a <main+0xca>
		sendState(state);
		if(state == CHG_PW)
		{
			check = UNMATCHED;

			while(check == UNMATCHED)
    2942:	80 91 0c 01 	lds	r24, 0x010C
    2946:	8a 30       	cpi	r24, 0x0A	; 10
    2948:	89 f3       	breq	.-30     	; 0x292c <main+0xac>
				{
					break;
				}
			}

			if(NumOfTry != MAX_TRY)
    294a:	80 91 14 01 	lds	r24, 0x0114
    294e:	83 30       	cpi	r24, 0x03	; 3
    2950:	09 f1       	breq	.+66     	; 0x2994 <main+0x114>
			{
				NumOfTry = 0;
    2952:	10 92 14 01 	sts	0x0114, r1
				check = UNMATCHED ;
    2956:	8a e0       	ldi	r24, 0x0A	; 10
    2958:	80 93 0c 01 	sts	0x010C, r24
    295c:	16 c0       	rjmp	.+44     	; 0x298a <main+0x10a>

				while( check == UNMATCHED )
				{

					user_setPW();
    295e:	0e 94 66 06 	call	0xccc	; 0xccc <user_setPW>
					user_confirmPW();
    2962:	0e 94 c1 0a 	call	0x1582	; 0x1582 <user_confirmPW>
					System_checkMatching();
    2966:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <System_checkMatching>
					if(check == MATCHED)
    296a:	80 91 0c 01 	lds	r24, 0x010C
    296e:	8b 30       	cpi	r24, 0x0B	; 11
    2970:	11 f4       	brne	.+4      	; 0x2976 <main+0xf6>
					{
						system_confirmSavePW();
    2972:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <system_confirmSavePW>
					}
					NumOfTry ++;
    2976:	80 91 14 01 	lds	r24, 0x0114
    297a:	8f 5f       	subi	r24, 0xFF	; 255
    297c:	80 93 14 01 	sts	0x0114, r24
					if (NumOfTry >= MAX_TRY)
    2980:	80 91 14 01 	lds	r24, 0x0114
    2984:	83 30       	cpi	r24, 0x03	; 3
    2986:	08 f0       	brcs	.+2      	; 0x298a <main+0x10a>
    2988:	b8 cf       	rjmp	.-144    	; 0x28fa <main+0x7a>
			if(NumOfTry != MAX_TRY)
			{
				NumOfTry = 0;
				check = UNMATCHED ;

				while( check == UNMATCHED )
    298a:	80 91 0c 01 	lds	r24, 0x010C
    298e:	8a 30       	cpi	r24, 0x0A	; 10
    2990:	31 f3       	breq	.-52     	; 0x295e <main+0xde>
    2992:	b3 cf       	rjmp	.-154    	; 0x28fa <main+0x7a>
					{
						break;
					}
				}
			}
			else if(NumOfTry == MAX_TRY)
    2994:	80 91 14 01 	lds	r24, 0x0114
    2998:	83 30       	cpi	r24, 0x03	; 3
    299a:	09 f0       	breq	.+2      	; 0x299e <main+0x11e>
    299c:	ae cf       	rjmp	.-164    	; 0x28fa <main+0x7a>
			{
				system_errorMessage ();
    299e:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <system_errorMessage>
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	90 e4       	ldi	r25, 0x40	; 64
    29a6:	ac e9       	ldi	r26, 0x9C	; 156
    29a8:	b5 e4       	ldi	r27, 0x45	; 69
    29aa:	89 8f       	std	Y+25, r24	; 0x19
    29ac:	9a 8f       	std	Y+26, r25	; 0x1a
    29ae:	ab 8f       	std	Y+27, r26	; 0x1b
    29b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b2:	69 8d       	ldd	r22, Y+25	; 0x19
    29b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	4a e7       	ldi	r20, 0x7A	; 122
    29c0:	53 e4       	ldi	r21, 0x43	; 67
    29c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	8d 8b       	std	Y+21, r24	; 0x15
    29cc:	9e 8b       	std	Y+22, r25	; 0x16
    29ce:	af 8b       	std	Y+23, r26	; 0x17
    29d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29d2:	6d 89       	ldd	r22, Y+21	; 0x15
    29d4:	7e 89       	ldd	r23, Y+22	; 0x16
    29d6:	8f 89       	ldd	r24, Y+23	; 0x17
    29d8:	98 8d       	ldd	r25, Y+24	; 0x18
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	40 e8       	ldi	r20, 0x80	; 128
    29e0:	5f e3       	ldi	r21, 0x3F	; 63
    29e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e6:	88 23       	and	r24, r24
    29e8:	2c f4       	brge	.+10     	; 0x29f4 <main+0x174>
		__ticks = 1;
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	9c 8b       	std	Y+20, r25	; 0x14
    29f0:	8b 8b       	std	Y+19, r24	; 0x13
    29f2:	3f c0       	rjmp	.+126    	; 0x2a72 <main+0x1f2>
	else if (__tmp > 65535)
    29f4:	6d 89       	ldd	r22, Y+21	; 0x15
    29f6:	7e 89       	ldd	r23, Y+22	; 0x16
    29f8:	8f 89       	ldd	r24, Y+23	; 0x17
    29fa:	98 8d       	ldd	r25, Y+24	; 0x18
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	3f ef       	ldi	r19, 0xFF	; 255
    2a00:	4f e7       	ldi	r20, 0x7F	; 127
    2a02:	57 e4       	ldi	r21, 0x47	; 71
    2a04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a08:	18 16       	cp	r1, r24
    2a0a:	4c f5       	brge	.+82     	; 0x2a5e <main+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a0c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e2       	ldi	r20, 0x20	; 32
    2a1a:	51 e4       	ldi	r21, 0x41	; 65
    2a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	bc 01       	movw	r22, r24
    2a26:	cd 01       	movw	r24, r26
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	9c 8b       	std	Y+20, r25	; 0x14
    2a32:	8b 8b       	std	Y+19, r24	; 0x13
    2a34:	0f c0       	rjmp	.+30     	; 0x2a54 <main+0x1d4>
    2a36:	89 e1       	ldi	r24, 0x19	; 25
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	9a 8b       	std	Y+18, r25	; 0x12
    2a3c:	89 8b       	std	Y+17, r24	; 0x11
    2a3e:	89 89       	ldd	r24, Y+17	; 0x11
    2a40:	9a 89       	ldd	r25, Y+18	; 0x12
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	f1 f7       	brne	.-4      	; 0x2a42 <main+0x1c2>
    2a46:	9a 8b       	std	Y+18, r25	; 0x12
    2a48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	9c 8b       	std	Y+20, r25	; 0x14
    2a52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a54:	8b 89       	ldd	r24, Y+19	; 0x13
    2a56:	9c 89       	ldd	r25, Y+20	; 0x14
    2a58:	00 97       	sbiw	r24, 0x00	; 0
    2a5a:	69 f7       	brne	.-38     	; 0x2a36 <main+0x1b6>
    2a5c:	4e cf       	rjmp	.-356    	; 0x28fa <main+0x7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a60:	7e 89       	ldd	r23, Y+22	; 0x16
    2a62:	8f 89       	ldd	r24, Y+23	; 0x17
    2a64:	98 8d       	ldd	r25, Y+24	; 0x18
    2a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	9c 8b       	std	Y+20, r25	; 0x14
    2a70:	8b 8b       	std	Y+19, r24	; 0x13
    2a72:	8b 89       	ldd	r24, Y+19	; 0x13
    2a74:	9c 89       	ldd	r25, Y+20	; 0x14
    2a76:	98 8b       	std	Y+16, r25	; 0x10
    2a78:	8f 87       	std	Y+15, r24	; 0x0f
    2a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a7c:	98 89       	ldd	r25, Y+16	; 0x10
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	f1 f7       	brne	.-4      	; 0x2a7e <main+0x1fe>
    2a82:	98 8b       	std	Y+16, r25	; 0x10
    2a84:	8f 87       	std	Y+15, r24	; 0x0f
    2a86:	39 cf       	rjmp	.-398    	; 0x28fa <main+0x7a>
				_delay_ms(5000);
			}
		}

		else if(state == O_DOOR)
    2a88:	80 91 0b 01 	lds	r24, 0x010B
    2a8c:	84 30       	cpi	r24, 0x04	; 4
    2a8e:	09 f0       	breq	.+2      	; 0x2a92 <main+0x212>
    2a90:	34 cf       	rjmp	.-408    	; 0x28fa <main+0x7a>
		{
			check = UNMATCHED ;
    2a92:	8a e0       	ldi	r24, 0x0A	; 10
    2a94:	80 93 0c 01 	sts	0x010C, r24
			NumOfTry = 0;
    2a98:	10 92 14 01 	sts	0x0114, r1
    2a9c:	0b c0       	rjmp	.+22     	; 0x2ab4 <main+0x234>

			while(check == UNMATCHED)
			{
				userEnterPW();
    2a9e:	0e 94 00 12 	call	0x2400	; 0x2400 <userEnterPW>

				NumOfTry ++;
    2aa2:	80 91 14 01 	lds	r24, 0x0114
    2aa6:	8f 5f       	subi	r24, 0xFF	; 255
    2aa8:	80 93 14 01 	sts	0x0114, r24
				if (NumOfTry >= MAX_TRY)
    2aac:	80 91 14 01 	lds	r24, 0x0114
    2ab0:	83 30       	cpi	r24, 0x03	; 3
    2ab2:	20 f4       	brcc	.+8      	; 0x2abc <main+0x23c>
		else if(state == O_DOOR)
		{
			check = UNMATCHED ;
			NumOfTry = 0;

			while(check == UNMATCHED)
    2ab4:	80 91 0c 01 	lds	r24, 0x010C
    2ab8:	8a 30       	cpi	r24, 0x0A	; 10
    2aba:	89 f3       	breq	.-30     	; 0x2a9e <main+0x21e>
				{
					break;
				}
			}

			if (NumOfTry != MAX_TRY)
    2abc:	80 91 14 01 	lds	r24, 0x0114
    2ac0:	83 30       	cpi	r24, 0x03	; 3
    2ac2:	79 f0       	breq	.+30     	; 0x2ae2 <main+0x262>
			{
				NumOfTry = 0;
    2ac4:	10 92 14 01 	sts	0x0114, r1
				Timer1_setup (&timer1_config);
    2ac8:	ce 01       	movw	r24, r28
    2aca:	4d 96       	adiw	r24, 0x1d	; 29
    2acc:	0e 94 3c 06 	call	0xc78	; 0xc78 <Timer1_setup>
				systemConfirmOpenClose();
    2ad0:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <systemConfirmOpenClose>
				Timer1_setCallBackChA(closeFlag);
    2ad4:	8c e5       	ldi	r24, 0x5C	; 92
    2ad6:	96 e0       	ldi	r25, 0x06	; 6
    2ad8:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <Timer1_setCallBackChA>
				systemClose ();
    2adc:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <systemClose>
    2ae0:	0c cf       	rjmp	.-488    	; 0x28fa <main+0x7a>

			}
			else if (NumOfTry == MAX_TRY)
    2ae2:	80 91 14 01 	lds	r24, 0x0114
    2ae6:	83 30       	cpi	r24, 0x03	; 3
    2ae8:	09 f0       	breq	.+2      	; 0x2aec <main+0x26c>
    2aea:	07 cf       	rjmp	.-498    	; 0x28fa <main+0x7a>
			{
				system_errorMessage();
    2aec:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <system_errorMessage>
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	90 e4       	ldi	r25, 0x40	; 64
    2af4:	ac e9       	ldi	r26, 0x9C	; 156
    2af6:	b5 e4       	ldi	r27, 0x45	; 69
    2af8:	8b 87       	std	Y+11, r24	; 0x0b
    2afa:	9c 87       	std	Y+12, r25	; 0x0c
    2afc:	ad 87       	std	Y+13, r26	; 0x0d
    2afe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b02:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	4a e7       	ldi	r20, 0x7A	; 122
    2b0e:	53 e4       	ldi	r21, 0x43	; 67
    2b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	8f 83       	std	Y+7, r24	; 0x07
    2b1a:	98 87       	std	Y+8, r25	; 0x08
    2b1c:	a9 87       	std	Y+9, r26	; 0x09
    2b1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b20:	6f 81       	ldd	r22, Y+7	; 0x07
    2b22:	78 85       	ldd	r23, Y+8	; 0x08
    2b24:	89 85       	ldd	r24, Y+9	; 0x09
    2b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e8       	ldi	r20, 0x80	; 128
    2b2e:	5f e3       	ldi	r21, 0x3F	; 63
    2b30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b34:	88 23       	and	r24, r24
    2b36:	2c f4       	brge	.+10     	; 0x2b42 <main+0x2c2>
		__ticks = 1;
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	9e 83       	std	Y+6, r25	; 0x06
    2b3e:	8d 83       	std	Y+5, r24	; 0x05
    2b40:	3f c0       	rjmp	.+126    	; 0x2bc0 <main+0x340>
	else if (__tmp > 65535)
    2b42:	6f 81       	ldd	r22, Y+7	; 0x07
    2b44:	78 85       	ldd	r23, Y+8	; 0x08
    2b46:	89 85       	ldd	r24, Y+9	; 0x09
    2b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	3f ef       	ldi	r19, 0xFF	; 255
    2b4e:	4f e7       	ldi	r20, 0x7F	; 127
    2b50:	57 e4       	ldi	r21, 0x47	; 71
    2b52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b56:	18 16       	cp	r1, r24
    2b58:	4c f5       	brge	.+82     	; 0x2bac <main+0x32c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	40 e2       	ldi	r20, 0x20	; 32
    2b68:	51 e4       	ldi	r21, 0x41	; 65
    2b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6e:	dc 01       	movw	r26, r24
    2b70:	cb 01       	movw	r24, r22
    2b72:	bc 01       	movw	r22, r24
    2b74:	cd 01       	movw	r24, r26
    2b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	9e 83       	std	Y+6, r25	; 0x06
    2b80:	8d 83       	std	Y+5, r24	; 0x05
    2b82:	0f c0       	rjmp	.+30     	; 0x2ba2 <main+0x322>
    2b84:	89 e1       	ldi	r24, 0x19	; 25
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	9c 83       	std	Y+4, r25	; 0x04
    2b8a:	8b 83       	std	Y+3, r24	; 0x03
    2b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	f1 f7       	brne	.-4      	; 0x2b90 <main+0x310>
    2b94:	9c 83       	std	Y+4, r25	; 0x04
    2b96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b98:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	9e 83       	std	Y+6, r25	; 0x06
    2ba0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba6:	00 97       	sbiw	r24, 0x00	; 0
    2ba8:	69 f7       	brne	.-38     	; 0x2b84 <main+0x304>
    2baa:	a7 ce       	rjmp	.-690    	; 0x28fa <main+0x7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bac:	6f 81       	ldd	r22, Y+7	; 0x07
    2bae:	78 85       	ldd	r23, Y+8	; 0x08
    2bb0:	89 85       	ldd	r24, Y+9	; 0x09
    2bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	9e 83       	std	Y+6, r25	; 0x06
    2bbe:	8d 83       	std	Y+5, r24	; 0x05
    2bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc4:	9a 83       	std	Y+2, r25	; 0x02
    2bc6:	89 83       	std	Y+1, r24	; 0x01
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	9a 81       	ldd	r25, Y+2	; 0x02
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	f1 f7       	brne	.-4      	; 0x2bcc <main+0x34c>
    2bd0:	9a 83       	std	Y+2, r25	; 0x02
    2bd2:	89 83       	std	Y+1, r24	; 0x01
    2bd4:	92 ce       	rjmp	.-732    	; 0x28fa <main+0x7a>

00002bd6 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    2bd6:	df 93       	push	r29
    2bd8:	cf 93       	push	r28
    2bda:	00 d0       	rcall	.+0      	; 0x2bdc <KeyPad_getPressedKey+0x6>
    2bdc:	cd b7       	in	r28, 0x3d	; 61
    2bde:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    2be0:	1a 82       	std	Y+2, r1	; 0x02
    2be2:	4c c0       	rjmp	.+152    	; 0x2c7c <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    2be4:	e4 e3       	ldi	r30, 0x34	; 52
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bea:	28 2f       	mov	r18, r24
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	80 e1       	ldi	r24, 0x10	; 16
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	02 c0       	rjmp	.+4      	; 0x2bf8 <KeyPad_getPressedKey+0x22>
    2bf4:	88 0f       	add	r24, r24
    2bf6:	99 1f       	adc	r25, r25
    2bf8:	2a 95       	dec	r18
    2bfa:	e2 f7       	brpl	.-8      	; 0x2bf4 <KeyPad_getPressedKey+0x1e>
    2bfc:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    2bfe:	e5 e3       	ldi	r30, 0x35	; 53
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	8a 81       	ldd	r24, Y+2	; 0x02
    2c04:	28 2f       	mov	r18, r24
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	80 e1       	ldi	r24, 0x10	; 16
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	02 2e       	mov	r0, r18
    2c0e:	02 c0       	rjmp	.+4      	; 0x2c14 <KeyPad_getPressedKey+0x3e>
    2c10:	88 0f       	add	r24, r24
    2c12:	99 1f       	adc	r25, r25
    2c14:	0a 94       	dec	r0
    2c16:	e2 f7       	brpl	.-8      	; 0x2c10 <KeyPad_getPressedKey+0x3a>
    2c18:	80 95       	com	r24
    2c1a:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    2c1c:	19 82       	std	Y+1, r1	; 0x01
    2c1e:	28 c0       	rjmp	.+80     	; 0x2c70 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    2c20:	e3 e3       	ldi	r30, 0x33	; 51
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	28 2f       	mov	r18, r24
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	88 2f       	mov	r24, r24
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	a9 01       	movw	r20, r18
    2c32:	02 c0       	rjmp	.+4      	; 0x2c38 <KeyPad_getPressedKey+0x62>
    2c34:	55 95       	asr	r21
    2c36:	47 95       	ror	r20
    2c38:	8a 95       	dec	r24
    2c3a:	e2 f7       	brpl	.-8      	; 0x2c34 <KeyPad_getPressedKey+0x5e>
    2c3c:	ca 01       	movw	r24, r20
    2c3e:	81 70       	andi	r24, 0x01	; 1
    2c40:	90 70       	andi	r25, 0x00	; 0
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	91 f4       	brne	.+36     	; 0x2c6a <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	88 2f       	mov	r24, r24
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	88 0f       	add	r24, r24
    2c4e:	99 1f       	adc	r25, r25
    2c50:	88 0f       	add	r24, r24
    2c52:	99 1f       	adc	r25, r25
    2c54:	98 2f       	mov	r25, r24
    2c56:	8a 81       	ldd	r24, Y+2	; 0x02
    2c58:	89 0f       	add	r24, r25
    2c5a:	8f 5f       	subi	r24, 0xFF	; 255
    2c5c:	0e 94 43 16 	call	0x2c86	; 0x2c86 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	cf 91       	pop	r28
    2c66:	df 91       	pop	r29
    2c68:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	8f 5f       	subi	r24, 0xFF	; 255
    2c6e:	89 83       	std	Y+1, r24	; 0x01
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	84 30       	cpi	r24, 0x04	; 4
    2c74:	a8 f2       	brcs	.-86     	; 0x2c20 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    2c76:	8a 81       	ldd	r24, Y+2	; 0x02
    2c78:	8f 5f       	subi	r24, 0xFF	; 255
    2c7a:	8a 83       	std	Y+2, r24	; 0x02
    2c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7e:	84 30       	cpi	r24, 0x04	; 4
    2c80:	08 f4       	brcc	.+2      	; 0x2c84 <KeyPad_getPressedKey+0xae>
    2c82:	b0 cf       	rjmp	.-160    	; 0x2be4 <KeyPad_getPressedKey+0xe>
    2c84:	ad cf       	rjmp	.-166    	; 0x2be0 <KeyPad_getPressedKey+0xa>

00002c86 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    2c86:	df 93       	push	r29
    2c88:	cf 93       	push	r28
    2c8a:	00 d0       	rcall	.+0      	; 0x2c8c <KeyPad_4x4_adjustKeyNumber+0x6>
    2c8c:	00 d0       	rcall	.+0      	; 0x2c8e <KeyPad_4x4_adjustKeyNumber+0x8>
    2c8e:	cd b7       	in	r28, 0x3d	; 61
    2c90:	de b7       	in	r29, 0x3e	; 62
    2c92:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	28 2f       	mov	r18, r24
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	3c 83       	std	Y+4, r19	; 0x04
    2c9c:	2b 83       	std	Y+3, r18	; 0x03
    2c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca2:	88 30       	cpi	r24, 0x08	; 8
    2ca4:	91 05       	cpc	r25, r1
    2ca6:	09 f4       	brne	.+2      	; 0x2caa <KeyPad_4x4_adjustKeyNumber+0x24>
    2ca8:	70 c0       	rjmp	.+224    	; 0x2d8a <KeyPad_4x4_adjustKeyNumber+0x104>
    2caa:	2b 81       	ldd	r18, Y+3	; 0x03
    2cac:	3c 81       	ldd	r19, Y+4	; 0x04
    2cae:	29 30       	cpi	r18, 0x09	; 9
    2cb0:	31 05       	cpc	r19, r1
    2cb2:	5c f5       	brge	.+86     	; 0x2d0a <KeyPad_4x4_adjustKeyNumber+0x84>
    2cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb8:	84 30       	cpi	r24, 0x04	; 4
    2cba:	91 05       	cpc	r25, r1
    2cbc:	09 f4       	brne	.+2      	; 0x2cc0 <KeyPad_4x4_adjustKeyNumber+0x3a>
    2cbe:	59 c0       	rjmp	.+178    	; 0x2d72 <KeyPad_4x4_adjustKeyNumber+0xec>
    2cc0:	2b 81       	ldd	r18, Y+3	; 0x03
    2cc2:	3c 81       	ldd	r19, Y+4	; 0x04
    2cc4:	25 30       	cpi	r18, 0x05	; 5
    2cc6:	31 05       	cpc	r19, r1
    2cc8:	9c f4       	brge	.+38     	; 0x2cf0 <KeyPad_4x4_adjustKeyNumber+0x6a>
    2cca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ccc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cce:	82 30       	cpi	r24, 0x02	; 2
    2cd0:	91 05       	cpc	r25, r1
    2cd2:	09 f4       	brne	.+2      	; 0x2cd6 <KeyPad_4x4_adjustKeyNumber+0x50>
    2cd4:	48 c0       	rjmp	.+144    	; 0x2d66 <KeyPad_4x4_adjustKeyNumber+0xe0>
    2cd6:	2b 81       	ldd	r18, Y+3	; 0x03
    2cd8:	3c 81       	ldd	r19, Y+4	; 0x04
    2cda:	23 30       	cpi	r18, 0x03	; 3
    2cdc:	31 05       	cpc	r19, r1
    2cde:	0c f0       	brlt	.+2      	; 0x2ce2 <KeyPad_4x4_adjustKeyNumber+0x5c>
    2ce0:	45 c0       	rjmp	.+138    	; 0x2d6c <KeyPad_4x4_adjustKeyNumber+0xe6>
    2ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce6:	81 30       	cpi	r24, 0x01	; 1
    2ce8:	91 05       	cpc	r25, r1
    2cea:	09 f4       	brne	.+2      	; 0x2cee <KeyPad_4x4_adjustKeyNumber+0x68>
    2cec:	39 c0       	rjmp	.+114    	; 0x2d60 <KeyPad_4x4_adjustKeyNumber+0xda>
    2cee:	67 c0       	rjmp	.+206    	; 0x2dbe <KeyPad_4x4_adjustKeyNumber+0x138>
    2cf0:	2b 81       	ldd	r18, Y+3	; 0x03
    2cf2:	3c 81       	ldd	r19, Y+4	; 0x04
    2cf4:	26 30       	cpi	r18, 0x06	; 6
    2cf6:	31 05       	cpc	r19, r1
    2cf8:	09 f4       	brne	.+2      	; 0x2cfc <KeyPad_4x4_adjustKeyNumber+0x76>
    2cfa:	41 c0       	rjmp	.+130    	; 0x2d7e <KeyPad_4x4_adjustKeyNumber+0xf8>
    2cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2d00:	87 30       	cpi	r24, 0x07	; 7
    2d02:	91 05       	cpc	r25, r1
    2d04:	0c f0       	brlt	.+2      	; 0x2d08 <KeyPad_4x4_adjustKeyNumber+0x82>
    2d06:	3e c0       	rjmp	.+124    	; 0x2d84 <KeyPad_4x4_adjustKeyNumber+0xfe>
    2d08:	37 c0       	rjmp	.+110    	; 0x2d78 <KeyPad_4x4_adjustKeyNumber+0xf2>
    2d0a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d0c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d0e:	2c 30       	cpi	r18, 0x0C	; 12
    2d10:	31 05       	cpc	r19, r1
    2d12:	09 f4       	brne	.+2      	; 0x2d16 <KeyPad_4x4_adjustKeyNumber+0x90>
    2d14:	46 c0       	rjmp	.+140    	; 0x2da2 <KeyPad_4x4_adjustKeyNumber+0x11c>
    2d16:	8b 81       	ldd	r24, Y+3	; 0x03
    2d18:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1a:	8d 30       	cpi	r24, 0x0D	; 13
    2d1c:	91 05       	cpc	r25, r1
    2d1e:	5c f4       	brge	.+22     	; 0x2d36 <KeyPad_4x4_adjustKeyNumber+0xb0>
    2d20:	2b 81       	ldd	r18, Y+3	; 0x03
    2d22:	3c 81       	ldd	r19, Y+4	; 0x04
    2d24:	2a 30       	cpi	r18, 0x0A	; 10
    2d26:	31 05       	cpc	r19, r1
    2d28:	b1 f1       	breq	.+108    	; 0x2d96 <KeyPad_4x4_adjustKeyNumber+0x110>
    2d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2e:	8b 30       	cpi	r24, 0x0B	; 11
    2d30:	91 05       	cpc	r25, r1
    2d32:	a4 f5       	brge	.+104    	; 0x2d9c <KeyPad_4x4_adjustKeyNumber+0x116>
    2d34:	2d c0       	rjmp	.+90     	; 0x2d90 <KeyPad_4x4_adjustKeyNumber+0x10a>
    2d36:	2b 81       	ldd	r18, Y+3	; 0x03
    2d38:	3c 81       	ldd	r19, Y+4	; 0x04
    2d3a:	2e 30       	cpi	r18, 0x0E	; 14
    2d3c:	31 05       	cpc	r19, r1
    2d3e:	b9 f1       	breq	.+110    	; 0x2dae <KeyPad_4x4_adjustKeyNumber+0x128>
    2d40:	8b 81       	ldd	r24, Y+3	; 0x03
    2d42:	9c 81       	ldd	r25, Y+4	; 0x04
    2d44:	8e 30       	cpi	r24, 0x0E	; 14
    2d46:	91 05       	cpc	r25, r1
    2d48:	7c f1       	brlt	.+94     	; 0x2da8 <KeyPad_4x4_adjustKeyNumber+0x122>
    2d4a:	2b 81       	ldd	r18, Y+3	; 0x03
    2d4c:	3c 81       	ldd	r19, Y+4	; 0x04
    2d4e:	2f 30       	cpi	r18, 0x0F	; 15
    2d50:	31 05       	cpc	r19, r1
    2d52:	79 f1       	breq	.+94     	; 0x2db2 <KeyPad_4x4_adjustKeyNumber+0x12c>
    2d54:	8b 81       	ldd	r24, Y+3	; 0x03
    2d56:	9c 81       	ldd	r25, Y+4	; 0x04
    2d58:	80 31       	cpi	r24, 0x10	; 16
    2d5a:	91 05       	cpc	r25, r1
    2d5c:	69 f1       	breq	.+90     	; 0x2db8 <KeyPad_4x4_adjustKeyNumber+0x132>
    2d5e:	2f c0       	rjmp	.+94     	; 0x2dbe <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    2d60:	97 e0       	ldi	r25, 0x07	; 7
    2d62:	9a 83       	std	Y+2, r25	; 0x02
    2d64:	2e c0       	rjmp	.+92     	; 0x2dc2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    2d66:	28 e0       	ldi	r18, 0x08	; 8
    2d68:	2a 83       	std	Y+2, r18	; 0x02
    2d6a:	2b c0       	rjmp	.+86     	; 0x2dc2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    2d6c:	39 e0       	ldi	r19, 0x09	; 9
    2d6e:	3a 83       	std	Y+2, r19	; 0x02
    2d70:	28 c0       	rjmp	.+80     	; 0x2dc2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
    2d72:	85 e2       	ldi	r24, 0x25	; 37
    2d74:	8a 83       	std	Y+2, r24	; 0x02
    2d76:	25 c0       	rjmp	.+74     	; 0x2dc2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    2d78:	94 e0       	ldi	r25, 0x04	; 4
    2d7a:	9a 83       	std	Y+2, r25	; 0x02
    2d7c:	22 c0       	rjmp	.+68     	; 0x2dc2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    2d7e:	25 e0       	ldi	r18, 0x05	; 5
    2d80:	2a 83       	std	Y+2, r18	; 0x02
    2d82:	1f c0       	rjmp	.+62     	; 0x2dc2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    2d84:	36 e0       	ldi	r19, 0x06	; 6
    2d86:	3a 83       	std	Y+2, r19	; 0x02
    2d88:	1c c0       	rjmp	.+56     	; 0x2dc2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    2d8a:	8a e2       	ldi	r24, 0x2A	; 42
    2d8c:	8a 83       	std	Y+2, r24	; 0x02
    2d8e:	19 c0       	rjmp	.+50     	; 0x2dc2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    2d90:	91 e0       	ldi	r25, 0x01	; 1
    2d92:	9a 83       	std	Y+2, r25	; 0x02
    2d94:	16 c0       	rjmp	.+44     	; 0x2dc2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    2d96:	22 e0       	ldi	r18, 0x02	; 2
    2d98:	2a 83       	std	Y+2, r18	; 0x02
    2d9a:	13 c0       	rjmp	.+38     	; 0x2dc2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    2d9c:	33 e0       	ldi	r19, 0x03	; 3
    2d9e:	3a 83       	std	Y+2, r19	; 0x02
    2da0:	10 c0       	rjmp	.+32     	; 0x2dc2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    2da2:	8d e2       	ldi	r24, 0x2D	; 45
    2da4:	8a 83       	std	Y+2, r24	; 0x02
    2da6:	0d c0       	rjmp	.+26     	; 0x2dc2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    2da8:	9d e0       	ldi	r25, 0x0D	; 13
    2daa:	9a 83       	std	Y+2, r25	; 0x02
    2dac:	0a c0       	rjmp	.+20     	; 0x2dc2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    2dae:	1a 82       	std	Y+2, r1	; 0x02
    2db0:	08 c0       	rjmp	.+16     	; 0x2dc2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    2db2:	2d e3       	ldi	r18, 0x3D	; 61
    2db4:	2a 83       	std	Y+2, r18	; 0x02
    2db6:	05 c0       	rjmp	.+10     	; 0x2dc2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    2db8:	3b e2       	ldi	r19, 0x2B	; 43
    2dba:	3a 83       	std	Y+2, r19	; 0x02
    2dbc:	02 c0       	rjmp	.+4      	; 0x2dc2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
    2dc0:	8a 83       	std	Y+2, r24	; 0x02
    2dc2:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    2dc4:	0f 90       	pop	r0
    2dc6:	0f 90       	pop	r0
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    2dda:	aa e3       	ldi	r26, 0x3A	; 58
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	ea e3       	ldi	r30, 0x3A	; 58
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	87 60       	ori	r24, 0x07	; 7
    2de6:	8c 93       	st	X, r24
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    2de8:	e7 e3       	ldi	r30, 0x37	; 55
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	8f ef       	ldi	r24, 0xFF	; 255
    2dee:	80 83       	st	Z, r24
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2df0:	88 e3       	ldi	r24, 0x38	; 56
    2df2:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_sendCommand>
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    2df6:	8c e0       	ldi	r24, 0x0C	; 12
    2df8:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_sendCommand>
}
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	cd b7       	in	r28, 0x3d	; 61
    2e0e:	de b7       	in	r29, 0x3e	; 62
    2e10:	e9 97       	sbiw	r28, 0x39	; 57
    2e12:	0f b6       	in	r0, 0x3f	; 63
    2e14:	f8 94       	cli
    2e16:	de bf       	out	0x3e, r29	; 62
    2e18:	0f be       	out	0x3f, r0	; 63
    2e1a:	cd bf       	out	0x3d, r28	; 61
    2e1c:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    2e1e:	ab e3       	ldi	r26, 0x3B	; 59
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	eb e3       	ldi	r30, 0x3B	; 59
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	80 81       	ld	r24, Z
    2e28:	8b 7f       	andi	r24, 0xFB	; 251
    2e2a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2e2c:	ab e3       	ldi	r26, 0x3B	; 59
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	eb e3       	ldi	r30, 0x3B	; 59
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	80 81       	ld	r24, Z
    2e36:	8d 7f       	andi	r24, 0xFD	; 253
    2e38:	8c 93       	st	X, r24
    2e3a:	80 e0       	ldi	r24, 0x00	; 0
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	a0 e8       	ldi	r26, 0x80	; 128
    2e40:	bf e3       	ldi	r27, 0x3F	; 63
    2e42:	8d ab       	std	Y+53, r24	; 0x35
    2e44:	9e ab       	std	Y+54, r25	; 0x36
    2e46:	af ab       	std	Y+55, r26	; 0x37
    2e48:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e4a:	6d a9       	ldd	r22, Y+53	; 0x35
    2e4c:	7e a9       	ldd	r23, Y+54	; 0x36
    2e4e:	8f a9       	ldd	r24, Y+55	; 0x37
    2e50:	98 ad       	ldd	r25, Y+56	; 0x38
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	4a e7       	ldi	r20, 0x7A	; 122
    2e58:	53 e4       	ldi	r21, 0x43	; 67
    2e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	89 ab       	std	Y+49, r24	; 0x31
    2e64:	9a ab       	std	Y+50, r25	; 0x32
    2e66:	ab ab       	std	Y+51, r26	; 0x33
    2e68:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e6a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e6c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e6e:	8b a9       	ldd	r24, Y+51	; 0x33
    2e70:	9c a9       	ldd	r25, Y+52	; 0x34
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	40 e8       	ldi	r20, 0x80	; 128
    2e78:	5f e3       	ldi	r21, 0x3F	; 63
    2e7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e7e:	88 23       	and	r24, r24
    2e80:	2c f4       	brge	.+10     	; 0x2e8c <LCD_sendCommand+0x84>
		__ticks = 1;
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	98 ab       	std	Y+48, r25	; 0x30
    2e88:	8f a7       	std	Y+47, r24	; 0x2f
    2e8a:	3f c0       	rjmp	.+126    	; 0x2f0a <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    2e8c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e8e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e90:	8b a9       	ldd	r24, Y+51	; 0x33
    2e92:	9c a9       	ldd	r25, Y+52	; 0x34
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	3f ef       	ldi	r19, 0xFF	; 255
    2e98:	4f e7       	ldi	r20, 0x7F	; 127
    2e9a:	57 e4       	ldi	r21, 0x47	; 71
    2e9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ea0:	18 16       	cp	r1, r24
    2ea2:	4c f5       	brge	.+82     	; 0x2ef6 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ea6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ea8:	8f a9       	ldd	r24, Y+55	; 0x37
    2eaa:	98 ad       	ldd	r25, Y+56	; 0x38
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	40 e2       	ldi	r20, 0x20	; 32
    2eb2:	51 e4       	ldi	r21, 0x41	; 65
    2eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	bc 01       	movw	r22, r24
    2ebe:	cd 01       	movw	r24, r26
    2ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	98 ab       	std	Y+48, r25	; 0x30
    2eca:	8f a7       	std	Y+47, r24	; 0x2f
    2ecc:	0f c0       	rjmp	.+30     	; 0x2eec <LCD_sendCommand+0xe4>
    2ece:	89 e1       	ldi	r24, 0x19	; 25
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	9e a7       	std	Y+46, r25	; 0x2e
    2ed4:	8d a7       	std	Y+45, r24	; 0x2d
    2ed6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ed8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	f1 f7       	brne	.-4      	; 0x2eda <LCD_sendCommand+0xd2>
    2ede:	9e a7       	std	Y+46, r25	; 0x2e
    2ee0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ee4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ee6:	01 97       	sbiw	r24, 0x01	; 1
    2ee8:	98 ab       	std	Y+48, r25	; 0x30
    2eea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eec:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eee:	98 a9       	ldd	r25, Y+48	; 0x30
    2ef0:	00 97       	sbiw	r24, 0x00	; 0
    2ef2:	69 f7       	brne	.-38     	; 0x2ece <LCD_sendCommand+0xc6>
    2ef4:	14 c0       	rjmp	.+40     	; 0x2f1e <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ef6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ef8:	7a a9       	ldd	r23, Y+50	; 0x32
    2efa:	8b a9       	ldd	r24, Y+51	; 0x33
    2efc:	9c a9       	ldd	r25, Y+52	; 0x34
    2efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	98 ab       	std	Y+48, r25	; 0x30
    2f08:	8f a7       	std	Y+47, r24	; 0x2f
    2f0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f0c:	98 a9       	ldd	r25, Y+48	; 0x30
    2f0e:	9c a7       	std	Y+44, r25	; 0x2c
    2f10:	8b a7       	std	Y+43, r24	; 0x2b
    2f12:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f14:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	f1 f7       	brne	.-4      	; 0x2f16 <LCD_sendCommand+0x10e>
    2f1a:	9c a7       	std	Y+44, r25	; 0x2c
    2f1c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2f1e:	ab e3       	ldi	r26, 0x3B	; 59
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	eb e3       	ldi	r30, 0x3B	; 59
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	81 60       	ori	r24, 0x01	; 1
    2f2a:	8c 93       	st	X, r24
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	a0 e8       	ldi	r26, 0x80	; 128
    2f32:	bf e3       	ldi	r27, 0x3F	; 63
    2f34:	8f a3       	std	Y+39, r24	; 0x27
    2f36:	98 a7       	std	Y+40, r25	; 0x28
    2f38:	a9 a7       	std	Y+41, r26	; 0x29
    2f3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3c:	6f a1       	ldd	r22, Y+39	; 0x27
    2f3e:	78 a5       	ldd	r23, Y+40	; 0x28
    2f40:	89 a5       	ldd	r24, Y+41	; 0x29
    2f42:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	4a e7       	ldi	r20, 0x7A	; 122
    2f4a:	53 e4       	ldi	r21, 0x43	; 67
    2f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	8b a3       	std	Y+35, r24	; 0x23
    2f56:	9c a3       	std	Y+36, r25	; 0x24
    2f58:	ad a3       	std	Y+37, r26	; 0x25
    2f5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f5c:	6b a1       	ldd	r22, Y+35	; 0x23
    2f5e:	7c a1       	ldd	r23, Y+36	; 0x24
    2f60:	8d a1       	ldd	r24, Y+37	; 0x25
    2f62:	9e a1       	ldd	r25, Y+38	; 0x26
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e8       	ldi	r20, 0x80	; 128
    2f6a:	5f e3       	ldi	r21, 0x3F	; 63
    2f6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f70:	88 23       	and	r24, r24
    2f72:	2c f4       	brge	.+10     	; 0x2f7e <LCD_sendCommand+0x176>
		__ticks = 1;
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	9a a3       	std	Y+34, r25	; 0x22
    2f7a:	89 a3       	std	Y+33, r24	; 0x21
    2f7c:	3f c0       	rjmp	.+126    	; 0x2ffc <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    2f7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2f80:	7c a1       	ldd	r23, Y+36	; 0x24
    2f82:	8d a1       	ldd	r24, Y+37	; 0x25
    2f84:	9e a1       	ldd	r25, Y+38	; 0x26
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	3f ef       	ldi	r19, 0xFF	; 255
    2f8a:	4f e7       	ldi	r20, 0x7F	; 127
    2f8c:	57 e4       	ldi	r21, 0x47	; 71
    2f8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f92:	18 16       	cp	r1, r24
    2f94:	4c f5       	brge	.+82     	; 0x2fe8 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f96:	6f a1       	ldd	r22, Y+39	; 0x27
    2f98:	78 a5       	ldd	r23, Y+40	; 0x28
    2f9a:	89 a5       	ldd	r24, Y+41	; 0x29
    2f9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e2       	ldi	r20, 0x20	; 32
    2fa4:	51 e4       	ldi	r21, 0x41	; 65
    2fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	bc 01       	movw	r22, r24
    2fb0:	cd 01       	movw	r24, r26
    2fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	9a a3       	std	Y+34, r25	; 0x22
    2fbc:	89 a3       	std	Y+33, r24	; 0x21
    2fbe:	0f c0       	rjmp	.+30     	; 0x2fde <LCD_sendCommand+0x1d6>
    2fc0:	89 e1       	ldi	r24, 0x19	; 25
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	98 a3       	std	Y+32, r25	; 0x20
    2fc6:	8f 8f       	std	Y+31, r24	; 0x1f
    2fc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fca:	98 a1       	ldd	r25, Y+32	; 0x20
    2fcc:	01 97       	sbiw	r24, 0x01	; 1
    2fce:	f1 f7       	brne	.-4      	; 0x2fcc <LCD_sendCommand+0x1c4>
    2fd0:	98 a3       	std	Y+32, r25	; 0x20
    2fd2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd4:	89 a1       	ldd	r24, Y+33	; 0x21
    2fd6:	9a a1       	ldd	r25, Y+34	; 0x22
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	9a a3       	std	Y+34, r25	; 0x22
    2fdc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fde:	89 a1       	ldd	r24, Y+33	; 0x21
    2fe0:	9a a1       	ldd	r25, Y+34	; 0x22
    2fe2:	00 97       	sbiw	r24, 0x00	; 0
    2fe4:	69 f7       	brne	.-38     	; 0x2fc0 <LCD_sendCommand+0x1b8>
    2fe6:	14 c0       	rjmp	.+40     	; 0x3010 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe8:	6b a1       	ldd	r22, Y+35	; 0x23
    2fea:	7c a1       	ldd	r23, Y+36	; 0x24
    2fec:	8d a1       	ldd	r24, Y+37	; 0x25
    2fee:	9e a1       	ldd	r25, Y+38	; 0x26
    2ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	9a a3       	std	Y+34, r25	; 0x22
    2ffa:	89 a3       	std	Y+33, r24	; 0x21
    2ffc:	89 a1       	ldd	r24, Y+33	; 0x21
    2ffe:	9a a1       	ldd	r25, Y+34	; 0x22
    3000:	9e 8f       	std	Y+30, r25	; 0x1e
    3002:	8d 8f       	std	Y+29, r24	; 0x1d
    3004:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3006:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3008:	01 97       	sbiw	r24, 0x01	; 1
    300a:	f1 f7       	brne	.-4      	; 0x3008 <LCD_sendCommand+0x200>
    300c:	9e 8f       	std	Y+30, r25	; 0x1e
    300e:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    3010:	e8 e3       	ldi	r30, 0x38	; 56
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	89 ad       	ldd	r24, Y+57	; 0x39
    3016:	80 83       	st	Z, r24
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	a0 e8       	ldi	r26, 0x80	; 128
    301e:	bf e3       	ldi	r27, 0x3F	; 63
    3020:	89 8f       	std	Y+25, r24	; 0x19
    3022:	9a 8f       	std	Y+26, r25	; 0x1a
    3024:	ab 8f       	std	Y+27, r26	; 0x1b
    3026:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3028:	69 8d       	ldd	r22, Y+25	; 0x19
    302a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    302c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    302e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	4a e7       	ldi	r20, 0x7A	; 122
    3036:	53 e4       	ldi	r21, 0x43	; 67
    3038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	8d 8b       	std	Y+21, r24	; 0x15
    3042:	9e 8b       	std	Y+22, r25	; 0x16
    3044:	af 8b       	std	Y+23, r26	; 0x17
    3046:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3048:	6d 89       	ldd	r22, Y+21	; 0x15
    304a:	7e 89       	ldd	r23, Y+22	; 0x16
    304c:	8f 89       	ldd	r24, Y+23	; 0x17
    304e:	98 8d       	ldd	r25, Y+24	; 0x18
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	40 e8       	ldi	r20, 0x80	; 128
    3056:	5f e3       	ldi	r21, 0x3F	; 63
    3058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    305c:	88 23       	and	r24, r24
    305e:	2c f4       	brge	.+10     	; 0x306a <LCD_sendCommand+0x262>
		__ticks = 1;
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	9c 8b       	std	Y+20, r25	; 0x14
    3066:	8b 8b       	std	Y+19, r24	; 0x13
    3068:	3f c0       	rjmp	.+126    	; 0x30e8 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    306a:	6d 89       	ldd	r22, Y+21	; 0x15
    306c:	7e 89       	ldd	r23, Y+22	; 0x16
    306e:	8f 89       	ldd	r24, Y+23	; 0x17
    3070:	98 8d       	ldd	r25, Y+24	; 0x18
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	3f ef       	ldi	r19, 0xFF	; 255
    3076:	4f e7       	ldi	r20, 0x7F	; 127
    3078:	57 e4       	ldi	r21, 0x47	; 71
    307a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    307e:	18 16       	cp	r1, r24
    3080:	4c f5       	brge	.+82     	; 0x30d4 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3082:	69 8d       	ldd	r22, Y+25	; 0x19
    3084:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3086:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3088:	9c 8d       	ldd	r25, Y+28	; 0x1c
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e2       	ldi	r20, 0x20	; 32
    3090:	51 e4       	ldi	r21, 0x41	; 65
    3092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	bc 01       	movw	r22, r24
    309c:	cd 01       	movw	r24, r26
    309e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	9c 8b       	std	Y+20, r25	; 0x14
    30a8:	8b 8b       	std	Y+19, r24	; 0x13
    30aa:	0f c0       	rjmp	.+30     	; 0x30ca <LCD_sendCommand+0x2c2>
    30ac:	89 e1       	ldi	r24, 0x19	; 25
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	9a 8b       	std	Y+18, r25	; 0x12
    30b2:	89 8b       	std	Y+17, r24	; 0x11
    30b4:	89 89       	ldd	r24, Y+17	; 0x11
    30b6:	9a 89       	ldd	r25, Y+18	; 0x12
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	f1 f7       	brne	.-4      	; 0x30b8 <LCD_sendCommand+0x2b0>
    30bc:	9a 8b       	std	Y+18, r25	; 0x12
    30be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c0:	8b 89       	ldd	r24, Y+19	; 0x13
    30c2:	9c 89       	ldd	r25, Y+20	; 0x14
    30c4:	01 97       	sbiw	r24, 0x01	; 1
    30c6:	9c 8b       	std	Y+20, r25	; 0x14
    30c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ca:	8b 89       	ldd	r24, Y+19	; 0x13
    30cc:	9c 89       	ldd	r25, Y+20	; 0x14
    30ce:	00 97       	sbiw	r24, 0x00	; 0
    30d0:	69 f7       	brne	.-38     	; 0x30ac <LCD_sendCommand+0x2a4>
    30d2:	14 c0       	rjmp	.+40     	; 0x30fc <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d4:	6d 89       	ldd	r22, Y+21	; 0x15
    30d6:	7e 89       	ldd	r23, Y+22	; 0x16
    30d8:	8f 89       	ldd	r24, Y+23	; 0x17
    30da:	98 8d       	ldd	r25, Y+24	; 0x18
    30dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e0:	dc 01       	movw	r26, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	9c 8b       	std	Y+20, r25	; 0x14
    30e6:	8b 8b       	std	Y+19, r24	; 0x13
    30e8:	8b 89       	ldd	r24, Y+19	; 0x13
    30ea:	9c 89       	ldd	r25, Y+20	; 0x14
    30ec:	98 8b       	std	Y+16, r25	; 0x10
    30ee:	8f 87       	std	Y+15, r24	; 0x0f
    30f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    30f2:	98 89       	ldd	r25, Y+16	; 0x10
    30f4:	01 97       	sbiw	r24, 0x01	; 1
    30f6:	f1 f7       	brne	.-4      	; 0x30f4 <LCD_sendCommand+0x2ec>
    30f8:	98 8b       	std	Y+16, r25	; 0x10
    30fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    30fc:	ab e3       	ldi	r26, 0x3B	; 59
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	eb e3       	ldi	r30, 0x3B	; 59
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	8e 7f       	andi	r24, 0xFE	; 254
    3108:	8c 93       	st	X, r24
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	a0 e8       	ldi	r26, 0x80	; 128
    3110:	bf e3       	ldi	r27, 0x3F	; 63
    3112:	8b 87       	std	Y+11, r24	; 0x0b
    3114:	9c 87       	std	Y+12, r25	; 0x0c
    3116:	ad 87       	std	Y+13, r26	; 0x0d
    3118:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    311a:	6b 85       	ldd	r22, Y+11	; 0x0b
    311c:	7c 85       	ldd	r23, Y+12	; 0x0c
    311e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3120:	9e 85       	ldd	r25, Y+14	; 0x0e
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	4a e7       	ldi	r20, 0x7A	; 122
    3128:	53 e4       	ldi	r21, 0x43	; 67
    312a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	8f 83       	std	Y+7, r24	; 0x07
    3134:	98 87       	std	Y+8, r25	; 0x08
    3136:	a9 87       	std	Y+9, r26	; 0x09
    3138:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    313a:	6f 81       	ldd	r22, Y+7	; 0x07
    313c:	78 85       	ldd	r23, Y+8	; 0x08
    313e:	89 85       	ldd	r24, Y+9	; 0x09
    3140:	9a 85       	ldd	r25, Y+10	; 0x0a
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e8       	ldi	r20, 0x80	; 128
    3148:	5f e3       	ldi	r21, 0x3F	; 63
    314a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    314e:	88 23       	and	r24, r24
    3150:	2c f4       	brge	.+10     	; 0x315c <LCD_sendCommand+0x354>
		__ticks = 1;
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	9e 83       	std	Y+6, r25	; 0x06
    3158:	8d 83       	std	Y+5, r24	; 0x05
    315a:	3f c0       	rjmp	.+126    	; 0x31da <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    315c:	6f 81       	ldd	r22, Y+7	; 0x07
    315e:	78 85       	ldd	r23, Y+8	; 0x08
    3160:	89 85       	ldd	r24, Y+9	; 0x09
    3162:	9a 85       	ldd	r25, Y+10	; 0x0a
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	3f ef       	ldi	r19, 0xFF	; 255
    3168:	4f e7       	ldi	r20, 0x7F	; 127
    316a:	57 e4       	ldi	r21, 0x47	; 71
    316c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3170:	18 16       	cp	r1, r24
    3172:	4c f5       	brge	.+82     	; 0x31c6 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3174:	6b 85       	ldd	r22, Y+11	; 0x0b
    3176:	7c 85       	ldd	r23, Y+12	; 0x0c
    3178:	8d 85       	ldd	r24, Y+13	; 0x0d
    317a:	9e 85       	ldd	r25, Y+14	; 0x0e
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	40 e2       	ldi	r20, 0x20	; 32
    3182:	51 e4       	ldi	r21, 0x41	; 65
    3184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	bc 01       	movw	r22, r24
    318e:	cd 01       	movw	r24, r26
    3190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	9e 83       	std	Y+6, r25	; 0x06
    319a:	8d 83       	std	Y+5, r24	; 0x05
    319c:	0f c0       	rjmp	.+30     	; 0x31bc <LCD_sendCommand+0x3b4>
    319e:	89 e1       	ldi	r24, 0x19	; 25
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	9c 83       	std	Y+4, r25	; 0x04
    31a4:	8b 83       	std	Y+3, r24	; 0x03
    31a6:	8b 81       	ldd	r24, Y+3	; 0x03
    31a8:	9c 81       	ldd	r25, Y+4	; 0x04
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	f1 f7       	brne	.-4      	; 0x31aa <LCD_sendCommand+0x3a2>
    31ae:	9c 83       	std	Y+4, r25	; 0x04
    31b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b2:	8d 81       	ldd	r24, Y+5	; 0x05
    31b4:	9e 81       	ldd	r25, Y+6	; 0x06
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	9e 83       	std	Y+6, r25	; 0x06
    31ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31bc:	8d 81       	ldd	r24, Y+5	; 0x05
    31be:	9e 81       	ldd	r25, Y+6	; 0x06
    31c0:	00 97       	sbiw	r24, 0x00	; 0
    31c2:	69 f7       	brne	.-38     	; 0x319e <LCD_sendCommand+0x396>
    31c4:	14 c0       	rjmp	.+40     	; 0x31ee <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c6:	6f 81       	ldd	r22, Y+7	; 0x07
    31c8:	78 85       	ldd	r23, Y+8	; 0x08
    31ca:	89 85       	ldd	r24, Y+9	; 0x09
    31cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	9e 83       	std	Y+6, r25	; 0x06
    31d8:	8d 83       	std	Y+5, r24	; 0x05
    31da:	8d 81       	ldd	r24, Y+5	; 0x05
    31dc:	9e 81       	ldd	r25, Y+6	; 0x06
    31de:	9a 83       	std	Y+2, r25	; 0x02
    31e0:	89 83       	std	Y+1, r24	; 0x01
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	9a 81       	ldd	r25, Y+2	; 0x02
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	f1 f7       	brne	.-4      	; 0x31e6 <LCD_sendCommand+0x3de>
    31ea:	9a 83       	std	Y+2, r25	; 0x02
    31ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    31ee:	e9 96       	adiw	r28, 0x39	; 57
    31f0:	0f b6       	in	r0, 0x3f	; 63
    31f2:	f8 94       	cli
    31f4:	de bf       	out	0x3e, r29	; 62
    31f6:	0f be       	out	0x3f, r0	; 63
    31f8:	cd bf       	out	0x3d, r28	; 61
    31fa:	cf 91       	pop	r28
    31fc:	df 91       	pop	r29
    31fe:	08 95       	ret

00003200 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    3200:	df 93       	push	r29
    3202:	cf 93       	push	r28
    3204:	cd b7       	in	r28, 0x3d	; 61
    3206:	de b7       	in	r29, 0x3e	; 62
    3208:	e9 97       	sbiw	r28, 0x39	; 57
    320a:	0f b6       	in	r0, 0x3f	; 63
    320c:	f8 94       	cli
    320e:	de bf       	out	0x3e, r29	; 62
    3210:	0f be       	out	0x3f, r0	; 63
    3212:	cd bf       	out	0x3d, r28	; 61
    3214:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    3216:	ab e3       	ldi	r26, 0x3B	; 59
    3218:	b0 e0       	ldi	r27, 0x00	; 0
    321a:	eb e3       	ldi	r30, 0x3B	; 59
    321c:	f0 e0       	ldi	r31, 0x00	; 0
    321e:	80 81       	ld	r24, Z
    3220:	84 60       	ori	r24, 0x04	; 4
    3222:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    3224:	ab e3       	ldi	r26, 0x3B	; 59
    3226:	b0 e0       	ldi	r27, 0x00	; 0
    3228:	eb e3       	ldi	r30, 0x3B	; 59
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	80 81       	ld	r24, Z
    322e:	8d 7f       	andi	r24, 0xFD	; 253
    3230:	8c 93       	st	X, r24
    3232:	80 e0       	ldi	r24, 0x00	; 0
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	a0 e8       	ldi	r26, 0x80	; 128
    3238:	bf e3       	ldi	r27, 0x3F	; 63
    323a:	8d ab       	std	Y+53, r24	; 0x35
    323c:	9e ab       	std	Y+54, r25	; 0x36
    323e:	af ab       	std	Y+55, r26	; 0x37
    3240:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3242:	6d a9       	ldd	r22, Y+53	; 0x35
    3244:	7e a9       	ldd	r23, Y+54	; 0x36
    3246:	8f a9       	ldd	r24, Y+55	; 0x37
    3248:	98 ad       	ldd	r25, Y+56	; 0x38
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	4a e7       	ldi	r20, 0x7A	; 122
    3250:	53 e4       	ldi	r21, 0x43	; 67
    3252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	89 ab       	std	Y+49, r24	; 0x31
    325c:	9a ab       	std	Y+50, r25	; 0x32
    325e:	ab ab       	std	Y+51, r26	; 0x33
    3260:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3262:	69 a9       	ldd	r22, Y+49	; 0x31
    3264:	7a a9       	ldd	r23, Y+50	; 0x32
    3266:	8b a9       	ldd	r24, Y+51	; 0x33
    3268:	9c a9       	ldd	r25, Y+52	; 0x34
    326a:	20 e0       	ldi	r18, 0x00	; 0
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	40 e8       	ldi	r20, 0x80	; 128
    3270:	5f e3       	ldi	r21, 0x3F	; 63
    3272:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3276:	88 23       	and	r24, r24
    3278:	2c f4       	brge	.+10     	; 0x3284 <LCD_displayCharacter+0x84>
		__ticks = 1;
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	98 ab       	std	Y+48, r25	; 0x30
    3280:	8f a7       	std	Y+47, r24	; 0x2f
    3282:	3f c0       	rjmp	.+126    	; 0x3302 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    3284:	69 a9       	ldd	r22, Y+49	; 0x31
    3286:	7a a9       	ldd	r23, Y+50	; 0x32
    3288:	8b a9       	ldd	r24, Y+51	; 0x33
    328a:	9c a9       	ldd	r25, Y+52	; 0x34
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	3f ef       	ldi	r19, 0xFF	; 255
    3290:	4f e7       	ldi	r20, 0x7F	; 127
    3292:	57 e4       	ldi	r21, 0x47	; 71
    3294:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3298:	18 16       	cp	r1, r24
    329a:	4c f5       	brge	.+82     	; 0x32ee <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    329c:	6d a9       	ldd	r22, Y+53	; 0x35
    329e:	7e a9       	ldd	r23, Y+54	; 0x36
    32a0:	8f a9       	ldd	r24, Y+55	; 0x37
    32a2:	98 ad       	ldd	r25, Y+56	; 0x38
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	40 e2       	ldi	r20, 0x20	; 32
    32aa:	51 e4       	ldi	r21, 0x41	; 65
    32ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	bc 01       	movw	r22, r24
    32b6:	cd 01       	movw	r24, r26
    32b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	98 ab       	std	Y+48, r25	; 0x30
    32c2:	8f a7       	std	Y+47, r24	; 0x2f
    32c4:	0f c0       	rjmp	.+30     	; 0x32e4 <LCD_displayCharacter+0xe4>
    32c6:	89 e1       	ldi	r24, 0x19	; 25
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	9e a7       	std	Y+46, r25	; 0x2e
    32cc:	8d a7       	std	Y+45, r24	; 0x2d
    32ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    32d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    32d2:	01 97       	sbiw	r24, 0x01	; 1
    32d4:	f1 f7       	brne	.-4      	; 0x32d2 <LCD_displayCharacter+0xd2>
    32d6:	9e a7       	std	Y+46, r25	; 0x2e
    32d8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32da:	8f a5       	ldd	r24, Y+47	; 0x2f
    32dc:	98 a9       	ldd	r25, Y+48	; 0x30
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	98 ab       	std	Y+48, r25	; 0x30
    32e2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    32e6:	98 a9       	ldd	r25, Y+48	; 0x30
    32e8:	00 97       	sbiw	r24, 0x00	; 0
    32ea:	69 f7       	brne	.-38     	; 0x32c6 <LCD_displayCharacter+0xc6>
    32ec:	14 c0       	rjmp	.+40     	; 0x3316 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ee:	69 a9       	ldd	r22, Y+49	; 0x31
    32f0:	7a a9       	ldd	r23, Y+50	; 0x32
    32f2:	8b a9       	ldd	r24, Y+51	; 0x33
    32f4:	9c a9       	ldd	r25, Y+52	; 0x34
    32f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	98 ab       	std	Y+48, r25	; 0x30
    3300:	8f a7       	std	Y+47, r24	; 0x2f
    3302:	8f a5       	ldd	r24, Y+47	; 0x2f
    3304:	98 a9       	ldd	r25, Y+48	; 0x30
    3306:	9c a7       	std	Y+44, r25	; 0x2c
    3308:	8b a7       	std	Y+43, r24	; 0x2b
    330a:	8b a5       	ldd	r24, Y+43	; 0x2b
    330c:	9c a5       	ldd	r25, Y+44	; 0x2c
    330e:	01 97       	sbiw	r24, 0x01	; 1
    3310:	f1 f7       	brne	.-4      	; 0x330e <LCD_displayCharacter+0x10e>
    3312:	9c a7       	std	Y+44, r25	; 0x2c
    3314:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    3316:	ab e3       	ldi	r26, 0x3B	; 59
    3318:	b0 e0       	ldi	r27, 0x00	; 0
    331a:	eb e3       	ldi	r30, 0x3B	; 59
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	80 81       	ld	r24, Z
    3320:	81 60       	ori	r24, 0x01	; 1
    3322:	8c 93       	st	X, r24
    3324:	80 e0       	ldi	r24, 0x00	; 0
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	a0 e8       	ldi	r26, 0x80	; 128
    332a:	bf e3       	ldi	r27, 0x3F	; 63
    332c:	8f a3       	std	Y+39, r24	; 0x27
    332e:	98 a7       	std	Y+40, r25	; 0x28
    3330:	a9 a7       	std	Y+41, r26	; 0x29
    3332:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3334:	6f a1       	ldd	r22, Y+39	; 0x27
    3336:	78 a5       	ldd	r23, Y+40	; 0x28
    3338:	89 a5       	ldd	r24, Y+41	; 0x29
    333a:	9a a5       	ldd	r25, Y+42	; 0x2a
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	4a e7       	ldi	r20, 0x7A	; 122
    3342:	53 e4       	ldi	r21, 0x43	; 67
    3344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3348:	dc 01       	movw	r26, r24
    334a:	cb 01       	movw	r24, r22
    334c:	8b a3       	std	Y+35, r24	; 0x23
    334e:	9c a3       	std	Y+36, r25	; 0x24
    3350:	ad a3       	std	Y+37, r26	; 0x25
    3352:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3354:	6b a1       	ldd	r22, Y+35	; 0x23
    3356:	7c a1       	ldd	r23, Y+36	; 0x24
    3358:	8d a1       	ldd	r24, Y+37	; 0x25
    335a:	9e a1       	ldd	r25, Y+38	; 0x26
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	40 e8       	ldi	r20, 0x80	; 128
    3362:	5f e3       	ldi	r21, 0x3F	; 63
    3364:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3368:	88 23       	and	r24, r24
    336a:	2c f4       	brge	.+10     	; 0x3376 <LCD_displayCharacter+0x176>
		__ticks = 1;
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	9a a3       	std	Y+34, r25	; 0x22
    3372:	89 a3       	std	Y+33, r24	; 0x21
    3374:	3f c0       	rjmp	.+126    	; 0x33f4 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    3376:	6b a1       	ldd	r22, Y+35	; 0x23
    3378:	7c a1       	ldd	r23, Y+36	; 0x24
    337a:	8d a1       	ldd	r24, Y+37	; 0x25
    337c:	9e a1       	ldd	r25, Y+38	; 0x26
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	3f ef       	ldi	r19, 0xFF	; 255
    3382:	4f e7       	ldi	r20, 0x7F	; 127
    3384:	57 e4       	ldi	r21, 0x47	; 71
    3386:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    338a:	18 16       	cp	r1, r24
    338c:	4c f5       	brge	.+82     	; 0x33e0 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    338e:	6f a1       	ldd	r22, Y+39	; 0x27
    3390:	78 a5       	ldd	r23, Y+40	; 0x28
    3392:	89 a5       	ldd	r24, Y+41	; 0x29
    3394:	9a a5       	ldd	r25, Y+42	; 0x2a
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	40 e2       	ldi	r20, 0x20	; 32
    339c:	51 e4       	ldi	r21, 0x41	; 65
    339e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a2:	dc 01       	movw	r26, r24
    33a4:	cb 01       	movw	r24, r22
    33a6:	bc 01       	movw	r22, r24
    33a8:	cd 01       	movw	r24, r26
    33aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	9a a3       	std	Y+34, r25	; 0x22
    33b4:	89 a3       	std	Y+33, r24	; 0x21
    33b6:	0f c0       	rjmp	.+30     	; 0x33d6 <LCD_displayCharacter+0x1d6>
    33b8:	89 e1       	ldi	r24, 0x19	; 25
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	98 a3       	std	Y+32, r25	; 0x20
    33be:	8f 8f       	std	Y+31, r24	; 0x1f
    33c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33c2:	98 a1       	ldd	r25, Y+32	; 0x20
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	f1 f7       	brne	.-4      	; 0x33c4 <LCD_displayCharacter+0x1c4>
    33c8:	98 a3       	std	Y+32, r25	; 0x20
    33ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33cc:	89 a1       	ldd	r24, Y+33	; 0x21
    33ce:	9a a1       	ldd	r25, Y+34	; 0x22
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	9a a3       	std	Y+34, r25	; 0x22
    33d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d6:	89 a1       	ldd	r24, Y+33	; 0x21
    33d8:	9a a1       	ldd	r25, Y+34	; 0x22
    33da:	00 97       	sbiw	r24, 0x00	; 0
    33dc:	69 f7       	brne	.-38     	; 0x33b8 <LCD_displayCharacter+0x1b8>
    33de:	14 c0       	rjmp	.+40     	; 0x3408 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e0:	6b a1       	ldd	r22, Y+35	; 0x23
    33e2:	7c a1       	ldd	r23, Y+36	; 0x24
    33e4:	8d a1       	ldd	r24, Y+37	; 0x25
    33e6:	9e a1       	ldd	r25, Y+38	; 0x26
    33e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ec:	dc 01       	movw	r26, r24
    33ee:	cb 01       	movw	r24, r22
    33f0:	9a a3       	std	Y+34, r25	; 0x22
    33f2:	89 a3       	std	Y+33, r24	; 0x21
    33f4:	89 a1       	ldd	r24, Y+33	; 0x21
    33f6:	9a a1       	ldd	r25, Y+34	; 0x22
    33f8:	9e 8f       	std	Y+30, r25	; 0x1e
    33fa:	8d 8f       	std	Y+29, r24	; 0x1d
    33fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3400:	01 97       	sbiw	r24, 0x01	; 1
    3402:	f1 f7       	brne	.-4      	; 0x3400 <LCD_displayCharacter+0x200>
    3404:	9e 8f       	std	Y+30, r25	; 0x1e
    3406:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif (DATA_BITS_MODE == 8)
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    3408:	e8 e3       	ldi	r30, 0x38	; 56
    340a:	f0 e0       	ldi	r31, 0x00	; 0
    340c:	89 ad       	ldd	r24, Y+57	; 0x39
    340e:	80 83       	st	Z, r24
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	a0 e8       	ldi	r26, 0x80	; 128
    3416:	bf e3       	ldi	r27, 0x3F	; 63
    3418:	89 8f       	std	Y+25, r24	; 0x19
    341a:	9a 8f       	std	Y+26, r25	; 0x1a
    341c:	ab 8f       	std	Y+27, r26	; 0x1b
    341e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3420:	69 8d       	ldd	r22, Y+25	; 0x19
    3422:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3424:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3426:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	4a e7       	ldi	r20, 0x7A	; 122
    342e:	53 e4       	ldi	r21, 0x43	; 67
    3430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	8d 8b       	std	Y+21, r24	; 0x15
    343a:	9e 8b       	std	Y+22, r25	; 0x16
    343c:	af 8b       	std	Y+23, r26	; 0x17
    343e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3440:	6d 89       	ldd	r22, Y+21	; 0x15
    3442:	7e 89       	ldd	r23, Y+22	; 0x16
    3444:	8f 89       	ldd	r24, Y+23	; 0x17
    3446:	98 8d       	ldd	r25, Y+24	; 0x18
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	40 e8       	ldi	r20, 0x80	; 128
    344e:	5f e3       	ldi	r21, 0x3F	; 63
    3450:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3454:	88 23       	and	r24, r24
    3456:	2c f4       	brge	.+10     	; 0x3462 <LCD_displayCharacter+0x262>
		__ticks = 1;
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	9c 8b       	std	Y+20, r25	; 0x14
    345e:	8b 8b       	std	Y+19, r24	; 0x13
    3460:	3f c0       	rjmp	.+126    	; 0x34e0 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    3462:	6d 89       	ldd	r22, Y+21	; 0x15
    3464:	7e 89       	ldd	r23, Y+22	; 0x16
    3466:	8f 89       	ldd	r24, Y+23	; 0x17
    3468:	98 8d       	ldd	r25, Y+24	; 0x18
    346a:	20 e0       	ldi	r18, 0x00	; 0
    346c:	3f ef       	ldi	r19, 0xFF	; 255
    346e:	4f e7       	ldi	r20, 0x7F	; 127
    3470:	57 e4       	ldi	r21, 0x47	; 71
    3472:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3476:	18 16       	cp	r1, r24
    3478:	4c f5       	brge	.+82     	; 0x34cc <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    347a:	69 8d       	ldd	r22, Y+25	; 0x19
    347c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    347e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3480:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3482:	20 e0       	ldi	r18, 0x00	; 0
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	40 e2       	ldi	r20, 0x20	; 32
    3488:	51 e4       	ldi	r21, 0x41	; 65
    348a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	bc 01       	movw	r22, r24
    3494:	cd 01       	movw	r24, r26
    3496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	9c 8b       	std	Y+20, r25	; 0x14
    34a0:	8b 8b       	std	Y+19, r24	; 0x13
    34a2:	0f c0       	rjmp	.+30     	; 0x34c2 <LCD_displayCharacter+0x2c2>
    34a4:	89 e1       	ldi	r24, 0x19	; 25
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	9a 8b       	std	Y+18, r25	; 0x12
    34aa:	89 8b       	std	Y+17, r24	; 0x11
    34ac:	89 89       	ldd	r24, Y+17	; 0x11
    34ae:	9a 89       	ldd	r25, Y+18	; 0x12
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	f1 f7       	brne	.-4      	; 0x34b0 <LCD_displayCharacter+0x2b0>
    34b4:	9a 8b       	std	Y+18, r25	; 0x12
    34b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b8:	8b 89       	ldd	r24, Y+19	; 0x13
    34ba:	9c 89       	ldd	r25, Y+20	; 0x14
    34bc:	01 97       	sbiw	r24, 0x01	; 1
    34be:	9c 8b       	std	Y+20, r25	; 0x14
    34c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c2:	8b 89       	ldd	r24, Y+19	; 0x13
    34c4:	9c 89       	ldd	r25, Y+20	; 0x14
    34c6:	00 97       	sbiw	r24, 0x00	; 0
    34c8:	69 f7       	brne	.-38     	; 0x34a4 <LCD_displayCharacter+0x2a4>
    34ca:	14 c0       	rjmp	.+40     	; 0x34f4 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34cc:	6d 89       	ldd	r22, Y+21	; 0x15
    34ce:	7e 89       	ldd	r23, Y+22	; 0x16
    34d0:	8f 89       	ldd	r24, Y+23	; 0x17
    34d2:	98 8d       	ldd	r25, Y+24	; 0x18
    34d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d8:	dc 01       	movw	r26, r24
    34da:	cb 01       	movw	r24, r22
    34dc:	9c 8b       	std	Y+20, r25	; 0x14
    34de:	8b 8b       	std	Y+19, r24	; 0x13
    34e0:	8b 89       	ldd	r24, Y+19	; 0x13
    34e2:	9c 89       	ldd	r25, Y+20	; 0x14
    34e4:	98 8b       	std	Y+16, r25	; 0x10
    34e6:	8f 87       	std	Y+15, r24	; 0x0f
    34e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    34ea:	98 89       	ldd	r25, Y+16	; 0x10
    34ec:	01 97       	sbiw	r24, 0x01	; 1
    34ee:	f1 f7       	brne	.-4      	; 0x34ec <LCD_displayCharacter+0x2ec>
    34f0:	98 8b       	std	Y+16, r25	; 0x10
    34f2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    34f4:	ab e3       	ldi	r26, 0x3B	; 59
    34f6:	b0 e0       	ldi	r27, 0x00	; 0
    34f8:	eb e3       	ldi	r30, 0x3B	; 59
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	80 81       	ld	r24, Z
    34fe:	8e 7f       	andi	r24, 0xFE	; 254
    3500:	8c 93       	st	X, r24
    3502:	80 e0       	ldi	r24, 0x00	; 0
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	a0 e8       	ldi	r26, 0x80	; 128
    3508:	bf e3       	ldi	r27, 0x3F	; 63
    350a:	8b 87       	std	Y+11, r24	; 0x0b
    350c:	9c 87       	std	Y+12, r25	; 0x0c
    350e:	ad 87       	std	Y+13, r26	; 0x0d
    3510:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3512:	6b 85       	ldd	r22, Y+11	; 0x0b
    3514:	7c 85       	ldd	r23, Y+12	; 0x0c
    3516:	8d 85       	ldd	r24, Y+13	; 0x0d
    3518:	9e 85       	ldd	r25, Y+14	; 0x0e
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	4a e7       	ldi	r20, 0x7A	; 122
    3520:	53 e4       	ldi	r21, 0x43	; 67
    3522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	8f 83       	std	Y+7, r24	; 0x07
    352c:	98 87       	std	Y+8, r25	; 0x08
    352e:	a9 87       	std	Y+9, r26	; 0x09
    3530:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3532:	6f 81       	ldd	r22, Y+7	; 0x07
    3534:	78 85       	ldd	r23, Y+8	; 0x08
    3536:	89 85       	ldd	r24, Y+9	; 0x09
    3538:	9a 85       	ldd	r25, Y+10	; 0x0a
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	40 e8       	ldi	r20, 0x80	; 128
    3540:	5f e3       	ldi	r21, 0x3F	; 63
    3542:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3546:	88 23       	and	r24, r24
    3548:	2c f4       	brge	.+10     	; 0x3554 <LCD_displayCharacter+0x354>
		__ticks = 1;
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	9e 83       	std	Y+6, r25	; 0x06
    3550:	8d 83       	std	Y+5, r24	; 0x05
    3552:	3f c0       	rjmp	.+126    	; 0x35d2 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    3554:	6f 81       	ldd	r22, Y+7	; 0x07
    3556:	78 85       	ldd	r23, Y+8	; 0x08
    3558:	89 85       	ldd	r24, Y+9	; 0x09
    355a:	9a 85       	ldd	r25, Y+10	; 0x0a
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	3f ef       	ldi	r19, 0xFF	; 255
    3560:	4f e7       	ldi	r20, 0x7F	; 127
    3562:	57 e4       	ldi	r21, 0x47	; 71
    3564:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3568:	18 16       	cp	r1, r24
    356a:	4c f5       	brge	.+82     	; 0x35be <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    356c:	6b 85       	ldd	r22, Y+11	; 0x0b
    356e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3570:	8d 85       	ldd	r24, Y+13	; 0x0d
    3572:	9e 85       	ldd	r25, Y+14	; 0x0e
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	40 e2       	ldi	r20, 0x20	; 32
    357a:	51 e4       	ldi	r21, 0x41	; 65
    357c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3580:	dc 01       	movw	r26, r24
    3582:	cb 01       	movw	r24, r22
    3584:	bc 01       	movw	r22, r24
    3586:	cd 01       	movw	r24, r26
    3588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	9e 83       	std	Y+6, r25	; 0x06
    3592:	8d 83       	std	Y+5, r24	; 0x05
    3594:	0f c0       	rjmp	.+30     	; 0x35b4 <LCD_displayCharacter+0x3b4>
    3596:	89 e1       	ldi	r24, 0x19	; 25
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	9c 83       	std	Y+4, r25	; 0x04
    359c:	8b 83       	std	Y+3, r24	; 0x03
    359e:	8b 81       	ldd	r24, Y+3	; 0x03
    35a0:	9c 81       	ldd	r25, Y+4	; 0x04
    35a2:	01 97       	sbiw	r24, 0x01	; 1
    35a4:	f1 f7       	brne	.-4      	; 0x35a2 <LCD_displayCharacter+0x3a2>
    35a6:	9c 83       	std	Y+4, r25	; 0x04
    35a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35aa:	8d 81       	ldd	r24, Y+5	; 0x05
    35ac:	9e 81       	ldd	r25, Y+6	; 0x06
    35ae:	01 97       	sbiw	r24, 0x01	; 1
    35b0:	9e 83       	std	Y+6, r25	; 0x06
    35b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b4:	8d 81       	ldd	r24, Y+5	; 0x05
    35b6:	9e 81       	ldd	r25, Y+6	; 0x06
    35b8:	00 97       	sbiw	r24, 0x00	; 0
    35ba:	69 f7       	brne	.-38     	; 0x3596 <LCD_displayCharacter+0x396>
    35bc:	14 c0       	rjmp	.+40     	; 0x35e6 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35be:	6f 81       	ldd	r22, Y+7	; 0x07
    35c0:	78 85       	ldd	r23, Y+8	; 0x08
    35c2:	89 85       	ldd	r24, Y+9	; 0x09
    35c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	9e 83       	std	Y+6, r25	; 0x06
    35d0:	8d 83       	std	Y+5, r24	; 0x05
    35d2:	8d 81       	ldd	r24, Y+5	; 0x05
    35d4:	9e 81       	ldd	r25, Y+6	; 0x06
    35d6:	9a 83       	std	Y+2, r25	; 0x02
    35d8:	89 83       	std	Y+1, r24	; 0x01
    35da:	89 81       	ldd	r24, Y+1	; 0x01
    35dc:	9a 81       	ldd	r25, Y+2	; 0x02
    35de:	01 97       	sbiw	r24, 0x01	; 1
    35e0:	f1 f7       	brne	.-4      	; 0x35de <LCD_displayCharacter+0x3de>
    35e2:	9a 83       	std	Y+2, r25	; 0x02
    35e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    35e6:	e9 96       	adiw	r28, 0x39	; 57
    35e8:	0f b6       	in	r0, 0x3f	; 63
    35ea:	f8 94       	cli
    35ec:	de bf       	out	0x3e, r29	; 62
    35ee:	0f be       	out	0x3f, r0	; 63
    35f0:	cd bf       	out	0x3d, r28	; 61
    35f2:	cf 91       	pop	r28
    35f4:	df 91       	pop	r29
    35f6:	08 95       	ret

000035f8 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    35f8:	df 93       	push	r29
    35fa:	cf 93       	push	r28
    35fc:	00 d0       	rcall	.+0      	; 0x35fe <LCD_displayString+0x6>
    35fe:	0f 92       	push	r0
    3600:	cd b7       	in	r28, 0x3d	; 61
    3602:	de b7       	in	r29, 0x3e	; 62
    3604:	9b 83       	std	Y+3, r25	; 0x03
    3606:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3608:	19 82       	std	Y+1, r1	; 0x01
    360a:	0e c0       	rjmp	.+28     	; 0x3628 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    360c:	89 81       	ldd	r24, Y+1	; 0x01
    360e:	28 2f       	mov	r18, r24
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	8a 81       	ldd	r24, Y+2	; 0x02
    3614:	9b 81       	ldd	r25, Y+3	; 0x03
    3616:	fc 01       	movw	r30, r24
    3618:	e2 0f       	add	r30, r18
    361a:	f3 1f       	adc	r31, r19
    361c:	80 81       	ld	r24, Z
    361e:	0e 94 00 19 	call	0x3200	; 0x3200 <LCD_displayCharacter>
		i++;
    3622:	89 81       	ldd	r24, Y+1	; 0x01
    3624:	8f 5f       	subi	r24, 0xFF	; 255
    3626:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3628:	89 81       	ldd	r24, Y+1	; 0x01
    362a:	28 2f       	mov	r18, r24
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	8a 81       	ldd	r24, Y+2	; 0x02
    3630:	9b 81       	ldd	r25, Y+3	; 0x03
    3632:	fc 01       	movw	r30, r24
    3634:	e2 0f       	add	r30, r18
    3636:	f3 1f       	adc	r31, r19
    3638:	80 81       	ld	r24, Z
    363a:	88 23       	and	r24, r24
    363c:	39 f7       	brne	.-50     	; 0x360c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    363e:	0f 90       	pop	r0
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	cf 91       	pop	r28
    3646:	df 91       	pop	r29
    3648:	08 95       	ret

0000364a <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    364a:	df 93       	push	r29
    364c:	cf 93       	push	r28
    364e:	00 d0       	rcall	.+0      	; 0x3650 <LCD_goToRowColumn+0x6>
    3650:	00 d0       	rcall	.+0      	; 0x3652 <LCD_goToRowColumn+0x8>
    3652:	0f 92       	push	r0
    3654:	cd b7       	in	r28, 0x3d	; 61
    3656:	de b7       	in	r29, 0x3e	; 62
    3658:	8a 83       	std	Y+2, r24	; 0x02
    365a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    365c:	8a 81       	ldd	r24, Y+2	; 0x02
    365e:	28 2f       	mov	r18, r24
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	3d 83       	std	Y+5, r19	; 0x05
    3664:	2c 83       	std	Y+4, r18	; 0x04
    3666:	8c 81       	ldd	r24, Y+4	; 0x04
    3668:	9d 81       	ldd	r25, Y+5	; 0x05
    366a:	81 30       	cpi	r24, 0x01	; 1
    366c:	91 05       	cpc	r25, r1
    366e:	c1 f0       	breq	.+48     	; 0x36a0 <LCD_goToRowColumn+0x56>
    3670:	2c 81       	ldd	r18, Y+4	; 0x04
    3672:	3d 81       	ldd	r19, Y+5	; 0x05
    3674:	22 30       	cpi	r18, 0x02	; 2
    3676:	31 05       	cpc	r19, r1
    3678:	2c f4       	brge	.+10     	; 0x3684 <LCD_goToRowColumn+0x3a>
    367a:	8c 81       	ldd	r24, Y+4	; 0x04
    367c:	9d 81       	ldd	r25, Y+5	; 0x05
    367e:	00 97       	sbiw	r24, 0x00	; 0
    3680:	61 f0       	breq	.+24     	; 0x369a <LCD_goToRowColumn+0x50>
    3682:	19 c0       	rjmp	.+50     	; 0x36b6 <LCD_goToRowColumn+0x6c>
    3684:	2c 81       	ldd	r18, Y+4	; 0x04
    3686:	3d 81       	ldd	r19, Y+5	; 0x05
    3688:	22 30       	cpi	r18, 0x02	; 2
    368a:	31 05       	cpc	r19, r1
    368c:	69 f0       	breq	.+26     	; 0x36a8 <LCD_goToRowColumn+0x5e>
    368e:	8c 81       	ldd	r24, Y+4	; 0x04
    3690:	9d 81       	ldd	r25, Y+5	; 0x05
    3692:	83 30       	cpi	r24, 0x03	; 3
    3694:	91 05       	cpc	r25, r1
    3696:	61 f0       	breq	.+24     	; 0x36b0 <LCD_goToRowColumn+0x66>
    3698:	0e c0       	rjmp	.+28     	; 0x36b6 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    369a:	8b 81       	ldd	r24, Y+3	; 0x03
    369c:	89 83       	std	Y+1, r24	; 0x01
    369e:	0b c0       	rjmp	.+22     	; 0x36b6 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    36a0:	8b 81       	ldd	r24, Y+3	; 0x03
    36a2:	80 5c       	subi	r24, 0xC0	; 192
    36a4:	89 83       	std	Y+1, r24	; 0x01
    36a6:	07 c0       	rjmp	.+14     	; 0x36b6 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    36a8:	8b 81       	ldd	r24, Y+3	; 0x03
    36aa:	80 5f       	subi	r24, 0xF0	; 240
    36ac:	89 83       	std	Y+1, r24	; 0x01
    36ae:	03 c0       	rjmp	.+6      	; 0x36b6 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    36b0:	8b 81       	ldd	r24, Y+3	; 0x03
    36b2:	80 5b       	subi	r24, 0xB0	; 176
    36b4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    36b6:	89 81       	ldd	r24, Y+1	; 0x01
    36b8:	80 68       	ori	r24, 0x80	; 128
    36ba:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_sendCommand>
}
    36be:	0f 90       	pop	r0
    36c0:	0f 90       	pop	r0
    36c2:	0f 90       	pop	r0
    36c4:	0f 90       	pop	r0
    36c6:	0f 90       	pop	r0
    36c8:	cf 91       	pop	r28
    36ca:	df 91       	pop	r29
    36cc:	08 95       	ret

000036ce <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    36ce:	df 93       	push	r29
    36d0:	cf 93       	push	r28
    36d2:	00 d0       	rcall	.+0      	; 0x36d4 <LCD_displayStringRowColumn+0x6>
    36d4:	00 d0       	rcall	.+0      	; 0x36d6 <LCD_displayStringRowColumn+0x8>
    36d6:	cd b7       	in	r28, 0x3d	; 61
    36d8:	de b7       	in	r29, 0x3e	; 62
    36da:	89 83       	std	Y+1, r24	; 0x01
    36dc:	6a 83       	std	Y+2, r22	; 0x02
    36de:	5c 83       	std	Y+4, r21	; 0x04
    36e0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
    36e4:	6a 81       	ldd	r22, Y+2	; 0x02
    36e6:	0e 94 25 1b 	call	0x364a	; 0x364a <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    36ea:	8b 81       	ldd	r24, Y+3	; 0x03
    36ec:	9c 81       	ldd	r25, Y+4	; 0x04
    36ee:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <LCD_displayString>
}
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	cf 91       	pop	r28
    36fc:	df 91       	pop	r29
    36fe:	08 95       	ret

00003700 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    3700:	df 93       	push	r29
    3702:	cf 93       	push	r28
    3704:	cd b7       	in	r28, 0x3d	; 61
    3706:	de b7       	in	r29, 0x3e	; 62
    3708:	62 97       	sbiw	r28, 0x12	; 18
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	f8 94       	cli
    370e:	de bf       	out	0x3e, r29	; 62
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	cd bf       	out	0x3d, r28	; 61
    3714:	9a 8b       	std	Y+18, r25	; 0x12
    3716:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    3718:	89 89       	ldd	r24, Y+17	; 0x11
    371a:	9a 89       	ldd	r25, Y+18	; 0x12
    371c:	9e 01       	movw	r18, r28
    371e:	2f 5f       	subi	r18, 0xFF	; 255
    3720:	3f 4f       	sbci	r19, 0xFF	; 255
    3722:	b9 01       	movw	r22, r18
    3724:	4a e0       	ldi	r20, 0x0A	; 10
    3726:	50 e0       	ldi	r21, 0x00	; 0
    3728:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <itoa>
   LCD_displayString(buff);
    372c:	ce 01       	movw	r24, r28
    372e:	01 96       	adiw	r24, 0x01	; 1
    3730:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <LCD_displayString>
}
    3734:	62 96       	adiw	r28, 0x12	; 18
    3736:	0f b6       	in	r0, 0x3f	; 63
    3738:	f8 94       	cli
    373a:	de bf       	out	0x3e, r29	; 62
    373c:	0f be       	out	0x3f, r0	; 63
    373e:	cd bf       	out	0x3d, r28	; 61
    3740:	cf 91       	pop	r28
    3742:	df 91       	pop	r29
    3744:	08 95       	ret

00003746 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    3746:	df 93       	push	r29
    3748:	cf 93       	push	r28
    374a:	cd b7       	in	r28, 0x3d	; 61
    374c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    374e:	81 e0       	ldi	r24, 0x01	; 1
    3750:	0e 94 04 17 	call	0x2e08	; 0x2e08 <LCD_sendCommand>
}
    3754:	cf 91       	pop	r28
    3756:	df 91       	pop	r29
    3758:	08 95       	ret

0000375a <TIMER1_delay>:
#ifdef timer1
/* delay function using timer1 */
/* no. of cycles = 0xff - initiate_timer + 1 cycle roll over to raise TOV0 flag  */
/*total delay = no.of cycle * Time of one tick*/
void TIMER1_delay (const timer_config * config_ptr)
{
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	00 d0       	rcall	.+0      	; 0x3760 <TIMER1_delay+0x6>
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
    3764:	9a 83       	std	Y+2, r25	; 0x02
    3766:	89 83       	std	Y+1, r24	; 0x01
	TCNT1  = config_ptr -> init_timer ;
    3768:	ac e4       	ldi	r26, 0x4C	; 76
    376a:	b0 e0       	ldi	r27, 0x00	; 0
    376c:	e9 81       	ldd	r30, Y+1	; 0x01
    376e:	fa 81       	ldd	r31, Y+2	; 0x02
    3770:	80 81       	ld	r24, Z
    3772:	91 81       	ldd	r25, Z+1	; 0x01
    3774:	11 96       	adiw	r26, 0x01	; 1
    3776:	9c 93       	st	X, r25
    3778:	8e 93       	st	-X, r24
	TCCR1A = (1 << FOC1A)|(1 << FOC1B);/* normal mode */
    377a:	ef e4       	ldi	r30, 0x4F	; 79
    377c:	f0 e0       	ldi	r31, 0x00	; 0
    377e:	8c e0       	ldi	r24, 0x0C	; 12
    3780:	80 83       	st	Z, r24
	TCCR1B = ((config_ptr -> timerClk)& 0x07); /*prescaler*/
    3782:	ae e4       	ldi	r26, 0x4E	; 78
    3784:	b0 e0       	ldi	r27, 0x00	; 0
    3786:	e9 81       	ldd	r30, Y+1	; 0x01
    3788:	fa 81       	ldd	r31, Y+2	; 0x02
    378a:	82 81       	ldd	r24, Z+2	; 0x02
    378c:	87 70       	andi	r24, 0x07	; 7
    378e:	8c 93       	st	X, r24
	while (BIT_IS_CLEAR(TIFR,TOV1));/*waiting until overflow occurs  */
    3790:	e8 e5       	ldi	r30, 0x58	; 88
    3792:	f0 e0       	ldi	r31, 0x00	; 0
    3794:	80 81       	ld	r24, Z
    3796:	88 2f       	mov	r24, r24
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	84 70       	andi	r24, 0x04	; 4
    379c:	90 70       	andi	r25, 0x00	; 0
    379e:	00 97       	sbiw	r24, 0x00	; 0
    37a0:	b9 f3       	breq	.-18     	; 0x3790 <TIMER1_delay+0x36>
	TCCR1B = 0; /*turn off timer1*/
    37a2:	ee e4       	ldi	r30, 0x4E	; 78
    37a4:	f0 e0       	ldi	r31, 0x00	; 0
    37a6:	10 82       	st	Z, r1
	TIFR  = SET_BIT(TIFR, TOV1);/*clear flag by writing one on it*/
    37a8:	28 e5       	ldi	r18, 0x58	; 88
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	a8 e5       	ldi	r26, 0x58	; 88
    37ae:	b0 e0       	ldi	r27, 0x00	; 0
    37b0:	e8 e5       	ldi	r30, 0x58	; 88
    37b2:	f0 e0       	ldi	r31, 0x00	; 0
    37b4:	80 81       	ld	r24, Z
    37b6:	84 60       	ori	r24, 0x04	; 4
    37b8:	8c 93       	st	X, r24
    37ba:	8c 91       	ld	r24, X
    37bc:	f9 01       	movw	r30, r18
    37be:	80 83       	st	Z, r24

}
    37c0:	0f 90       	pop	r0
    37c2:	0f 90       	pop	r0
    37c4:	cf 91       	pop	r28
    37c6:	df 91       	pop	r29
    37c8:	08 95       	ret

000037ca <timer1_ovf_init>:
/*timer1 overflow interrupt handled by ISR */

void timer1_ovf_init(const timer_config * config_ptr)
{
    37ca:	df 93       	push	r29
    37cc:	cf 93       	push	r28
    37ce:	00 d0       	rcall	.+0      	; 0x37d0 <timer1_ovf_init+0x6>
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
    37d4:	9a 83       	std	Y+2, r25	; 0x02
    37d6:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = config_ptr -> init_timer ;
    37d8:	ac e4       	ldi	r26, 0x4C	; 76
    37da:	b0 e0       	ldi	r27, 0x00	; 0
    37dc:	e9 81       	ldd	r30, Y+1	; 0x01
    37de:	fa 81       	ldd	r31, Y+2	; 0x02
    37e0:	80 81       	ld	r24, Z
    37e2:	91 81       	ldd	r25, Z+1	; 0x01
    37e4:	11 96       	adiw	r26, 0x01	; 1
    37e6:	9c 93       	st	X, r25
    37e8:	8e 93       	st	-X, r24
	TCCR1A = (1 << FOC1A)|(1 << FOC1B);/* normal mode */
    37ea:	ef e4       	ldi	r30, 0x4F	; 79
    37ec:	f0 e0       	ldi	r31, 0x00	; 0
    37ee:	8c e0       	ldi	r24, 0x0C	; 12
    37f0:	80 83       	st	Z, r24
	TCCR1B = ((config_ptr -> timerClk)& 0x07); /*prescaler*/
    37f2:	ae e4       	ldi	r26, 0x4E	; 78
    37f4:	b0 e0       	ldi	r27, 0x00	; 0
    37f6:	e9 81       	ldd	r30, Y+1	; 0x01
    37f8:	fa 81       	ldd	r31, Y+2	; 0x02
    37fa:	82 81       	ldd	r24, Z+2	; 0x02
    37fc:	87 70       	andi	r24, 0x07	; 7
    37fe:	8c 93       	st	X, r24
	TIMSK |= (1<<TOIE1);/* ENABLE TIMER1 OVERFLOW INTERRUPT */
    3800:	a9 e5       	ldi	r26, 0x59	; 89
    3802:	b0 e0       	ldi	r27, 0x00	; 0
    3804:	e9 e5       	ldi	r30, 0x59	; 89
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	80 81       	ld	r24, Z
    380a:	84 60       	ori	r24, 0x04	; 4
    380c:	8c 93       	st	X, r24

}
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	cf 91       	pop	r28
    3814:	df 91       	pop	r29
    3816:	08 95       	ret

00003818 <timer1_ctc_chA_init>:

/*timer1 CTC mode + interrupt handled by ISR */
/*channel A*/

void timer1_ctc_chA_init(const timer_config * config_ptr , uint16 compare_matchA)
{
    3818:	df 93       	push	r29
    381a:	cf 93       	push	r28
    381c:	00 d0       	rcall	.+0      	; 0x381e <timer1_ctc_chA_init+0x6>
    381e:	00 d0       	rcall	.+0      	; 0x3820 <timer1_ctc_chA_init+0x8>
    3820:	cd b7       	in	r28, 0x3d	; 61
    3822:	de b7       	in	r29, 0x3e	; 62
    3824:	9a 83       	std	Y+2, r25	; 0x02
    3826:	89 83       	std	Y+1, r24	; 0x01
    3828:	7c 83       	std	Y+4, r23	; 0x04
    382a:	6b 83       	std	Y+3, r22	; 0x03

	TCNT1 = config_ptr -> init_timer ;
    382c:	ac e4       	ldi	r26, 0x4C	; 76
    382e:	b0 e0       	ldi	r27, 0x00	; 0
    3830:	e9 81       	ldd	r30, Y+1	; 0x01
    3832:	fa 81       	ldd	r31, Y+2	; 0x02
    3834:	80 81       	ld	r24, Z
    3836:	91 81       	ldd	r25, Z+1	; 0x01
    3838:	11 96       	adiw	r26, 0x01	; 1
    383a:	9c 93       	st	X, r25
    383c:	8e 93       	st	-X, r24
	TCCR1A = (1 << FOC1A)|(1 << FOC1B) | (1 << COM1A1);/*clear on compare match */
    383e:	ef e4       	ldi	r30, 0x4F	; 79
    3840:	f0 e0       	ldi	r31, 0x00	; 0
    3842:	8c e8       	ldi	r24, 0x8C	; 140
    3844:	80 83       	st	Z, r24
	OCR1A  = compare_matchA;
    3846:	ea e4       	ldi	r30, 0x4A	; 74
    3848:	f0 e0       	ldi	r31, 0x00	; 0
    384a:	8b 81       	ldd	r24, Y+3	; 0x03
    384c:	9c 81       	ldd	r25, Y+4	; 0x04
    384e:	91 83       	std	Z+1, r25	; 0x01
    3850:	80 83       	st	Z, r24
	TIMSK |= (1<< OCIE1A);/* ENABLE TIMER1 Compare match INTERRUPT */
    3852:	a9 e5       	ldi	r26, 0x59	; 89
    3854:	b0 e0       	ldi	r27, 0x00	; 0
    3856:	e9 e5       	ldi	r30, 0x59	; 89
    3858:	f0 e0       	ldi	r31, 0x00	; 0
    385a:	80 81       	ld	r24, Z
    385c:	80 61       	ori	r24, 0x10	; 16
    385e:	8c 93       	st	X, r24
	TCCR1B = ( 1 << WGM12) | ((config_ptr -> timerClk)& 0x07); /*ctc ,prescaler*/
    3860:	ae e4       	ldi	r26, 0x4E	; 78
    3862:	b0 e0       	ldi	r27, 0x00	; 0
    3864:	e9 81       	ldd	r30, Y+1	; 0x01
    3866:	fa 81       	ldd	r31, Y+2	; 0x02
    3868:	82 81       	ldd	r24, Z+2	; 0x02
    386a:	87 70       	andi	r24, 0x07	; 7
    386c:	88 60       	ori	r24, 0x08	; 8
    386e:	8c 93       	st	X, r24
}
    3870:	0f 90       	pop	r0
    3872:	0f 90       	pop	r0
    3874:	0f 90       	pop	r0
    3876:	0f 90       	pop	r0
    3878:	cf 91       	pop	r28
    387a:	df 91       	pop	r29
    387c:	08 95       	ret

0000387e <timer1_ctc_chB_init>:

/*timer1 CTC mode + interrupt handled by ISR */
/*channel B*/
void timer1_ctc_chB_init(const timer_config * config_ptr , uint16 compare_matchB)
{
    387e:	df 93       	push	r29
    3880:	cf 93       	push	r28
    3882:	00 d0       	rcall	.+0      	; 0x3884 <timer1_ctc_chB_init+0x6>
    3884:	00 d0       	rcall	.+0      	; 0x3886 <timer1_ctc_chB_init+0x8>
    3886:	cd b7       	in	r28, 0x3d	; 61
    3888:	de b7       	in	r29, 0x3e	; 62
    388a:	9a 83       	std	Y+2, r25	; 0x02
    388c:	89 83       	std	Y+1, r24	; 0x01
    388e:	7c 83       	std	Y+4, r23	; 0x04
    3890:	6b 83       	std	Y+3, r22	; 0x03

	TCNT1 = config_ptr -> init_timer ;
    3892:	ac e4       	ldi	r26, 0x4C	; 76
    3894:	b0 e0       	ldi	r27, 0x00	; 0
    3896:	e9 81       	ldd	r30, Y+1	; 0x01
    3898:	fa 81       	ldd	r31, Y+2	; 0x02
    389a:	80 81       	ld	r24, Z
    389c:	91 81       	ldd	r25, Z+1	; 0x01
    389e:	11 96       	adiw	r26, 0x01	; 1
    38a0:	9c 93       	st	X, r25
    38a2:	8e 93       	st	-X, r24
	TCCR1A = (1 << FOC1A)|(1 << FOC1B) | (1 << COM1B1);/*clear on compare match */
    38a4:	ef e4       	ldi	r30, 0x4F	; 79
    38a6:	f0 e0       	ldi	r31, 0x00	; 0
    38a8:	8c e2       	ldi	r24, 0x2C	; 44
    38aa:	80 83       	st	Z, r24
	TCCR1B = ( 1 << WGM12) | ((config_ptr -> timerClk)& 0x07); /*ctc ,prescaler*/
    38ac:	ae e4       	ldi	r26, 0x4E	; 78
    38ae:	b0 e0       	ldi	r27, 0x00	; 0
    38b0:	e9 81       	ldd	r30, Y+1	; 0x01
    38b2:	fa 81       	ldd	r31, Y+2	; 0x02
    38b4:	82 81       	ldd	r24, Z+2	; 0x02
    38b6:	87 70       	andi	r24, 0x07	; 7
    38b8:	88 60       	ori	r24, 0x08	; 8
    38ba:	8c 93       	st	X, r24
	OCR1A  = compare_matchB;
    38bc:	ea e4       	ldi	r30, 0x4A	; 74
    38be:	f0 e0       	ldi	r31, 0x00	; 0
    38c0:	8b 81       	ldd	r24, Y+3	; 0x03
    38c2:	9c 81       	ldd	r25, Y+4	; 0x04
    38c4:	91 83       	std	Z+1, r25	; 0x01
    38c6:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE1B);/* ENABLE TIMER1 Compare match INTERRUPT */
    38c8:	a9 e5       	ldi	r26, 0x59	; 89
    38ca:	b0 e0       	ldi	r27, 0x00	; 0
    38cc:	e9 e5       	ldi	r30, 0x59	; 89
    38ce:	f0 e0       	ldi	r31, 0x00	; 0
    38d0:	80 81       	ld	r24, Z
    38d2:	88 60       	ori	r24, 0x08	; 8
    38d4:	8c 93       	st	X, r24
}
    38d6:	0f 90       	pop	r0
    38d8:	0f 90       	pop	r0
    38da:	0f 90       	pop	r0
    38dc:	0f 90       	pop	r0
    38de:	cf 91       	pop	r28
    38e0:	df 91       	pop	r29
    38e2:	08 95       	ret

000038e4 <TIMER1_PWM_init>:


/* timer1 generating fast pwm non_inverting mode*/

void TIMER1_PWM_init(const timer_config * config_ptr)
{
    38e4:	df 93       	push	r29
    38e6:	cf 93       	push	r28
    38e8:	00 d0       	rcall	.+0      	; 0x38ea <TIMER1_PWM_init+0x6>
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
    38ee:	9a 83       	std	Y+2, r25	; 0x02
    38f0:	89 83       	std	Y+1, r24	; 0x01
	TCNT1  = config_ptr -> init_timer ;
    38f2:	ac e4       	ldi	r26, 0x4C	; 76
    38f4:	b0 e0       	ldi	r27, 0x00	; 0
    38f6:	e9 81       	ldd	r30, Y+1	; 0x01
    38f8:	fa 81       	ldd	r31, Y+2	; 0x02
    38fa:	80 81       	ld	r24, Z
    38fc:	91 81       	ldd	r25, Z+1	; 0x01
    38fe:	11 96       	adiw	r26, 0x01	; 1
    3900:	9c 93       	st	X, r25
    3902:	8e 93       	st	-X, r24
	TCCR1A = (1 << WGM10) | (1 << WGM11) | (1 << COM1A1);/*clear on compare match non inverting mode */
    3904:	ef e4       	ldi	r30, 0x4F	; 79
    3906:	f0 e0       	ldi	r31, 0x00	; 0
    3908:	83 e8       	ldi	r24, 0x83	; 131
    390a:	80 83       	st	Z, r24
	TCCR1B = ( 1 << WGM12) | ( 1 << WGM13) | ((config_ptr -> timerClk)& 0x07); /*fast pwm, prescaler*/
    390c:	ae e4       	ldi	r26, 0x4E	; 78
    390e:	b0 e0       	ldi	r27, 0x00	; 0
    3910:	e9 81       	ldd	r30, Y+1	; 0x01
    3912:	fa 81       	ldd	r31, Y+2	; 0x02
    3914:	82 81       	ldd	r24, Z+2	; 0x02
    3916:	87 70       	andi	r24, 0x07	; 7
    3918:	88 61       	ori	r24, 0x18	; 24
    391a:	8c 93       	st	X, r24
	DDRD |= (1 << PD5);/* set pin PD5 as output pin*/
    391c:	a1 e3       	ldi	r26, 0x31	; 49
    391e:	b0 e0       	ldi	r27, 0x00	; 0
    3920:	e1 e3       	ldi	r30, 0x31	; 49
    3922:	f0 e0       	ldi	r31, 0x00	; 0
    3924:	80 81       	ld	r24, Z
    3926:	80 62       	ori	r24, 0x20	; 32
    3928:	8c 93       	st	X, r24
}
    392a:	0f 90       	pop	r0
    392c:	0f 90       	pop	r0
    392e:	cf 91       	pop	r28
    3930:	df 91       	pop	r29
    3932:	08 95       	ret

00003934 <set_duty_ChannelA>:
/*this two function can be written in the main */
/*
 * Description: Function to set the value of OCR1A.
 */
void set_duty_ChannelA (uint16 duty)
{
    3934:	df 93       	push	r29
    3936:	cf 93       	push	r28
    3938:	00 d0       	rcall	.+0      	; 0x393a <set_duty_ChannelA+0x6>
    393a:	cd b7       	in	r28, 0x3d	; 61
    393c:	de b7       	in	r29, 0x3e	; 62
    393e:	9a 83       	std	Y+2, r25	; 0x02
    3940:	89 83       	std	Y+1, r24	; 0x01
	OCR1A =duty;/*pwm max OCR1A if i want to generate two pwm load OCR1B with the smaller value */
    3942:	ea e4       	ldi	r30, 0x4A	; 74
    3944:	f0 e0       	ldi	r31, 0x00	; 0
    3946:	89 81       	ldd	r24, Y+1	; 0x01
    3948:	9a 81       	ldd	r25, Y+2	; 0x02
    394a:	91 83       	std	Z+1, r25	; 0x01
    394c:	80 83       	st	Z, r24
}
    394e:	0f 90       	pop	r0
    3950:	0f 90       	pop	r0
    3952:	cf 91       	pop	r28
    3954:	df 91       	pop	r29
    3956:	08 95       	ret

00003958 <set_duty_ChannelB>:
/*
 * Description: Function to set the value of OCR1B.
 */
void set_duty_ChannelB (uint16 duty)
{
    3958:	df 93       	push	r29
    395a:	cf 93       	push	r28
    395c:	00 d0       	rcall	.+0      	; 0x395e <set_duty_ChannelB+0x6>
    395e:	cd b7       	in	r28, 0x3d	; 61
    3960:	de b7       	in	r29, 0x3e	; 62
    3962:	9a 83       	std	Y+2, r25	; 0x02
    3964:	89 83       	std	Y+1, r24	; 0x01
	OCR1B =duty;
    3966:	e8 e4       	ldi	r30, 0x48	; 72
    3968:	f0 e0       	ldi	r31, 0x00	; 0
    396a:	89 81       	ldd	r24, Y+1	; 0x01
    396c:	9a 81       	ldd	r25, Y+2	; 0x02
    396e:	91 83       	std	Z+1, r25	; 0x01
    3970:	80 83       	st	Z, r24
}
    3972:	0f 90       	pop	r0
    3974:	0f 90       	pop	r0
    3976:	cf 91       	pop	r28
    3978:	df 91       	pop	r29
    397a:	08 95       	ret

0000397c <Timer1_setCallBackOvf>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBackOvf(void (*a_ptr)(void))
{
    397c:	df 93       	push	r29
    397e:	cf 93       	push	r28
    3980:	00 d0       	rcall	.+0      	; 0x3982 <Timer1_setCallBackOvf+0x6>
    3982:	cd b7       	in	r28, 0x3d	; 61
    3984:	de b7       	in	r29, 0x3e	; 62
    3986:	9a 83       	std	Y+2, r25	; 0x02
    3988:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr = a_ptr ;
    398a:	89 81       	ldd	r24, Y+1	; 0x01
    398c:	9a 81       	ldd	r25, Y+2	; 0x02
    398e:	90 93 17 01 	sts	0x0117, r25
    3992:	80 93 16 01 	sts	0x0116, r24
}
    3996:	0f 90       	pop	r0
    3998:	0f 90       	pop	r0
    399a:	cf 91       	pop	r28
    399c:	df 91       	pop	r29
    399e:	08 95       	ret

000039a0 <Timer1_setCallBackChA>:
/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBackChA(void(*a_ptr)(void))
{
    39a0:	df 93       	push	r29
    39a2:	cf 93       	push	r28
    39a4:	00 d0       	rcall	.+0      	; 0x39a6 <Timer1_setCallBackChA+0x6>
    39a6:	cd b7       	in	r28, 0x3d	; 61
    39a8:	de b7       	in	r29, 0x3e	; 62
    39aa:	9a 83       	std	Y+2, r25	; 0x02
    39ac:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr_chA = a_ptr ;
    39ae:	89 81       	ldd	r24, Y+1	; 0x01
    39b0:	9a 81       	ldd	r25, Y+2	; 0x02
    39b2:	90 93 1b 01 	sts	0x011B, r25
    39b6:	80 93 1a 01 	sts	0x011A, r24
}
    39ba:	0f 90       	pop	r0
    39bc:	0f 90       	pop	r0
    39be:	cf 91       	pop	r28
    39c0:	df 91       	pop	r29
    39c2:	08 95       	ret

000039c4 <Timer1_setCallBackChB>:
/*
 * Description: Function to set the Call Back function address.
 */
void Timer1_setCallBackChB(void(*a_ptr)(void))
{
    39c4:	df 93       	push	r29
    39c6:	cf 93       	push	r28
    39c8:	00 d0       	rcall	.+0      	; 0x39ca <Timer1_setCallBackChB+0x6>
    39ca:	cd b7       	in	r28, 0x3d	; 61
    39cc:	de b7       	in	r29, 0x3e	; 62
    39ce:	9a 83       	std	Y+2, r25	; 0x02
    39d0:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr_chB = a_ptr ;
    39d2:	89 81       	ldd	r24, Y+1	; 0x01
    39d4:	9a 81       	ldd	r25, Y+2	; 0x02
    39d6:	90 93 19 01 	sts	0x0119, r25
    39da:	80 93 18 01 	sts	0x0118, r24
}
    39de:	0f 90       	pop	r0
    39e0:	0f 90       	pop	r0
    39e2:	cf 91       	pop	r28
    39e4:	df 91       	pop	r29
    39e6:	08 95       	ret

000039e8 <__vector_8>:



ISR(TIMER1_OVF_vect)
{
    39e8:	1f 92       	push	r1
    39ea:	0f 92       	push	r0
    39ec:	0f b6       	in	r0, 0x3f	; 63
    39ee:	0f 92       	push	r0
    39f0:	11 24       	eor	r1, r1
    39f2:	2f 93       	push	r18
    39f4:	3f 93       	push	r19
    39f6:	4f 93       	push	r20
    39f8:	5f 93       	push	r21
    39fa:	6f 93       	push	r22
    39fc:	7f 93       	push	r23
    39fe:	8f 93       	push	r24
    3a00:	9f 93       	push	r25
    3a02:	af 93       	push	r26
    3a04:	bf 93       	push	r27
    3a06:	ef 93       	push	r30
    3a08:	ff 93       	push	r31
    3a0a:	df 93       	push	r29
    3a0c:	cf 93       	push	r28
    3a0e:	cd b7       	in	r28, 0x3d	; 61
    3a10:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr != NULL_PTR)
    3a12:	80 91 16 01 	lds	r24, 0x0116
    3a16:	90 91 17 01 	lds	r25, 0x0117
    3a1a:	00 97       	sbiw	r24, 0x00	; 0
    3a1c:	29 f0       	breq	.+10     	; 0x3a28 <__vector_8+0x40>
	{
		(*g_CallBackPtr)();
    3a1e:	e0 91 16 01 	lds	r30, 0x0116
    3a22:	f0 91 17 01 	lds	r31, 0x0117
    3a26:	09 95       	icall
	}
}
    3a28:	cf 91       	pop	r28
    3a2a:	df 91       	pop	r29
    3a2c:	ff 91       	pop	r31
    3a2e:	ef 91       	pop	r30
    3a30:	bf 91       	pop	r27
    3a32:	af 91       	pop	r26
    3a34:	9f 91       	pop	r25
    3a36:	8f 91       	pop	r24
    3a38:	7f 91       	pop	r23
    3a3a:	6f 91       	pop	r22
    3a3c:	5f 91       	pop	r21
    3a3e:	4f 91       	pop	r20
    3a40:	3f 91       	pop	r19
    3a42:	2f 91       	pop	r18
    3a44:	0f 90       	pop	r0
    3a46:	0f be       	out	0x3f, r0	; 63
    3a48:	0f 90       	pop	r0
    3a4a:	1f 90       	pop	r1
    3a4c:	18 95       	reti

00003a4e <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    3a4e:	1f 92       	push	r1
    3a50:	0f 92       	push	r0
    3a52:	0f b6       	in	r0, 0x3f	; 63
    3a54:	0f 92       	push	r0
    3a56:	11 24       	eor	r1, r1
    3a58:	2f 93       	push	r18
    3a5a:	3f 93       	push	r19
    3a5c:	4f 93       	push	r20
    3a5e:	5f 93       	push	r21
    3a60:	6f 93       	push	r22
    3a62:	7f 93       	push	r23
    3a64:	8f 93       	push	r24
    3a66:	9f 93       	push	r25
    3a68:	af 93       	push	r26
    3a6a:	bf 93       	push	r27
    3a6c:	ef 93       	push	r30
    3a6e:	ff 93       	push	r31
    3a70:	df 93       	push	r29
    3a72:	cf 93       	push	r28
    3a74:	cd b7       	in	r28, 0x3d	; 61
    3a76:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr_chA != NULL_PTR)
    3a78:	80 91 1a 01 	lds	r24, 0x011A
    3a7c:	90 91 1b 01 	lds	r25, 0x011B
    3a80:	00 97       	sbiw	r24, 0x00	; 0
    3a82:	29 f0       	breq	.+10     	; 0x3a8e <__vector_6+0x40>
	{
		(*g_CallBackPtr_chA)();
    3a84:	e0 91 1a 01 	lds	r30, 0x011A
    3a88:	f0 91 1b 01 	lds	r31, 0x011B
    3a8c:	09 95       	icall
	}
}
    3a8e:	cf 91       	pop	r28
    3a90:	df 91       	pop	r29
    3a92:	ff 91       	pop	r31
    3a94:	ef 91       	pop	r30
    3a96:	bf 91       	pop	r27
    3a98:	af 91       	pop	r26
    3a9a:	9f 91       	pop	r25
    3a9c:	8f 91       	pop	r24
    3a9e:	7f 91       	pop	r23
    3aa0:	6f 91       	pop	r22
    3aa2:	5f 91       	pop	r21
    3aa4:	4f 91       	pop	r20
    3aa6:	3f 91       	pop	r19
    3aa8:	2f 91       	pop	r18
    3aaa:	0f 90       	pop	r0
    3aac:	0f be       	out	0x3f, r0	; 63
    3aae:	0f 90       	pop	r0
    3ab0:	1f 90       	pop	r1
    3ab2:	18 95       	reti

00003ab4 <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    3ab4:	1f 92       	push	r1
    3ab6:	0f 92       	push	r0
    3ab8:	0f b6       	in	r0, 0x3f	; 63
    3aba:	0f 92       	push	r0
    3abc:	11 24       	eor	r1, r1
    3abe:	2f 93       	push	r18
    3ac0:	3f 93       	push	r19
    3ac2:	4f 93       	push	r20
    3ac4:	5f 93       	push	r21
    3ac6:	6f 93       	push	r22
    3ac8:	7f 93       	push	r23
    3aca:	8f 93       	push	r24
    3acc:	9f 93       	push	r25
    3ace:	af 93       	push	r26
    3ad0:	bf 93       	push	r27
    3ad2:	ef 93       	push	r30
    3ad4:	ff 93       	push	r31
    3ad6:	df 93       	push	r29
    3ad8:	cf 93       	push	r28
    3ada:	cd b7       	in	r28, 0x3d	; 61
    3adc:	de b7       	in	r29, 0x3e	; 62
	if(g_CallBackPtr_chB != NULL_PTR)
    3ade:	80 91 18 01 	lds	r24, 0x0118
    3ae2:	90 91 19 01 	lds	r25, 0x0119
    3ae6:	00 97       	sbiw	r24, 0x00	; 0
    3ae8:	29 f0       	breq	.+10     	; 0x3af4 <__vector_7+0x40>
	{
		(*g_CallBackPtr_chB)();
    3aea:	e0 91 18 01 	lds	r30, 0x0118
    3aee:	f0 91 19 01 	lds	r31, 0x0119
    3af2:	09 95       	icall
	}
}
    3af4:	cf 91       	pop	r28
    3af6:	df 91       	pop	r29
    3af8:	ff 91       	pop	r31
    3afa:	ef 91       	pop	r30
    3afc:	bf 91       	pop	r27
    3afe:	af 91       	pop	r26
    3b00:	9f 91       	pop	r25
    3b02:	8f 91       	pop	r24
    3b04:	7f 91       	pop	r23
    3b06:	6f 91       	pop	r22
    3b08:	5f 91       	pop	r21
    3b0a:	4f 91       	pop	r20
    3b0c:	3f 91       	pop	r19
    3b0e:	2f 91       	pop	r18
    3b10:	0f 90       	pop	r0
    3b12:	0f be       	out	0x3f, r0	; 63
    3b14:	0f 90       	pop	r0
    3b16:	1f 90       	pop	r1
    3b18:	18 95       	reti

00003b1a <timer1_deinit>:

void timer1_deinit (void)
{
    3b1a:	df 93       	push	r29
    3b1c:	cf 93       	push	r28
    3b1e:	cd b7       	in	r28, 0x3d	; 61
    3b20:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    3b22:	ef e4       	ldi	r30, 0x4F	; 79
    3b24:	f0 e0       	ldi	r31, 0x00	; 0
    3b26:	10 82       	st	Z, r1
	TCCR1B = 0;
    3b28:	ee e4       	ldi	r30, 0x4E	; 78
    3b2a:	f0 e0       	ldi	r31, 0x00	; 0
    3b2c:	10 82       	st	Z, r1
	TCNT1 = 0;
    3b2e:	ec e4       	ldi	r30, 0x4C	; 76
    3b30:	f0 e0       	ldi	r31, 0x00	; 0
    3b32:	11 82       	std	Z+1, r1	; 0x01
    3b34:	10 82       	st	Z, r1
	OCR1A  = 0;
    3b36:	ea e4       	ldi	r30, 0x4A	; 74
    3b38:	f0 e0       	ldi	r31, 0x00	; 0
    3b3a:	11 82       	std	Z+1, r1	; 0x01
    3b3c:	10 82       	st	Z, r1
	OCR1B  = 0;
    3b3e:	e8 e4       	ldi	r30, 0x48	; 72
    3b40:	f0 e0       	ldi	r31, 0x00	; 0
    3b42:	11 82       	std	Z+1, r1	; 0x01
    3b44:	10 82       	st	Z, r1
	TIMSK &= ~(1<<OCIE1A) & (~(1<<OCIE1B));
    3b46:	a9 e5       	ldi	r26, 0x59	; 89
    3b48:	b0 e0       	ldi	r27, 0x00	; 0
    3b4a:	e9 e5       	ldi	r30, 0x59	; 89
    3b4c:	f0 e0       	ldi	r31, 0x00	; 0
    3b4e:	80 81       	ld	r24, Z
    3b50:	87 7e       	andi	r24, 0xE7	; 231
    3b52:	8c 93       	st	X, r24
}
    3b54:	cf 91       	pop	r28
    3b56:	df 91       	pop	r29
    3b58:	08 95       	ret

00003b5a <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    3b5a:	df 93       	push	r29
    3b5c:	cf 93       	push	r28
    3b5e:	cd b7       	in	r28, 0x3d	; 61
    3b60:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3b62:	eb e2       	ldi	r30, 0x2B	; 43
    3b64:	f0 e0       	ldi	r31, 0x00	; 0
    3b66:	82 e0       	ldi	r24, 0x02	; 2
    3b68:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3b6a:	ea e2       	ldi	r30, 0x2A	; 42
    3b6c:	f0 e0       	ldi	r31, 0x00	; 0
    3b6e:	88 e1       	ldi	r24, 0x18	; 24
    3b70:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    3b72:	e0 e4       	ldi	r30, 0x40	; 64
    3b74:	f0 e0       	ldi	r31, 0x00	; 0
    3b76:	86 e8       	ldi	r24, 0x86	; 134
    3b78:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    3b7a:	e0 e4       	ldi	r30, 0x40	; 64
    3b7c:	f0 e0       	ldi	r31, 0x00	; 0
    3b7e:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    3b80:	e9 e2       	ldi	r30, 0x29	; 41
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	8c e0       	ldi	r24, 0x0C	; 12
    3b86:	80 83       	st	Z, r24
}
    3b88:	cf 91       	pop	r28
    3b8a:	df 91       	pop	r29
    3b8c:	08 95       	ret

00003b8e <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    3b8e:	df 93       	push	r29
    3b90:	cf 93       	push	r28
    3b92:	0f 92       	push	r0
    3b94:	cd b7       	in	r28, 0x3d	; 61
    3b96:	de b7       	in	r29, 0x3e	; 62
    3b98:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3b9a:	eb e2       	ldi	r30, 0x2B	; 43
    3b9c:	f0 e0       	ldi	r31, 0x00	; 0
    3b9e:	80 81       	ld	r24, Z
    3ba0:	88 2f       	mov	r24, r24
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	80 72       	andi	r24, 0x20	; 32
    3ba6:	90 70       	andi	r25, 0x00	; 0
    3ba8:	00 97       	sbiw	r24, 0x00	; 0
    3baa:	b9 f3       	breq	.-18     	; 0x3b9a <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    3bac:	ec e2       	ldi	r30, 0x2C	; 44
    3bae:	f0 e0       	ldi	r31, 0x00	; 0
    3bb0:	89 81       	ldd	r24, Y+1	; 0x01
    3bb2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    3bb4:	0f 90       	pop	r0
    3bb6:	cf 91       	pop	r28
    3bb8:	df 91       	pop	r29
    3bba:	08 95       	ret

00003bbc <UART_receiveByte>:

uint8 UART_receiveByte(void)
{
    3bbc:	df 93       	push	r29
    3bbe:	cf 93       	push	r28
    3bc0:	cd b7       	in	r28, 0x3d	; 61
    3bc2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3bc4:	eb e2       	ldi	r30, 0x2B	; 43
    3bc6:	f0 e0       	ldi	r31, 0x00	; 0
    3bc8:	80 81       	ld	r24, Z
    3bca:	88 23       	and	r24, r24
    3bcc:	dc f7       	brge	.-10     	; 0x3bc4 <UART_receiveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    3bce:	ec e2       	ldi	r30, 0x2C	; 44
    3bd0:	f0 e0       	ldi	r31, 0x00	; 0
    3bd2:	80 81       	ld	r24, Z
}
    3bd4:	cf 91       	pop	r28
    3bd6:	df 91       	pop	r29
    3bd8:	08 95       	ret

00003bda <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    3bda:	df 93       	push	r29
    3bdc:	cf 93       	push	r28
    3bde:	00 d0       	rcall	.+0      	; 0x3be0 <UART_sendString+0x6>
    3be0:	0f 92       	push	r0
    3be2:	cd b7       	in	r28, 0x3d	; 61
    3be4:	de b7       	in	r29, 0x3e	; 62
    3be6:	9b 83       	std	Y+3, r25	; 0x03
    3be8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3bea:	19 82       	std	Y+1, r1	; 0x01
    3bec:	0e c0       	rjmp	.+28     	; 0x3c0a <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3bee:	89 81       	ldd	r24, Y+1	; 0x01
    3bf0:	28 2f       	mov	r18, r24
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    3bf8:	fc 01       	movw	r30, r24
    3bfa:	e2 0f       	add	r30, r18
    3bfc:	f3 1f       	adc	r31, r19
    3bfe:	80 81       	ld	r24, Z
    3c00:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <UART_sendByte>
		i++;
    3c04:	89 81       	ldd	r24, Y+1	; 0x01
    3c06:	8f 5f       	subi	r24, 0xFF	; 255
    3c08:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	28 2f       	mov	r18, r24
    3c0e:	30 e0       	ldi	r19, 0x00	; 0
    3c10:	8a 81       	ldd	r24, Y+2	; 0x02
    3c12:	9b 81       	ldd	r25, Y+3	; 0x03
    3c14:	fc 01       	movw	r30, r24
    3c16:	e2 0f       	add	r30, r18
    3c18:	f3 1f       	adc	r31, r19
    3c1a:	80 81       	ld	r24, Z
    3c1c:	88 23       	and	r24, r24
    3c1e:	39 f7       	brne	.-50     	; 0x3bee <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3c20:	0f 90       	pop	r0
    3c22:	0f 90       	pop	r0
    3c24:	0f 90       	pop	r0
    3c26:	cf 91       	pop	r28
    3c28:	df 91       	pop	r29
    3c2a:	08 95       	ret

00003c2c <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    3c2c:	0f 93       	push	r16
    3c2e:	1f 93       	push	r17
    3c30:	df 93       	push	r29
    3c32:	cf 93       	push	r28
    3c34:	00 d0       	rcall	.+0      	; 0x3c36 <UART_receiveString+0xa>
    3c36:	0f 92       	push	r0
    3c38:	cd b7       	in	r28, 0x3d	; 61
    3c3a:	de b7       	in	r29, 0x3e	; 62
    3c3c:	9b 83       	std	Y+3, r25	; 0x03
    3c3e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3c40:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_receiveByte();
    3c42:	89 81       	ldd	r24, Y+1	; 0x01
    3c44:	28 2f       	mov	r18, r24
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	8a 81       	ldd	r24, Y+2	; 0x02
    3c4a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c4c:	8c 01       	movw	r16, r24
    3c4e:	02 0f       	add	r16, r18
    3c50:	13 1f       	adc	r17, r19
    3c52:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <UART_receiveByte>
    3c56:	f8 01       	movw	r30, r16
    3c58:	80 83       	st	Z, r24
    3c5a:	0f c0       	rjmp	.+30     	; 0x3c7a <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    3c5c:	89 81       	ldd	r24, Y+1	; 0x01
    3c5e:	8f 5f       	subi	r24, 0xFF	; 255
    3c60:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    3c62:	89 81       	ldd	r24, Y+1	; 0x01
    3c64:	28 2f       	mov	r18, r24
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c6c:	8c 01       	movw	r16, r24
    3c6e:	02 0f       	add	r16, r18
    3c70:	13 1f       	adc	r17, r19
    3c72:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <UART_receiveByte>
    3c76:	f8 01       	movw	r30, r16
    3c78:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_receiveByte();
	while(Str[i] != '#')
    3c7a:	89 81       	ldd	r24, Y+1	; 0x01
    3c7c:	28 2f       	mov	r18, r24
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	8a 81       	ldd	r24, Y+2	; 0x02
    3c82:	9b 81       	ldd	r25, Y+3	; 0x03
    3c84:	fc 01       	movw	r30, r24
    3c86:	e2 0f       	add	r30, r18
    3c88:	f3 1f       	adc	r31, r19
    3c8a:	80 81       	ld	r24, Z
    3c8c:	83 32       	cpi	r24, 0x23	; 35
    3c8e:	31 f7       	brne	.-52     	; 0x3c5c <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_receiveByte();
	}
	Str[i] = '\0';
    3c90:	89 81       	ldd	r24, Y+1	; 0x01
    3c92:	28 2f       	mov	r18, r24
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	8a 81       	ldd	r24, Y+2	; 0x02
    3c98:	9b 81       	ldd	r25, Y+3	; 0x03
    3c9a:	fc 01       	movw	r30, r24
    3c9c:	e2 0f       	add	r30, r18
    3c9e:	f3 1f       	adc	r31, r19
    3ca0:	10 82       	st	Z, r1
}
    3ca2:	0f 90       	pop	r0
    3ca4:	0f 90       	pop	r0
    3ca6:	0f 90       	pop	r0
    3ca8:	cf 91       	pop	r28
    3caa:	df 91       	pop	r29
    3cac:	1f 91       	pop	r17
    3cae:	0f 91       	pop	r16
    3cb0:	08 95       	ret

00003cb2 <__prologue_saves__>:
    3cb2:	2f 92       	push	r2
    3cb4:	3f 92       	push	r3
    3cb6:	4f 92       	push	r4
    3cb8:	5f 92       	push	r5
    3cba:	6f 92       	push	r6
    3cbc:	7f 92       	push	r7
    3cbe:	8f 92       	push	r8
    3cc0:	9f 92       	push	r9
    3cc2:	af 92       	push	r10
    3cc4:	bf 92       	push	r11
    3cc6:	cf 92       	push	r12
    3cc8:	df 92       	push	r13
    3cca:	ef 92       	push	r14
    3ccc:	ff 92       	push	r15
    3cce:	0f 93       	push	r16
    3cd0:	1f 93       	push	r17
    3cd2:	cf 93       	push	r28
    3cd4:	df 93       	push	r29
    3cd6:	cd b7       	in	r28, 0x3d	; 61
    3cd8:	de b7       	in	r29, 0x3e	; 62
    3cda:	ca 1b       	sub	r28, r26
    3cdc:	db 0b       	sbc	r29, r27
    3cde:	0f b6       	in	r0, 0x3f	; 63
    3ce0:	f8 94       	cli
    3ce2:	de bf       	out	0x3e, r29	; 62
    3ce4:	0f be       	out	0x3f, r0	; 63
    3ce6:	cd bf       	out	0x3d, r28	; 61
    3ce8:	09 94       	ijmp

00003cea <__epilogue_restores__>:
    3cea:	2a 88       	ldd	r2, Y+18	; 0x12
    3cec:	39 88       	ldd	r3, Y+17	; 0x11
    3cee:	48 88       	ldd	r4, Y+16	; 0x10
    3cf0:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cf2:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cf4:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cf6:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cf8:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cfa:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cfc:	b9 84       	ldd	r11, Y+9	; 0x09
    3cfe:	c8 84       	ldd	r12, Y+8	; 0x08
    3d00:	df 80       	ldd	r13, Y+7	; 0x07
    3d02:	ee 80       	ldd	r14, Y+6	; 0x06
    3d04:	fd 80       	ldd	r15, Y+5	; 0x05
    3d06:	0c 81       	ldd	r16, Y+4	; 0x04
    3d08:	1b 81       	ldd	r17, Y+3	; 0x03
    3d0a:	aa 81       	ldd	r26, Y+2	; 0x02
    3d0c:	b9 81       	ldd	r27, Y+1	; 0x01
    3d0e:	ce 0f       	add	r28, r30
    3d10:	d1 1d       	adc	r29, r1
    3d12:	0f b6       	in	r0, 0x3f	; 63
    3d14:	f8 94       	cli
    3d16:	de bf       	out	0x3e, r29	; 62
    3d18:	0f be       	out	0x3f, r0	; 63
    3d1a:	cd bf       	out	0x3d, r28	; 61
    3d1c:	ed 01       	movw	r28, r26
    3d1e:	08 95       	ret

00003d20 <itoa>:
    3d20:	fb 01       	movw	r30, r22
    3d22:	9f 01       	movw	r18, r30
    3d24:	e8 94       	clt
    3d26:	42 30       	cpi	r20, 0x02	; 2
    3d28:	c4 f0       	brlt	.+48     	; 0x3d5a <itoa+0x3a>
    3d2a:	45 32       	cpi	r20, 0x25	; 37
    3d2c:	b4 f4       	brge	.+44     	; 0x3d5a <itoa+0x3a>
    3d2e:	4a 30       	cpi	r20, 0x0A	; 10
    3d30:	29 f4       	brne	.+10     	; 0x3d3c <itoa+0x1c>
    3d32:	97 fb       	bst	r25, 7
    3d34:	1e f4       	brtc	.+6      	; 0x3d3c <itoa+0x1c>
    3d36:	90 95       	com	r25
    3d38:	81 95       	neg	r24
    3d3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d3c:	64 2f       	mov	r22, r20
    3d3e:	77 27       	eor	r23, r23
    3d40:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <__udivmodhi4>
    3d44:	80 5d       	subi	r24, 0xD0	; 208
    3d46:	8a 33       	cpi	r24, 0x3A	; 58
    3d48:	0c f0       	brlt	.+2      	; 0x3d4c <itoa+0x2c>
    3d4a:	89 5d       	subi	r24, 0xD9	; 217
    3d4c:	81 93       	st	Z+, r24
    3d4e:	cb 01       	movw	r24, r22
    3d50:	00 97       	sbiw	r24, 0x00	; 0
    3d52:	a1 f7       	brne	.-24     	; 0x3d3c <itoa+0x1c>
    3d54:	16 f4       	brtc	.+4      	; 0x3d5a <itoa+0x3a>
    3d56:	5d e2       	ldi	r21, 0x2D	; 45
    3d58:	51 93       	st	Z+, r21
    3d5a:	10 82       	st	Z, r1
    3d5c:	c9 01       	movw	r24, r18
    3d5e:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <strrev>

00003d62 <strrev>:
    3d62:	dc 01       	movw	r26, r24
    3d64:	fc 01       	movw	r30, r24
    3d66:	67 2f       	mov	r22, r23
    3d68:	71 91       	ld	r23, Z+
    3d6a:	77 23       	and	r23, r23
    3d6c:	e1 f7       	brne	.-8      	; 0x3d66 <strrev+0x4>
    3d6e:	32 97       	sbiw	r30, 0x02	; 2
    3d70:	04 c0       	rjmp	.+8      	; 0x3d7a <strrev+0x18>
    3d72:	7c 91       	ld	r23, X
    3d74:	6d 93       	st	X+, r22
    3d76:	70 83       	st	Z, r23
    3d78:	62 91       	ld	r22, -Z
    3d7a:	ae 17       	cp	r26, r30
    3d7c:	bf 07       	cpc	r27, r31
    3d7e:	c8 f3       	brcs	.-14     	; 0x3d72 <strrev+0x10>
    3d80:	08 95       	ret

00003d82 <__udivmodhi4>:
    3d82:	aa 1b       	sub	r26, r26
    3d84:	bb 1b       	sub	r27, r27
    3d86:	51 e1       	ldi	r21, 0x11	; 17
    3d88:	07 c0       	rjmp	.+14     	; 0x3d98 <__udivmodhi4_ep>

00003d8a <__udivmodhi4_loop>:
    3d8a:	aa 1f       	adc	r26, r26
    3d8c:	bb 1f       	adc	r27, r27
    3d8e:	a6 17       	cp	r26, r22
    3d90:	b7 07       	cpc	r27, r23
    3d92:	10 f0       	brcs	.+4      	; 0x3d98 <__udivmodhi4_ep>
    3d94:	a6 1b       	sub	r26, r22
    3d96:	b7 0b       	sbc	r27, r23

00003d98 <__udivmodhi4_ep>:
    3d98:	88 1f       	adc	r24, r24
    3d9a:	99 1f       	adc	r25, r25
    3d9c:	5a 95       	dec	r21
    3d9e:	a9 f7       	brne	.-22     	; 0x3d8a <__udivmodhi4_loop>
    3da0:	80 95       	com	r24
    3da2:	90 95       	com	r25
    3da4:	bc 01       	movw	r22, r24
    3da6:	cd 01       	movw	r24, r26
    3da8:	08 95       	ret

00003daa <_exit>:
    3daa:	f8 94       	cli

00003dac <__stop_program>:
    3dac:	ff cf       	rjmp	.-2      	; 0x3dac <__stop_program>
